<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="$this.ListaAliasCampos" xml:space="preserve">
    <value>Número Factura, Producto, Póliza, Tipo Factura, Tipo Anexo, Cod. Cliente, Cliente Factura, Fecha Emisión, Fecha de Vencimiento, Vigencia Desde, Vigencia Hasta, Número Cuota, Total Cuotas, Ramo,Documento Fiscal, Prima Neta Emitida, Estado Factura,Aseguradora,Tipo Cliente, Nombre Ramo, Comisión,Porcentaje Comisión, Nombre Cliente, Fecha Pago, Fecha Anulación, Fecha Aplica Pago</value>
  </data>
  <data name="$this.ListaCampos" xml:space="preserve">
    <value>NumeroFactura, IdProducto, IdPoliza, TipoFactura, IdAnexo, IdCliente, NombreCliente, FechaEmision, FechaPago, VigenciaDesde, VigenciaHasta, NumCuota, TotalCuotas, IdRamo,DocumentoFiscal, (select sum(PrimaNeta) from FacturasMovimientos where TipoMovimiento = 'EMISION'  AND FacturasMovimientos.NumeroFactura  = Facturas.NumeroFactura AND FacturasMovimientos.IdProducto  = Facturas.IdProducto AND FacturasMovimientos.IdPoliza = Facturas.IdPoliza AND FacturasMovimientos.IdRamo = Facturas.IdRamo) as PrimaNetaEmite, (case when (select count(*) from AvisosCobro inner join AvisosCobroFacturas on AvisosCobro.IdAvisoCobro = AvisosCobroFacturas.IdAvisoCobro where AvisosCobro.MotivoAnulacion is not null and AvisosCobroFacturas.IdPoliza = Facturas.IdPoliza  and AvisosCobroFacturas.IdProducto = Facturas.IdProducto and AvisosCobroFacturas.NumeroFactura = Facturas.NumeroFactura and AvisosCobroFacturas.IdRamo = Facturas.IdRamo) = 0 AND (select count(*) from FacturasMovimientos where FacturasMovimientos.TipoMovimiento = 'PAGO' and FacturasMovimientos.NumeroFactura  = Facturas.NumeroFactura AND FacturasMovimientos.IdProducto  = Facturas.IdProducto AND FacturasMovimientos.IdPoliza = Facturas.IdPoliza AND FacturasMovimientos.IdRamo = Facturas.IdRamo ) &gt; 0 then 'PAGADA' when (select count(*) from AvisosCobro inner join AvisosCobroFacturas on AvisosCobro.IdAvisoCobro = AvisosCobroFacturas.IdAvisoCobro where AvisosCobro.MotivoAnulacion is not null and AvisosCobroFacturas.IdPoliza = Facturas.IdPoliza  and AvisosCobroFacturas.IdProducto = Facturas.IdProducto and AvisosCobroFacturas.NumeroFactura = Facturas.NumeroFactura and AvisosCobroFacturas.IdRamo = Facturas.IdRamo) &gt; 0 OR ((select count(*) from FacturasMovimientos where FacturasMovimientos.TipoMovimiento = 'ANULACION' and FacturasMovimientos.NumeroFactura  = Facturas.NumeroFactura AND FacturasMovimientos.IdProducto  = Facturas.IdProducto AND FacturasMovimientos.IdPoliza = Facturas.IdPoliza AND FacturasMovimientos.IdRamo = Facturas.IdRamo ) &gt; 0 AND (SELECT SUM(PrimaNeta) FROM FacturasMovimientos WHERE FacturasMovimientos.NumeroFactura = Facturas.NumeroFactura and FacturasMovimientos.IdProducto = Facturas.IdProducto and FacturasMovimientos.IdPoliza = Facturas.IdPoliza and FacturasMovimientos.IdRamo = Facturas.IdRamo) = 0 ) then 'ANULADA' else 'PENDIENTE' END) as EstadoFactura, (select top 1 Aseguradoras.Nombre from Productos inner join Aseguradoras on Productos.idaseguradora = Aseguradoras.idaseguradora where Productos.idproducto = Facturas.IdProducto) as Aseguradora, isnull((select top 1 IdTipoCliente from Clientes where Clientes.IdCliente = Facturas.IdCliente),'') as TipoCliente, (select top 1 NombreRamo from RamoSeguros where RamoSeguros.idramo = Facturas.idramo ) as NomRamo, (select sum(Comision) from FacturasMovimientos where FacturasMovimientos.TipoMovimiento = 'EMISION' AND FacturasMovimientos.NumeroFactura  = Facturas.NumeroFactura AND FacturasMovimientos.IdProducto  = Facturas.IdProducto AND FacturasMovimientos.IdPoliza = Facturas.IdPoliza AND FacturasMovimientos.IdRamo = Facturas.IdRamo) as Comision,PorceComision, isnull((select top 1 NombreCliente from Clientes where Clientes.IdCliente = Facturas.IdCliente),'') as ClCliente,(select top 1 fechamovimiento from FacturasMovimientos where FacturasMovimientos.NumeroFactura = Facturas.NumeroFactura and FacturasMovimientos.IdProducto = Facturas.IdProducto and FacturasMovimientos.IdPoliza = Facturas.IdPoliza and FacturasMovimientos.IdRamo = Facturas.IdRamo and tipomovimiento = 'pago' order by fechamovimiento desc) as FechaPago,(select top 1 fechamovimiento from FacturasMovimientos where FacturasMovimientos.NumeroFactura = Facturas.NumeroFactura and FacturasMovimientos.IdProducto = Facturas.IdProducto and FacturasMovimientos.IdPoliza = Facturas.IdPoliza and FacturasMovimientos.IdRamo = Facturas.IdRamo and tipomovimiento = 'anulacion' order by fechamovimiento desc) as FechaAnula,(select top 1 replace(convert(varchar,FechaGrabacion,106),' ','/') + ' ' + convert(varchar,FechaGrabacion,114) from FacturasMovimientos where FacturasMovimientos.NumeroFactura = Facturas.NumeroFactura and FacturasMovimientos.IdProducto = Facturas.IdProducto and FacturasMovimientos.IdPoliza = Facturas.IdPoliza and FacturasMovimientos.IdRamo = Facturas.IdRamo and tipomovimiento = 'pago' order by fechamovimiento desc) as FechaAplicaPago</value>
  </data>
  <data name="$this.ListaCamposOcultos" xml:space="preserve">
    <value>IdAnexo, IdCliente, VigenciaDesde, VigenciaHasta, NumCuota, TotalCuotas, IdRamo,PrimaNetaEmite,EstadoFactura,Aseguradora,TipoCliente,NomRamo, Comision,PorceComision,ClCliente,FechaPago,FechaAnula,FechaAplicaPago</value>
  </data>
</root>