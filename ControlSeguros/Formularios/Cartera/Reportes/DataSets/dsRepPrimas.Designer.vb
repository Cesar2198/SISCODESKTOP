'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8800
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsRepPrimas"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsRepPrimas
    Inherits Global.System.Data.DataSet
    
    Private tablePrimas As PrimasDataTable
    
    Private tableImagenes As ImagenesDataTable
    
    Private tableAvisoCobro As AvisoCobroDataTable
    
    Private tableClientes As ClientesDataTable
    
    Private tableNotasCredito As NotasCreditoDataTable
    
    Private tableDepositos As DepositosDataTable
    
    Private tableDescuento As DescuentoDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Primas")) Is Nothing) Then
                MyBase.Tables.Add(New PrimasDataTable(ds.Tables("Primas")))
            End If
            If (Not (ds.Tables("Imagenes")) Is Nothing) Then
                MyBase.Tables.Add(New ImagenesDataTable(ds.Tables("Imagenes")))
            End If
            If (Not (ds.Tables("AvisoCobro")) Is Nothing) Then
                MyBase.Tables.Add(New AvisoCobroDataTable(ds.Tables("AvisoCobro")))
            End If
            If (Not (ds.Tables("Clientes")) Is Nothing) Then
                MyBase.Tables.Add(New ClientesDataTable(ds.Tables("Clientes")))
            End If
            If (Not (ds.Tables("NotasCredito")) Is Nothing) Then
                MyBase.Tables.Add(New NotasCreditoDataTable(ds.Tables("NotasCredito")))
            End If
            If (Not (ds.Tables("Depositos")) Is Nothing) Then
                MyBase.Tables.Add(New DepositosDataTable(ds.Tables("Depositos")))
            End If
            If (Not (ds.Tables("Descuento")) Is Nothing) Then
                MyBase.Tables.Add(New DescuentoDataTable(ds.Tables("Descuento")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Primas() As PrimasDataTable
        Get
            Return Me.tablePrimas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Imagenes() As ImagenesDataTable
        Get
            Return Me.tableImagenes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AvisoCobro() As AvisoCobroDataTable
        Get
            Return Me.tableAvisoCobro
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Clientes() As ClientesDataTable
        Get
            Return Me.tableClientes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NotasCredito() As NotasCreditoDataTable
        Get
            Return Me.tableNotasCredito
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Depositos() As DepositosDataTable
        Get
            Return Me.tableDepositos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Descuento() As DescuentoDataTable
        Get
            Return Me.tableDescuento
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsRepPrimas = CType(MyBase.Clone,dsRepPrimas)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Primas")) Is Nothing) Then
                MyBase.Tables.Add(New PrimasDataTable(ds.Tables("Primas")))
            End If
            If (Not (ds.Tables("Imagenes")) Is Nothing) Then
                MyBase.Tables.Add(New ImagenesDataTable(ds.Tables("Imagenes")))
            End If
            If (Not (ds.Tables("AvisoCobro")) Is Nothing) Then
                MyBase.Tables.Add(New AvisoCobroDataTable(ds.Tables("AvisoCobro")))
            End If
            If (Not (ds.Tables("Clientes")) Is Nothing) Then
                MyBase.Tables.Add(New ClientesDataTable(ds.Tables("Clientes")))
            End If
            If (Not (ds.Tables("NotasCredito")) Is Nothing) Then
                MyBase.Tables.Add(New NotasCreditoDataTable(ds.Tables("NotasCredito")))
            End If
            If (Not (ds.Tables("Depositos")) Is Nothing) Then
                MyBase.Tables.Add(New DepositosDataTable(ds.Tables("Depositos")))
            End If
            If (Not (ds.Tables("Descuento")) Is Nothing) Then
                MyBase.Tables.Add(New DescuentoDataTable(ds.Tables("Descuento")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePrimas = CType(MyBase.Tables("Primas"),PrimasDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePrimas) Is Nothing) Then
                Me.tablePrimas.InitVars
            End If
        End If
        Me.tableImagenes = CType(MyBase.Tables("Imagenes"),ImagenesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableImagenes) Is Nothing) Then
                Me.tableImagenes.InitVars
            End If
        End If
        Me.tableAvisoCobro = CType(MyBase.Tables("AvisoCobro"),AvisoCobroDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAvisoCobro) Is Nothing) Then
                Me.tableAvisoCobro.InitVars
            End If
        End If
        Me.tableClientes = CType(MyBase.Tables("Clientes"),ClientesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableClientes) Is Nothing) Then
                Me.tableClientes.InitVars
            End If
        End If
        Me.tableNotasCredito = CType(MyBase.Tables("NotasCredito"),NotasCreditoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNotasCredito) Is Nothing) Then
                Me.tableNotasCredito.InitVars
            End If
        End If
        Me.tableDepositos = CType(MyBase.Tables("Depositos"),DepositosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDepositos) Is Nothing) Then
                Me.tableDepositos.InitVars
            End If
        End If
        Me.tableDescuento = CType(MyBase.Tables("Descuento"),DescuentoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDescuento) Is Nothing) Then
                Me.tableDescuento.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsRepPrimas"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsRepPrimas.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePrimas = New PrimasDataTable
        MyBase.Tables.Add(Me.tablePrimas)
        Me.tableImagenes = New ImagenesDataTable
        MyBase.Tables.Add(Me.tableImagenes)
        Me.tableAvisoCobro = New AvisoCobroDataTable
        MyBase.Tables.Add(Me.tableAvisoCobro)
        Me.tableClientes = New ClientesDataTable
        MyBase.Tables.Add(Me.tableClientes)
        Me.tableNotasCredito = New NotasCreditoDataTable
        MyBase.Tables.Add(Me.tableNotasCredito)
        Me.tableDepositos = New DepositosDataTable
        MyBase.Tables.Add(Me.tableDepositos)
        Me.tableDescuento = New DescuentoDataTable
        MyBase.Tables.Add(Me.tableDescuento)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePrimas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeImagenes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAvisoCobro() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeClientes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNotasCredito() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDepositos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDescuento() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsRepPrimas = New dsRepPrimas
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PrimasRowChangeEventHandler(ByVal sender As Object, ByVal e As PrimasRowChangeEvent)
    
    Public Delegate Sub ImagenesRowChangeEventHandler(ByVal sender As Object, ByVal e As ImagenesRowChangeEvent)
    
    Public Delegate Sub AvisoCobroRowChangeEventHandler(ByVal sender As Object, ByVal e As AvisoCobroRowChangeEvent)
    
    Public Delegate Sub ClientesRowChangeEventHandler(ByVal sender As Object, ByVal e As ClientesRowChangeEvent)
    
    Public Delegate Sub NotasCreditoRowChangeEventHandler(ByVal sender As Object, ByVal e As NotasCreditoRowChangeEvent)
    
    Public Delegate Sub DepositosRowChangeEventHandler(ByVal sender As Object, ByVal e As DepositosRowChangeEvent)
    
    Public Delegate Sub DescuentoRowChangeEventHandler(ByVal sender As Object, ByVal e As DescuentoRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PrimasDataTable
        Inherits Global.System.Data.TypedTableBase(Of PrimasRow)
        
        Private columnNumeroFactura As Global.System.Data.DataColumn
        
        Private columnProducto As Global.System.Data.DataColumn
        
        Private columnRamo As Global.System.Data.DataColumn
        
        Private columnTipoSeguro As Global.System.Data.DataColumn
        
        Private columnAseguradora As Global.System.Data.DataColumn
        
        Private columnPoliza As Global.System.Data.DataColumn
        
        Private columnTipoFactura As Global.System.Data.DataColumn
        
        Private columnNombreCliente As Global.System.Data.DataColumn
        
        Private columnFechaPago As Global.System.Data.DataColumn
        
        Private columnNumCuota As Global.System.Data.DataColumn
        
        Private columnTotalCuotas As Global.System.Data.DataColumn
        
        Private columnDias As Global.System.Data.DataColumn
        
        Private columnPrimaNeta As Global.System.Data.DataColumn
        
        Private columnGastos As Global.System.Data.DataColumn
        
        Private columnImpuestos As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        Private columnComision As Global.System.Data.DataColumn
        
        Private columnIdAvisoCobro As Global.System.Data.DataColumn
        
        Private columnGastosEmision As Global.System.Data.DataColumn
        
        Private columnGastosFracciona As Global.System.Data.DataColumn
        
        Private columnGastosBomberos As Global.System.Data.DataColumn
        
        Private columnNumeroCuota As Global.System.Data.DataColumn
        
        Private columnIdCliente As Global.System.Data.DataColumn
        
        Private columnReferencia As Global.System.Data.DataColumn
        
        Private columnDocumentoFiscal As Global.System.Data.DataColumn
        
        Private columnFormaPago As Global.System.Data.DataColumn
        
        Private columnPagoTardio As Global.System.Data.DataColumn
        
        Private columnUsuario As Global.System.Data.DataColumn
        
        Private columnMotivo As Global.System.Data.DataColumn
        
        Private columnNota As Global.System.Data.DataColumn
        
        Private columnDireccion As Global.System.Data.DataColumn
        
        Private columnCuota As Global.System.Data.DataColumn
        
        Private columnDocFiscalEnv As Global.System.Data.DataColumn
        
        Private columnReciboCaja As Global.System.Data.DataColumn
        
        Private columnGestion As Global.System.Data.DataColumn
        
        Private columnObservacionRecibo As Global.System.Data.DataColumn
        
        Private columnFechaVence As Global.System.Data.DataColumn
        
        Private columnDiasVence As Global.System.Data.DataColumn
        
        Private columnVendedor As Global.System.Data.DataColumn
        
        Private columnNombreUsuarioGraba As Global.System.Data.DataColumn
        
        Private columnCargoUsuarioGraba As Global.System.Data.DataColumn
        
        Private columnRetIva As Global.System.Data.DataColumn
        
        Private columnPrimaExcenta As Global.System.Data.DataColumn
        
        Private columnFechaAplicaPago As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Primas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RamoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRamo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoSeguroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoSeguro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AseguradoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAseguradora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PolizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPoliza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumCuotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumCuota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalCuotasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalCuotas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDias
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrimaNetaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrimaNeta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GastosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGastos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpuestosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpuestos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ComisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdAvisoCobroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdAvisoCobro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GastosEmisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGastosEmision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GastosFraccionaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGastosFracciona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GastosBomberosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGastosBomberos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroCuotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroCuota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocumentoFiscalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocumentoFiscal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormaPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormaPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PagoTardioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPagoTardio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MotivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMotivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocFiscalEnvColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocFiscalEnv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReciboCajaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReciboCaja
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GestionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGestion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionReciboColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacionRecibo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaVenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaVence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiasVenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiasVence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreUsuarioGrabaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreUsuarioGraba
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CargoUsuarioGrabaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCargoUsuarioGraba
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RetIvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRetIva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrimaExcentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrimaExcenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaAplicaPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaAplicaPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PrimasRow
            Get
                Return CType(Me.Rows(index),PrimasRow)
            End Get
        End Property
        
        Public Event PrimasRowChanging As PrimasRowChangeEventHandler
        
        Public Event PrimasRowChanged As PrimasRowChangeEventHandler
        
        Public Event PrimasRowDeleting As PrimasRowChangeEventHandler
        
        Public Event PrimasRowDeleted As PrimasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPrimasRow(ByVal row As PrimasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPrimasRow( _
                    ByVal NumeroFactura As Integer,  _
                    ByVal Producto As String,  _
                    ByVal Ramo As String,  _
                    ByVal TipoSeguro As String,  _
                    ByVal Aseguradora As String,  _
                    ByVal Poliza As String,  _
                    ByVal TipoFactura As String,  _
                    ByVal NombreCliente As String,  _
                    ByVal FechaPago As Date,  _
                    ByVal NumCuota As String,  _
                    ByVal TotalCuotas As String,  _
                    ByVal Dias As String,  _
                    ByVal PrimaNeta As Double,  _
                    ByVal Gastos As Double,  _
                    ByVal Impuestos As Double,  _
                    ByVal Total As Double,  _
                    ByVal Comision As Double,  _
                    ByVal IdAvisoCobro As String,  _
                    ByVal GastosEmision As Double,  _
                    ByVal GastosFracciona As Double,  _
                    ByVal GastosBomberos As Double,  _
                    ByVal NumeroCuota As String,  _
                    ByVal IdCliente As String,  _
                    ByVal Referencia As String,  _
                    ByVal DocumentoFiscal As String,  _
                    ByVal FormaPago As String,  _
                    ByVal PagoTardio As Date,  _
                    ByVal Usuario As String,  _
                    ByVal Motivo As String,  _
                    ByVal Nota As String,  _
                    ByVal Direccion As String,  _
                    ByVal Cuota As String,  _
                    ByVal DocFiscalEnv As String,  _
                    ByVal ReciboCaja As String,  _
                    ByVal Gestion As String,  _
                    ByVal ObservacionRecibo As String,  _
                    ByVal FechaVence As Date,  _
                    ByVal DiasVence As Integer,  _
                    ByVal Vendedor As String,  _
                    ByVal NombreUsuarioGraba As String,  _
                    ByVal CargoUsuarioGraba As String,  _
                    ByVal RetIva As Double,  _
                    ByVal PrimaExcenta As Double,  _
                    ByVal FechaAplicaPago As String) As PrimasRow
            Dim rowPrimasRow As PrimasRow = CType(Me.NewRow,PrimasRow)
            Dim columnValuesArray() As Object = New Object() {NumeroFactura, Producto, Ramo, TipoSeguro, Aseguradora, Poliza, TipoFactura, NombreCliente, FechaPago, NumCuota, TotalCuotas, Dias, PrimaNeta, Gastos, Impuestos, Total, Comision, IdAvisoCobro, GastosEmision, GastosFracciona, GastosBomberos, NumeroCuota, IdCliente, Referencia, DocumentoFiscal, FormaPago, PagoTardio, Usuario, Motivo, Nota, Direccion, Cuota, DocFiscalEnv, ReciboCaja, Gestion, ObservacionRecibo, FechaVence, DiasVence, Vendedor, NombreUsuarioGraba, CargoUsuarioGraba, RetIva, PrimaExcenta, FechaAplicaPago}
            rowPrimasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPrimasRow)
            Return rowPrimasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PrimasDataTable = CType(MyBase.Clone,PrimasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PrimasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNumeroFactura = MyBase.Columns("NumeroFactura")
            Me.columnProducto = MyBase.Columns("Producto")
            Me.columnRamo = MyBase.Columns("Ramo")
            Me.columnTipoSeguro = MyBase.Columns("TipoSeguro")
            Me.columnAseguradora = MyBase.Columns("Aseguradora")
            Me.columnPoliza = MyBase.Columns("Poliza")
            Me.columnTipoFactura = MyBase.Columns("TipoFactura")
            Me.columnNombreCliente = MyBase.Columns("NombreCliente")
            Me.columnFechaPago = MyBase.Columns("FechaPago")
            Me.columnNumCuota = MyBase.Columns("NumCuota")
            Me.columnTotalCuotas = MyBase.Columns("TotalCuotas")
            Me.columnDias = MyBase.Columns("Dias")
            Me.columnPrimaNeta = MyBase.Columns("PrimaNeta")
            Me.columnGastos = MyBase.Columns("Gastos")
            Me.columnImpuestos = MyBase.Columns("Impuestos")
            Me.columnTotal = MyBase.Columns("Total")
            Me.columnComision = MyBase.Columns("Comision")
            Me.columnIdAvisoCobro = MyBase.Columns("IdAvisoCobro")
            Me.columnGastosEmision = MyBase.Columns("GastosEmision")
            Me.columnGastosFracciona = MyBase.Columns("GastosFracciona")
            Me.columnGastosBomberos = MyBase.Columns("GastosBomberos")
            Me.columnNumeroCuota = MyBase.Columns("NumeroCuota")
            Me.columnIdCliente = MyBase.Columns("IdCliente")
            Me.columnReferencia = MyBase.Columns("Referencia")
            Me.columnDocumentoFiscal = MyBase.Columns("DocumentoFiscal")
            Me.columnFormaPago = MyBase.Columns("FormaPago")
            Me.columnPagoTardio = MyBase.Columns("PagoTardio")
            Me.columnUsuario = MyBase.Columns("Usuario")
            Me.columnMotivo = MyBase.Columns("Motivo")
            Me.columnNota = MyBase.Columns("Nota")
            Me.columnDireccion = MyBase.Columns("Direccion")
            Me.columnCuota = MyBase.Columns("Cuota")
            Me.columnDocFiscalEnv = MyBase.Columns("DocFiscalEnv")
            Me.columnReciboCaja = MyBase.Columns("ReciboCaja")
            Me.columnGestion = MyBase.Columns("Gestion")
            Me.columnObservacionRecibo = MyBase.Columns("ObservacionRecibo")
            Me.columnFechaVence = MyBase.Columns("FechaVence")
            Me.columnDiasVence = MyBase.Columns("DiasVence")
            Me.columnVendedor = MyBase.Columns("Vendedor")
            Me.columnNombreUsuarioGraba = MyBase.Columns("NombreUsuarioGraba")
            Me.columnCargoUsuarioGraba = MyBase.Columns("CargoUsuarioGraba")
            Me.columnRetIva = MyBase.Columns("RetIva")
            Me.columnPrimaExcenta = MyBase.Columns("PrimaExcenta")
            Me.columnFechaAplicaPago = MyBase.Columns("FechaAplicaPago")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNumeroFactura = New Global.System.Data.DataColumn("NumeroFactura", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroFactura)
            Me.columnProducto = New Global.System.Data.DataColumn("Producto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProducto)
            Me.columnRamo = New Global.System.Data.DataColumn("Ramo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRamo)
            Me.columnTipoSeguro = New Global.System.Data.DataColumn("TipoSeguro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoSeguro)
            Me.columnAseguradora = New Global.System.Data.DataColumn("Aseguradora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAseguradora)
            Me.columnPoliza = New Global.System.Data.DataColumn("Poliza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPoliza)
            Me.columnTipoFactura = New Global.System.Data.DataColumn("TipoFactura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoFactura)
            Me.columnNombreCliente = New Global.System.Data.DataColumn("NombreCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCliente)
            Me.columnFechaPago = New Global.System.Data.DataColumn("FechaPago", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaPago)
            Me.columnNumCuota = New Global.System.Data.DataColumn("NumCuota", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumCuota)
            Me.columnTotalCuotas = New Global.System.Data.DataColumn("TotalCuotas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalCuotas)
            Me.columnDias = New Global.System.Data.DataColumn("Dias", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDias)
            Me.columnPrimaNeta = New Global.System.Data.DataColumn("PrimaNeta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrimaNeta)
            Me.columnGastos = New Global.System.Data.DataColumn("Gastos", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGastos)
            Me.columnImpuestos = New Global.System.Data.DataColumn("Impuestos", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpuestos)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.columnComision = New Global.System.Data.DataColumn("Comision", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComision)
            Me.columnIdAvisoCobro = New Global.System.Data.DataColumn("IdAvisoCobro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdAvisoCobro)
            Me.columnGastosEmision = New Global.System.Data.DataColumn("GastosEmision", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGastosEmision)
            Me.columnGastosFracciona = New Global.System.Data.DataColumn("GastosFracciona", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGastosFracciona)
            Me.columnGastosBomberos = New Global.System.Data.DataColumn("GastosBomberos", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGastosBomberos)
            Me.columnNumeroCuota = New Global.System.Data.DataColumn("NumeroCuota", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroCuota)
            Me.columnIdCliente = New Global.System.Data.DataColumn("IdCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCliente)
            Me.columnReferencia = New Global.System.Data.DataColumn("Referencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferencia)
            Me.columnDocumentoFiscal = New Global.System.Data.DataColumn("DocumentoFiscal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocumentoFiscal)
            Me.columnFormaPago = New Global.System.Data.DataColumn("FormaPago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormaPago)
            Me.columnPagoTardio = New Global.System.Data.DataColumn("PagoTardio", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPagoTardio)
            Me.columnUsuario = New Global.System.Data.DataColumn("Usuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsuario)
            Me.columnMotivo = New Global.System.Data.DataColumn("Motivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMotivo)
            Me.columnNota = New Global.System.Data.DataColumn("Nota", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNota)
            Me.columnDireccion = New Global.System.Data.DataColumn("Direccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
            Me.columnCuota = New Global.System.Data.DataColumn("Cuota", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuota)
            Me.columnDocFiscalEnv = New Global.System.Data.DataColumn("DocFiscalEnv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocFiscalEnv)
            Me.columnReciboCaja = New Global.System.Data.DataColumn("ReciboCaja", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReciboCaja)
            Me.columnGestion = New Global.System.Data.DataColumn("Gestion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGestion)
            Me.columnObservacionRecibo = New Global.System.Data.DataColumn("ObservacionRecibo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacionRecibo)
            Me.columnFechaVence = New Global.System.Data.DataColumn("FechaVence", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaVence)
            Me.columnDiasVence = New Global.System.Data.DataColumn("DiasVence", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiasVence)
            Me.columnVendedor = New Global.System.Data.DataColumn("Vendedor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendedor)
            Me.columnNombreUsuarioGraba = New Global.System.Data.DataColumn("NombreUsuarioGraba", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreUsuarioGraba)
            Me.columnCargoUsuarioGraba = New Global.System.Data.DataColumn("CargoUsuarioGraba", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCargoUsuarioGraba)
            Me.columnRetIva = New Global.System.Data.DataColumn("RetIva", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRetIva)
            Me.columnPrimaExcenta = New Global.System.Data.DataColumn("PrimaExcenta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrimaExcenta)
            Me.columnFechaAplicaPago = New Global.System.Data.DataColumn("FechaAplicaPago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaAplicaPago)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPrimasRow() As PrimasRow
            Return CType(Me.NewRow,PrimasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PrimasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PrimasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PrimasRowChangedEvent) Is Nothing) Then
                RaiseEvent PrimasRowChanged(Me, New PrimasRowChangeEvent(CType(e.Row,PrimasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PrimasRowChangingEvent) Is Nothing) Then
                RaiseEvent PrimasRowChanging(Me, New PrimasRowChangeEvent(CType(e.Row,PrimasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PrimasRowDeletedEvent) Is Nothing) Then
                RaiseEvent PrimasRowDeleted(Me, New PrimasRowChangeEvent(CType(e.Row,PrimasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PrimasRowDeletingEvent) Is Nothing) Then
                RaiseEvent PrimasRowDeleting(Me, New PrimasRowChangeEvent(CType(e.Row,PrimasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePrimasRow(ByVal row As PrimasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRepPrimas = New dsRepPrimas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PrimasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ImagenesDataTable
        Inherits Global.System.Data.TypedTableBase(Of ImagenesRow)
        
        Private columnLogo As Global.System.Data.DataColumn
        
        Private columnSello As Global.System.Data.DataColumn
        
        Private columnLogo2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Imagenes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SelloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSello
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Logo2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogo2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImagenesRow
            Get
                Return CType(Me.Rows(index),ImagenesRow)
            End Get
        End Property
        
        Public Event ImagenesRowChanging As ImagenesRowChangeEventHandler
        
        Public Event ImagenesRowChanged As ImagenesRowChangeEventHandler
        
        Public Event ImagenesRowDeleting As ImagenesRowChangeEventHandler
        
        Public Event ImagenesRowDeleted As ImagenesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddImagenesRow(ByVal row As ImagenesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddImagenesRow(ByVal Logo() As Byte, ByVal Sello() As Byte, ByVal Logo2() As Byte) As ImagenesRow
            Dim rowImagenesRow As ImagenesRow = CType(Me.NewRow,ImagenesRow)
            Dim columnValuesArray() As Object = New Object() {Logo, Sello, Logo2}
            rowImagenesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowImagenesRow)
            Return rowImagenesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ImagenesDataTable = CType(MyBase.Clone,ImagenesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ImagenesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLogo = MyBase.Columns("Logo")
            Me.columnSello = MyBase.Columns("Sello")
            Me.columnLogo2 = MyBase.Columns("Logo2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLogo = New Global.System.Data.DataColumn("Logo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogo)
            Me.columnSello = New Global.System.Data.DataColumn("Sello", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSello)
            Me.columnLogo2 = New Global.System.Data.DataColumn("Logo2", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogo2)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewImagenesRow() As ImagenesRow
            Return CType(Me.NewRow,ImagenesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ImagenesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ImagenesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImagenesRowChangedEvent) Is Nothing) Then
                RaiseEvent ImagenesRowChanged(Me, New ImagenesRowChangeEvent(CType(e.Row,ImagenesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImagenesRowChangingEvent) Is Nothing) Then
                RaiseEvent ImagenesRowChanging(Me, New ImagenesRowChangeEvent(CType(e.Row,ImagenesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImagenesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImagenesRowDeleted(Me, New ImagenesRowChangeEvent(CType(e.Row,ImagenesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImagenesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImagenesRowDeleting(Me, New ImagenesRowChangeEvent(CType(e.Row,ImagenesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveImagenesRow(ByVal row As ImagenesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRepPrimas = New dsRepPrimas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ImagenesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AvisoCobroDataTable
        Inherits Global.System.Data.TypedTableBase(Of AvisoCobroRow)
        
        Private columnIdAvisoCobro As Global.System.Data.DataColumn
        
        Private columnNombreCliente As Global.System.Data.DataColumn
        
        Private columnNIT As Global.System.Data.DataColumn
        
        Private columnDireccion As Global.System.Data.DataColumn
        
        Private columnCiudad As Global.System.Data.DataColumn
        
        Private columnTelefono As Global.System.Data.DataColumn
        
        Private columnContacto As Global.System.Data.DataColumn
        
        Private columnAseguradora As Global.System.Data.DataColumn
        
        Private columnProducto As Global.System.Data.DataColumn
        
        Private columnPoliza As Global.System.Data.DataColumn
        
        Private columnVigenciaDesde As Global.System.Data.DataColumn
        
        Private columnVigenciaHasta As Global.System.Data.DataColumn
        
        Private columnReferencia As Global.System.Data.DataColumn
        
        Private columnNombreFactura As Global.System.Data.DataColumn
        
        Private columnTarjeta As Global.System.Data.DataColumn
        
        Private columnNombreTarjeta As Global.System.Data.DataColumn
        
        Private columnVenceTarjeta As Global.System.Data.DataColumn
        
        Private columnAnexo As Global.System.Data.DataColumn
        
        Private columnEjecutivo As Global.System.Data.DataColumn
        
        Private columnLog As Global.System.Data.DataColumn
        
        Private columnObservaciones As Global.System.Data.DataColumn
        
        Private columnACInterno As Global.System.Data.DataColumn
        
        Private columnFechaGrabacion As Global.System.Data.DataColumn
        
        Private columnFechaNotificacion As Global.System.Data.DataColumn
        
        Private columnContactoACTardio As Global.System.Data.DataColumn
        
        Private columnCargoACTardio As Global.System.Data.DataColumn
        
        Private columnEjecutivoPoliza As Global.System.Data.DataColumn
        
        Private columnEjecutivoCliente As Global.System.Data.DataColumn
        
        Private columnNombreUsuarioGraba As Global.System.Data.DataColumn
        
        Private columnCargoUsuarioGraba As Global.System.Data.DataColumn
        
        Private columnIdImpresion As Global.System.Data.DataColumn
        
        Private columnTotalDescuento As Global.System.Data.DataColumn
        
        Private columnPrimaNeta As Global.System.Data.DataColumn
        
        Private columnPSumaAsegurada As Global.System.Data.DataColumn
        
        Private columnPTarifa As Global.System.Data.DataColumn
        
        Private columnPPrima As Global.System.Data.DataColumn
        
        Private columnPPorceRen As Global.System.Data.DataColumn
        
        Private columnPDescuento As Global.System.Data.DataColumn
        
        Private columnPPrimaNeta As Global.System.Data.DataColumn
        
        Private columnPComiCobranza As Global.System.Data.DataColumn
        
        Private columnPPrimaPagar As Global.System.Data.DataColumn
        
        Private columnPPorceComi As Global.System.Data.DataColumn
        
        Private columnPComision As Global.System.Data.DataColumn
        
        Private columnPIva As Global.System.Data.DataColumn
        
        Private columnPSubtotal As Global.System.Data.DataColumn
        
        Private columnPRetIva As Global.System.Data.DataColumn
        
        Private columnPTotalCCF As Global.System.Data.DataColumn
        
        Private columnBanco As Global.System.Data.DataColumn
        
        Private columnIdCliente As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AvisoCobro"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdAvisoCobroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdAvisoCobro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CiudadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCiudad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContacto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AseguradoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAseguradora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PolizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPoliza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VigenciaDesdeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVigenciaDesde
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VigenciaHastaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVigenciaHasta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TarjetaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTarjeta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreTarjetaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreTarjeta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VenceTarjetaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVenceTarjeta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnexoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnexo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EjecutivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEjecutivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLog
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACInternoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACInterno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaGrabacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaGrabacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaNotificacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaNotificacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactoACTardioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactoACTardio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CargoACTardioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCargoACTardio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EjecutivoPolizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEjecutivoPoliza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EjecutivoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEjecutivoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreUsuarioGrabaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreUsuarioGraba
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CargoUsuarioGrabaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCargoUsuarioGraba
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdImpresionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdImpresion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalDescuentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalDescuento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrimaNetaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrimaNeta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PSumaAseguradaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPSumaAsegurada
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PTarifaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPTarifa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PPrimaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPPrima
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PPorceRenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPPorceRen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PDescuentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPDescuento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PPrimaNetaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPPrimaNeta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PComiCobranzaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPComiCobranza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PPrimaPagarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPPrimaPagar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PPorceComiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPPorceComi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PComisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPComision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PIvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPIva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PSubtotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPSubtotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRetIvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRetIva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PTotalCCFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPTotalCCF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AvisoCobroRow
            Get
                Return CType(Me.Rows(index),AvisoCobroRow)
            End Get
        End Property
        
        Public Event AvisoCobroRowChanging As AvisoCobroRowChangeEventHandler
        
        Public Event AvisoCobroRowChanged As AvisoCobroRowChangeEventHandler
        
        Public Event AvisoCobroRowDeleting As AvisoCobroRowChangeEventHandler
        
        Public Event AvisoCobroRowDeleted As AvisoCobroRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAvisoCobroRow(ByVal row As AvisoCobroRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAvisoCobroRow( _
                    ByVal IdAvisoCobro As String,  _
                    ByVal NombreCliente As String,  _
                    ByVal NIT As String,  _
                    ByVal Direccion As String,  _
                    ByVal Ciudad As String,  _
                    ByVal Telefono As String,  _
                    ByVal Contacto As String,  _
                    ByVal Aseguradora As String,  _
                    ByVal Producto As String,  _
                    ByVal Poliza As String,  _
                    ByVal VigenciaDesde As Date,  _
                    ByVal VigenciaHasta As Date,  _
                    ByVal Referencia As String,  _
                    ByVal NombreFactura As String,  _
                    ByVal Tarjeta As String,  _
                    ByVal NombreTarjeta As String,  _
                    ByVal VenceTarjeta As String,  _
                    ByVal Anexo As String,  _
                    ByVal Ejecutivo As String,  _
                    ByVal Log As String,  _
                    ByVal Observaciones As String,  _
                    ByVal ACInterno As String,  _
                    ByVal FechaGrabacion As Date,  _
                    ByVal FechaNotificacion As Date,  _
                    ByVal ContactoACTardio As String,  _
                    ByVal CargoACTardio As String,  _
                    ByVal EjecutivoPoliza As String,  _
                    ByVal EjecutivoCliente As String,  _
                    ByVal NombreUsuarioGraba As String,  _
                    ByVal CargoUsuarioGraba As String,  _
                    ByVal IdImpresion As String,  _
                    ByVal TotalDescuento As Double,  _
                    ByVal PrimaNeta As Double,  _
                    ByVal PSumaAsegurada As Double,  _
                    ByVal PTarifa As Double,  _
                    ByVal PPrima As Double,  _
                    ByVal PPorceRen As Double,  _
                    ByVal PDescuento As Double,  _
                    ByVal PPrimaNeta As Double,  _
                    ByVal PComiCobranza As Double,  _
                    ByVal PPrimaPagar As Double,  _
                    ByVal PPorceComi As Double,  _
                    ByVal PComision As Double,  _
                    ByVal PIva As Double,  _
                    ByVal PSubtotal As Double,  _
                    ByVal PRetIva As Double,  _
                    ByVal PTotalCCF As Double,  _
                    ByVal Banco As String,  _
                    ByVal IdCliente As String) As AvisoCobroRow
            Dim rowAvisoCobroRow As AvisoCobroRow = CType(Me.NewRow,AvisoCobroRow)
            Dim columnValuesArray() As Object = New Object() {IdAvisoCobro, NombreCliente, NIT, Direccion, Ciudad, Telefono, Contacto, Aseguradora, Producto, Poliza, VigenciaDesde, VigenciaHasta, Referencia, NombreFactura, Tarjeta, NombreTarjeta, VenceTarjeta, Anexo, Ejecutivo, Log, Observaciones, ACInterno, FechaGrabacion, FechaNotificacion, ContactoACTardio, CargoACTardio, EjecutivoPoliza, EjecutivoCliente, NombreUsuarioGraba, CargoUsuarioGraba, IdImpresion, TotalDescuento, PrimaNeta, PSumaAsegurada, PTarifa, PPrima, PPorceRen, PDescuento, PPrimaNeta, PComiCobranza, PPrimaPagar, PPorceComi, PComision, PIva, PSubtotal, PRetIva, PTotalCCF, Banco, IdCliente}
            rowAvisoCobroRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAvisoCobroRow)
            Return rowAvisoCobroRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AvisoCobroDataTable = CType(MyBase.Clone,AvisoCobroDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AvisoCobroDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdAvisoCobro = MyBase.Columns("IdAvisoCobro")
            Me.columnNombreCliente = MyBase.Columns("NombreCliente")
            Me.columnNIT = MyBase.Columns("NIT")
            Me.columnDireccion = MyBase.Columns("Direccion")
            Me.columnCiudad = MyBase.Columns("Ciudad")
            Me.columnTelefono = MyBase.Columns("Telefono")
            Me.columnContacto = MyBase.Columns("Contacto")
            Me.columnAseguradora = MyBase.Columns("Aseguradora")
            Me.columnProducto = MyBase.Columns("Producto")
            Me.columnPoliza = MyBase.Columns("Poliza")
            Me.columnVigenciaDesde = MyBase.Columns("VigenciaDesde")
            Me.columnVigenciaHasta = MyBase.Columns("VigenciaHasta")
            Me.columnReferencia = MyBase.Columns("Referencia")
            Me.columnNombreFactura = MyBase.Columns("NombreFactura")
            Me.columnTarjeta = MyBase.Columns("Tarjeta")
            Me.columnNombreTarjeta = MyBase.Columns("NombreTarjeta")
            Me.columnVenceTarjeta = MyBase.Columns("VenceTarjeta")
            Me.columnAnexo = MyBase.Columns("Anexo")
            Me.columnEjecutivo = MyBase.Columns("Ejecutivo")
            Me.columnLog = MyBase.Columns("Log")
            Me.columnObservaciones = MyBase.Columns("Observaciones")
            Me.columnACInterno = MyBase.Columns("ACInterno")
            Me.columnFechaGrabacion = MyBase.Columns("FechaGrabacion")
            Me.columnFechaNotificacion = MyBase.Columns("FechaNotificacion")
            Me.columnContactoACTardio = MyBase.Columns("ContactoACTardio")
            Me.columnCargoACTardio = MyBase.Columns("CargoACTardio")
            Me.columnEjecutivoPoliza = MyBase.Columns("EjecutivoPoliza")
            Me.columnEjecutivoCliente = MyBase.Columns("EjecutivoCliente")
            Me.columnNombreUsuarioGraba = MyBase.Columns("NombreUsuarioGraba")
            Me.columnCargoUsuarioGraba = MyBase.Columns("CargoUsuarioGraba")
            Me.columnIdImpresion = MyBase.Columns("IdImpresion")
            Me.columnTotalDescuento = MyBase.Columns("TotalDescuento")
            Me.columnPrimaNeta = MyBase.Columns("PrimaNeta")
            Me.columnPSumaAsegurada = MyBase.Columns("PSumaAsegurada")
            Me.columnPTarifa = MyBase.Columns("PTarifa")
            Me.columnPPrima = MyBase.Columns("PPrima")
            Me.columnPPorceRen = MyBase.Columns("PPorceRen")
            Me.columnPDescuento = MyBase.Columns("PDescuento")
            Me.columnPPrimaNeta = MyBase.Columns("PPrimaNeta")
            Me.columnPComiCobranza = MyBase.Columns("PComiCobranza")
            Me.columnPPrimaPagar = MyBase.Columns("PPrimaPagar")
            Me.columnPPorceComi = MyBase.Columns("PPorceComi")
            Me.columnPComision = MyBase.Columns("PComision")
            Me.columnPIva = MyBase.Columns("PIva")
            Me.columnPSubtotal = MyBase.Columns("PSubtotal")
            Me.columnPRetIva = MyBase.Columns("PRetIva")
            Me.columnPTotalCCF = MyBase.Columns("PTotalCCF")
            Me.columnBanco = MyBase.Columns("Banco")
            Me.columnIdCliente = MyBase.Columns("IdCliente")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdAvisoCobro = New Global.System.Data.DataColumn("IdAvisoCobro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdAvisoCobro)
            Me.columnNombreCliente = New Global.System.Data.DataColumn("NombreCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCliente)
            Me.columnNIT = New Global.System.Data.DataColumn("NIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIT)
            Me.columnDireccion = New Global.System.Data.DataColumn("Direccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
            Me.columnCiudad = New Global.System.Data.DataColumn("Ciudad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCiudad)
            Me.columnTelefono = New Global.System.Data.DataColumn("Telefono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono)
            Me.columnContacto = New Global.System.Data.DataColumn("Contacto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContacto)
            Me.columnAseguradora = New Global.System.Data.DataColumn("Aseguradora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAseguradora)
            Me.columnProducto = New Global.System.Data.DataColumn("Producto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProducto)
            Me.columnPoliza = New Global.System.Data.DataColumn("Poliza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPoliza)
            Me.columnVigenciaDesde = New Global.System.Data.DataColumn("VigenciaDesde", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVigenciaDesde)
            Me.columnVigenciaHasta = New Global.System.Data.DataColumn("VigenciaHasta", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVigenciaHasta)
            Me.columnReferencia = New Global.System.Data.DataColumn("Referencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferencia)
            Me.columnNombreFactura = New Global.System.Data.DataColumn("NombreFactura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreFactura)
            Me.columnTarjeta = New Global.System.Data.DataColumn("Tarjeta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTarjeta)
            Me.columnNombreTarjeta = New Global.System.Data.DataColumn("NombreTarjeta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreTarjeta)
            Me.columnVenceTarjeta = New Global.System.Data.DataColumn("VenceTarjeta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVenceTarjeta)
            Me.columnAnexo = New Global.System.Data.DataColumn("Anexo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnexo)
            Me.columnEjecutivo = New Global.System.Data.DataColumn("Ejecutivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEjecutivo)
            Me.columnLog = New Global.System.Data.DataColumn("Log", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLog)
            Me.columnObservaciones = New Global.System.Data.DataColumn("Observaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservaciones)
            Me.columnACInterno = New Global.System.Data.DataColumn("ACInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACInterno)
            Me.columnFechaGrabacion = New Global.System.Data.DataColumn("FechaGrabacion", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaGrabacion)
            Me.columnFechaNotificacion = New Global.System.Data.DataColumn("FechaNotificacion", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaNotificacion)
            Me.columnContactoACTardio = New Global.System.Data.DataColumn("ContactoACTardio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactoACTardio)
            Me.columnCargoACTardio = New Global.System.Data.DataColumn("CargoACTardio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCargoACTardio)
            Me.columnEjecutivoPoliza = New Global.System.Data.DataColumn("EjecutivoPoliza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEjecutivoPoliza)
            Me.columnEjecutivoCliente = New Global.System.Data.DataColumn("EjecutivoCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEjecutivoCliente)
            Me.columnNombreUsuarioGraba = New Global.System.Data.DataColumn("NombreUsuarioGraba", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreUsuarioGraba)
            Me.columnCargoUsuarioGraba = New Global.System.Data.DataColumn("CargoUsuarioGraba", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCargoUsuarioGraba)
            Me.columnIdImpresion = New Global.System.Data.DataColumn("IdImpresion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdImpresion)
            Me.columnTotalDescuento = New Global.System.Data.DataColumn("TotalDescuento", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalDescuento)
            Me.columnPrimaNeta = New Global.System.Data.DataColumn("PrimaNeta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrimaNeta)
            Me.columnPSumaAsegurada = New Global.System.Data.DataColumn("PSumaAsegurada", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPSumaAsegurada)
            Me.columnPTarifa = New Global.System.Data.DataColumn("PTarifa", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPTarifa)
            Me.columnPPrima = New Global.System.Data.DataColumn("PPrima", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPPrima)
            Me.columnPPorceRen = New Global.System.Data.DataColumn("PPorceRen", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPPorceRen)
            Me.columnPDescuento = New Global.System.Data.DataColumn("PDescuento", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPDescuento)
            Me.columnPPrimaNeta = New Global.System.Data.DataColumn("PPrimaNeta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPPrimaNeta)
            Me.columnPComiCobranza = New Global.System.Data.DataColumn("PComiCobranza", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPComiCobranza)
            Me.columnPPrimaPagar = New Global.System.Data.DataColumn("PPrimaPagar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPPrimaPagar)
            Me.columnPPorceComi = New Global.System.Data.DataColumn("PPorceComi", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPPorceComi)
            Me.columnPComision = New Global.System.Data.DataColumn("PComision", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPComision)
            Me.columnPIva = New Global.System.Data.DataColumn("PIva", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPIva)
            Me.columnPSubtotal = New Global.System.Data.DataColumn("PSubtotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPSubtotal)
            Me.columnPRetIva = New Global.System.Data.DataColumn("PRetIva", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRetIva)
            Me.columnPTotalCCF = New Global.System.Data.DataColumn("PTotalCCF", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPTotalCCF)
            Me.columnBanco = New Global.System.Data.DataColumn("Banco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBanco)
            Me.columnIdCliente = New Global.System.Data.DataColumn("IdCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCliente)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAvisoCobroRow() As AvisoCobroRow
            Return CType(Me.NewRow,AvisoCobroRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AvisoCobroRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AvisoCobroRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AvisoCobroRowChangedEvent) Is Nothing) Then
                RaiseEvent AvisoCobroRowChanged(Me, New AvisoCobroRowChangeEvent(CType(e.Row,AvisoCobroRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AvisoCobroRowChangingEvent) Is Nothing) Then
                RaiseEvent AvisoCobroRowChanging(Me, New AvisoCobroRowChangeEvent(CType(e.Row,AvisoCobroRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AvisoCobroRowDeletedEvent) Is Nothing) Then
                RaiseEvent AvisoCobroRowDeleted(Me, New AvisoCobroRowChangeEvent(CType(e.Row,AvisoCobroRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AvisoCobroRowDeletingEvent) Is Nothing) Then
                RaiseEvent AvisoCobroRowDeleting(Me, New AvisoCobroRowChangeEvent(CType(e.Row,AvisoCobroRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAvisoCobroRow(ByVal row As AvisoCobroRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRepPrimas = New dsRepPrimas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AvisoCobroDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ClientesDataTable
        Inherits Global.System.Data.TypedTableBase(Of ClientesRow)
        
        Private columnIdCliente As Global.System.Data.DataColumn
        
        Private columnNombreCliente As Global.System.Data.DataColumn
        
        Private columnDireccion As Global.System.Data.DataColumn
        
        Private columnCiudad As Global.System.Data.DataColumn
        
        Private columnEjecutivo As Global.System.Data.DataColumn
        
        Private columnTelefonoEjecutivo As Global.System.Data.DataColumn
        
        Private columnLog As Global.System.Data.DataColumn
        
        Private columnFechaCorte As Global.System.Data.DataColumn
        
        Private columnTelefono As Global.System.Data.DataColumn
        
        Private columnContacto As Global.System.Data.DataColumn
        
        Private columnTotalMora As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Clientes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CiudadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCiudad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EjecutivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEjecutivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoEjecutivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefonoEjecutivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLog
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaCorteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaCorte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContacto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalMoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalMora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClientesRow
            Get
                Return CType(Me.Rows(index),ClientesRow)
            End Get
        End Property
        
        Public Event ClientesRowChanging As ClientesRowChangeEventHandler
        
        Public Event ClientesRowChanged As ClientesRowChangeEventHandler
        
        Public Event ClientesRowDeleting As ClientesRowChangeEventHandler
        
        Public Event ClientesRowDeleted As ClientesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddClientesRow(ByVal row As ClientesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddClientesRow(ByVal IdCliente As String, ByVal NombreCliente As String, ByVal Direccion As String, ByVal Ciudad As String, ByVal Ejecutivo As String, ByVal TelefonoEjecutivo As String, ByVal Log As String, ByVal FechaCorte As String, ByVal Telefono As String, ByVal Contacto As String, ByVal TotalMora As Double) As ClientesRow
            Dim rowClientesRow As ClientesRow = CType(Me.NewRow,ClientesRow)
            Dim columnValuesArray() As Object = New Object() {IdCliente, NombreCliente, Direccion, Ciudad, Ejecutivo, TelefonoEjecutivo, Log, FechaCorte, Telefono, Contacto, TotalMora}
            rowClientesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowClientesRow)
            Return rowClientesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ClientesDataTable = CType(MyBase.Clone,ClientesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ClientesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdCliente = MyBase.Columns("IdCliente")
            Me.columnNombreCliente = MyBase.Columns("NombreCliente")
            Me.columnDireccion = MyBase.Columns("Direccion")
            Me.columnCiudad = MyBase.Columns("Ciudad")
            Me.columnEjecutivo = MyBase.Columns("Ejecutivo")
            Me.columnTelefonoEjecutivo = MyBase.Columns("TelefonoEjecutivo")
            Me.columnLog = MyBase.Columns("Log")
            Me.columnFechaCorte = MyBase.Columns("FechaCorte")
            Me.columnTelefono = MyBase.Columns("Telefono")
            Me.columnContacto = MyBase.Columns("Contacto")
            Me.columnTotalMora = MyBase.Columns("TotalMora")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdCliente = New Global.System.Data.DataColumn("IdCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCliente)
            Me.columnNombreCliente = New Global.System.Data.DataColumn("NombreCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCliente)
            Me.columnDireccion = New Global.System.Data.DataColumn("Direccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
            Me.columnCiudad = New Global.System.Data.DataColumn("Ciudad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCiudad)
            Me.columnEjecutivo = New Global.System.Data.DataColumn("Ejecutivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEjecutivo)
            Me.columnTelefonoEjecutivo = New Global.System.Data.DataColumn("TelefonoEjecutivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefonoEjecutivo)
            Me.columnLog = New Global.System.Data.DataColumn("Log", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLog)
            Me.columnFechaCorte = New Global.System.Data.DataColumn("FechaCorte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaCorte)
            Me.columnTelefono = New Global.System.Data.DataColumn("Telefono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono)
            Me.columnContacto = New Global.System.Data.DataColumn("Contacto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContacto)
            Me.columnTotalMora = New Global.System.Data.DataColumn("TotalMora", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalMora)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewClientesRow() As ClientesRow
            Return CType(Me.NewRow,ClientesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ClientesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ClientesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClientesRowChangedEvent) Is Nothing) Then
                RaiseEvent ClientesRowChanged(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClientesRowChangingEvent) Is Nothing) Then
                RaiseEvent ClientesRowChanging(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClientesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClientesRowDeleted(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClientesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClientesRowDeleting(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveClientesRow(ByVal row As ClientesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRepPrimas = New dsRepPrimas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ClientesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NotasCreditoDataTable
        Inherits Global.System.Data.TypedTableBase(Of NotasCreditoRow)
        
        Private columnIdNotaCredito As Global.System.Data.DataColumn
        
        Private columnNumeroFactura As Global.System.Data.DataColumn
        
        Private columnIdProducto As Global.System.Data.DataColumn
        
        Private columnIdPoliza As Global.System.Data.DataColumn
        
        Private columnIdRamo As Global.System.Data.DataColumn
        
        Private columnPrimaNetaNota As Global.System.Data.DataColumn
        
        Private columnGastosEmiNota As Global.System.Data.DataColumn
        
        Private columnGastosFinNota As Global.System.Data.DataColumn
        
        Private columnGastosBombNota As Global.System.Data.DataColumn
        
        Private columnGastosNota As Global.System.Data.DataColumn
        
        Private columnImpuestosNota As Global.System.Data.DataColumn
        
        Private columnTotalNota As Global.System.Data.DataColumn
        
        Private columnObservaciones As Global.System.Data.DataColumn
        
        Private columnFechaNotaCredito As Global.System.Data.DataColumn
        
        Private columnComisionNota As Global.System.Data.DataColumn
        
        Private columnPorcentajeComiFact As Global.System.Data.DataColumn
        
        Private columnIdTipoIngreso As Global.System.Data.DataColumn
        
        Private columnDescripcionReintegro As Global.System.Data.DataColumn
        
        Private columnIdCliente As Global.System.Data.DataColumn
        
        Private columnNombreCliente As Global.System.Data.DataColumn
        
        Private columnReferencia As Global.System.Data.DataColumn
        
        Private columnNotas As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NotasCredito"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdNotaCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdNotaCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdPolizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdPoliza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdRamoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdRamo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrimaNetaNotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrimaNetaNota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GastosEmiNotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGastosEmiNota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GastosFinNotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGastosFinNota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GastosBombNotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGastosBombNota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GastosNotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGastosNota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpuestosNotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpuestosNota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalNotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalNota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaNotaCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaNotaCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ComisionNotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComisionNota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeComiFactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentajeComiFact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdTipoIngresoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdTipoIngreso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionReintegroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionReintegro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NotasCreditoRow
            Get
                Return CType(Me.Rows(index),NotasCreditoRow)
            End Get
        End Property
        
        Public Event NotasCreditoRowChanging As NotasCreditoRowChangeEventHandler
        
        Public Event NotasCreditoRowChanged As NotasCreditoRowChangeEventHandler
        
        Public Event NotasCreditoRowDeleting As NotasCreditoRowChangeEventHandler
        
        Public Event NotasCreditoRowDeleted As NotasCreditoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNotasCreditoRow(ByVal row As NotasCreditoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNotasCreditoRow( _
                    ByVal IdNotaCredito As String,  _
                    ByVal NumeroFactura As Integer,  _
                    ByVal IdProducto As String,  _
                    ByVal IdPoliza As String,  _
                    ByVal IdRamo As String,  _
                    ByVal PrimaNetaNota As Decimal,  _
                    ByVal GastosEmiNota As Decimal,  _
                    ByVal GastosFinNota As Decimal,  _
                    ByVal GastosBombNota As Decimal,  _
                    ByVal GastosNota As Decimal,  _
                    ByVal ImpuestosNota As Decimal,  _
                    ByVal TotalNota As Decimal,  _
                    ByVal Observaciones As String,  _
                    ByVal FechaNotaCredito As Date,  _
                    ByVal ComisionNota As Decimal,  _
                    ByVal PorcentajeComiFact As Decimal,  _
                    ByVal IdTipoIngreso As String,  _
                    ByVal DescripcionReintegro As String,  _
                    ByVal IdCliente As String,  _
                    ByVal NombreCliente As String,  _
                    ByVal Referencia As String,  _
                    ByVal Notas As String) As NotasCreditoRow
            Dim rowNotasCreditoRow As NotasCreditoRow = CType(Me.NewRow,NotasCreditoRow)
            Dim columnValuesArray() As Object = New Object() {IdNotaCredito, NumeroFactura, IdProducto, IdPoliza, IdRamo, PrimaNetaNota, GastosEmiNota, GastosFinNota, GastosBombNota, GastosNota, ImpuestosNota, TotalNota, Observaciones, FechaNotaCredito, ComisionNota, PorcentajeComiFact, IdTipoIngreso, DescripcionReintegro, IdCliente, NombreCliente, Referencia, Notas}
            rowNotasCreditoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNotasCreditoRow)
            Return rowNotasCreditoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NotasCreditoDataTable = CType(MyBase.Clone,NotasCreditoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NotasCreditoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdNotaCredito = MyBase.Columns("IdNotaCredito")
            Me.columnNumeroFactura = MyBase.Columns("NumeroFactura")
            Me.columnIdProducto = MyBase.Columns("IdProducto")
            Me.columnIdPoliza = MyBase.Columns("IdPoliza")
            Me.columnIdRamo = MyBase.Columns("IdRamo")
            Me.columnPrimaNetaNota = MyBase.Columns("PrimaNetaNota")
            Me.columnGastosEmiNota = MyBase.Columns("GastosEmiNota")
            Me.columnGastosFinNota = MyBase.Columns("GastosFinNota")
            Me.columnGastosBombNota = MyBase.Columns("GastosBombNota")
            Me.columnGastosNota = MyBase.Columns("GastosNota")
            Me.columnImpuestosNota = MyBase.Columns("ImpuestosNota")
            Me.columnTotalNota = MyBase.Columns("TotalNota")
            Me.columnObservaciones = MyBase.Columns("Observaciones")
            Me.columnFechaNotaCredito = MyBase.Columns("FechaNotaCredito")
            Me.columnComisionNota = MyBase.Columns("ComisionNota")
            Me.columnPorcentajeComiFact = MyBase.Columns("PorcentajeComiFact")
            Me.columnIdTipoIngreso = MyBase.Columns("IdTipoIngreso")
            Me.columnDescripcionReintegro = MyBase.Columns("DescripcionReintegro")
            Me.columnIdCliente = MyBase.Columns("IdCliente")
            Me.columnNombreCliente = MyBase.Columns("NombreCliente")
            Me.columnReferencia = MyBase.Columns("Referencia")
            Me.columnNotas = MyBase.Columns("Notas")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdNotaCredito = New Global.System.Data.DataColumn("IdNotaCredito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdNotaCredito)
            Me.columnNumeroFactura = New Global.System.Data.DataColumn("NumeroFactura", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroFactura)
            Me.columnIdProducto = New Global.System.Data.DataColumn("IdProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdProducto)
            Me.columnIdPoliza = New Global.System.Data.DataColumn("IdPoliza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdPoliza)
            Me.columnIdRamo = New Global.System.Data.DataColumn("IdRamo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdRamo)
            Me.columnPrimaNetaNota = New Global.System.Data.DataColumn("PrimaNetaNota", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrimaNetaNota)
            Me.columnGastosEmiNota = New Global.System.Data.DataColumn("GastosEmiNota", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGastosEmiNota)
            Me.columnGastosFinNota = New Global.System.Data.DataColumn("GastosFinNota", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGastosFinNota)
            Me.columnGastosBombNota = New Global.System.Data.DataColumn("GastosBombNota", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGastosBombNota)
            Me.columnGastosNota = New Global.System.Data.DataColumn("GastosNota", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGastosNota)
            Me.columnImpuestosNota = New Global.System.Data.DataColumn("ImpuestosNota", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpuestosNota)
            Me.columnTotalNota = New Global.System.Data.DataColumn("TotalNota", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalNota)
            Me.columnObservaciones = New Global.System.Data.DataColumn("Observaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservaciones)
            Me.columnFechaNotaCredito = New Global.System.Data.DataColumn("FechaNotaCredito", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaNotaCredito)
            Me.columnComisionNota = New Global.System.Data.DataColumn("ComisionNota", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComisionNota)
            Me.columnPorcentajeComiFact = New Global.System.Data.DataColumn("PorcentajeComiFact", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeComiFact)
            Me.columnIdTipoIngreso = New Global.System.Data.DataColumn("IdTipoIngreso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdTipoIngreso)
            Me.columnDescripcionReintegro = New Global.System.Data.DataColumn("DescripcionReintegro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionReintegro)
            Me.columnIdCliente = New Global.System.Data.DataColumn("IdCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCliente)
            Me.columnNombreCliente = New Global.System.Data.DataColumn("NombreCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCliente)
            Me.columnReferencia = New Global.System.Data.DataColumn("Referencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferencia)
            Me.columnNotas = New Global.System.Data.DataColumn("Notas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotas)
            Me.columnIdNotaCredito.AllowDBNull = false
            Me.columnIdNotaCredito.MaxLength = 25
            Me.columnNumeroFactura.AllowDBNull = false
            Me.columnIdProducto.AllowDBNull = false
            Me.columnIdProducto.MaxLength = 25
            Me.columnIdPoliza.AllowDBNull = false
            Me.columnIdPoliza.MaxLength = 250
            Me.columnIdRamo.AllowDBNull = false
            Me.columnIdRamo.MaxLength = 25
            Me.columnObservaciones.MaxLength = 250
            Me.columnIdTipoIngreso.MaxLength = 25
            Me.columnDescripcionReintegro.MaxLength = 250
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNotasCreditoRow() As NotasCreditoRow
            Return CType(Me.NewRow,NotasCreditoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NotasCreditoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NotasCreditoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NotasCreditoRowChangedEvent) Is Nothing) Then
                RaiseEvent NotasCreditoRowChanged(Me, New NotasCreditoRowChangeEvent(CType(e.Row,NotasCreditoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NotasCreditoRowChangingEvent) Is Nothing) Then
                RaiseEvent NotasCreditoRowChanging(Me, New NotasCreditoRowChangeEvent(CType(e.Row,NotasCreditoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NotasCreditoRowDeletedEvent) Is Nothing) Then
                RaiseEvent NotasCreditoRowDeleted(Me, New NotasCreditoRowChangeEvent(CType(e.Row,NotasCreditoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NotasCreditoRowDeletingEvent) Is Nothing) Then
                RaiseEvent NotasCreditoRowDeleting(Me, New NotasCreditoRowChangeEvent(CType(e.Row,NotasCreditoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNotasCreditoRow(ByVal row As NotasCreditoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRepPrimas = New dsRepPrimas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NotasCreditoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DepositosDataTable
        Inherits Global.System.Data.TypedTableBase(Of DepositosRow)
        
        Private columnIdCliente As Global.System.Data.DataColumn
        
        Private columnAseguradora As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnFechaMovimiento As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnValor As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Depositos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AseguradoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAseguradora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaMovimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaMovimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DepositosRow
            Get
                Return CType(Me.Rows(index),DepositosRow)
            End Get
        End Property
        
        Public Event DepositosRowChanging As DepositosRowChangeEventHandler
        
        Public Event DepositosRowChanged As DepositosRowChangeEventHandler
        
        Public Event DepositosRowDeleting As DepositosRowChangeEventHandler
        
        Public Event DepositosRowDeleted As DepositosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDepositosRow(ByVal row As DepositosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDepositosRow(ByVal IdCliente As String, ByVal Aseguradora As String, ByVal Tipo As String, ByVal FechaMovimiento As Date, ByVal Descripcion As String, ByVal Valor As Double) As DepositosRow
            Dim rowDepositosRow As DepositosRow = CType(Me.NewRow,DepositosRow)
            Dim columnValuesArray() As Object = New Object() {IdCliente, Aseguradora, Tipo, FechaMovimiento, Descripcion, Valor}
            rowDepositosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDepositosRow)
            Return rowDepositosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DepositosDataTable = CType(MyBase.Clone,DepositosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DepositosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdCliente = MyBase.Columns("IdCliente")
            Me.columnAseguradora = MyBase.Columns("Aseguradora")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnFechaMovimiento = MyBase.Columns("FechaMovimiento")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnValor = MyBase.Columns("Valor")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdCliente = New Global.System.Data.DataColumn("IdCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCliente)
            Me.columnAseguradora = New Global.System.Data.DataColumn("Aseguradora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAseguradora)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnFechaMovimiento = New Global.System.Data.DataColumn("FechaMovimiento", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaMovimiento)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnValor = New Global.System.Data.DataColumn("Valor", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValor)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDepositosRow() As DepositosRow
            Return CType(Me.NewRow,DepositosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DepositosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DepositosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DepositosRowChangedEvent) Is Nothing) Then
                RaiseEvent DepositosRowChanged(Me, New DepositosRowChangeEvent(CType(e.Row,DepositosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DepositosRowChangingEvent) Is Nothing) Then
                RaiseEvent DepositosRowChanging(Me, New DepositosRowChangeEvent(CType(e.Row,DepositosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DepositosRowDeletedEvent) Is Nothing) Then
                RaiseEvent DepositosRowDeleted(Me, New DepositosRowChangeEvent(CType(e.Row,DepositosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DepositosRowDeletingEvent) Is Nothing) Then
                RaiseEvent DepositosRowDeleting(Me, New DepositosRowChangeEvent(CType(e.Row,DepositosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDepositosRow(ByVal row As DepositosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRepPrimas = New dsRepPrimas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DepositosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DescuentoDataTable
        Inherits Global.System.Data.TypedTableBase(Of DescuentoRow)
        
        Private columnIdAvisoCobro As Global.System.Data.DataColumn
        
        Private columnIdDescuento As Global.System.Data.DataColumn
        
        Private columnDescripcionDescuento As Global.System.Data.DataColumn
        
        Private columnPorceDescuento As Global.System.Data.DataColumn
        
        Private columnValorDescuento As Global.System.Data.DataColumn
        
        Private columnPorceImp As Global.System.Data.DataColumn
        
        Private columnPorceRet As Global.System.Data.DataColumn
        
        Private columnValorImp As Global.System.Data.DataColumn
        
        Private columnValorRet As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Descuento"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdAvisoCobroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdAvisoCobro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdDescuentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdDescuento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionDescuentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionDescuento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorceDescuentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorceDescuento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValorDescuentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValorDescuento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorceImpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorceImp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorceRetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorceRet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValorImpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValorImp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValorRetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValorRet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DescuentoRow
            Get
                Return CType(Me.Rows(index),DescuentoRow)
            End Get
        End Property
        
        Public Event DescuentoRowChanging As DescuentoRowChangeEventHandler
        
        Public Event DescuentoRowChanged As DescuentoRowChangeEventHandler
        
        Public Event DescuentoRowDeleting As DescuentoRowChangeEventHandler
        
        Public Event DescuentoRowDeleted As DescuentoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDescuentoRow(ByVal row As DescuentoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDescuentoRow(ByVal IdAvisoCobro As String, ByVal IdDescuento As Integer, ByVal DescripcionDescuento As String, ByVal PorceDescuento As Double, ByVal ValorDescuento As Double, ByVal PorceImp As Double, ByVal PorceRet As Double, ByVal ValorImp As Double, ByVal ValorRet As Double) As DescuentoRow
            Dim rowDescuentoRow As DescuentoRow = CType(Me.NewRow,DescuentoRow)
            Dim columnValuesArray() As Object = New Object() {IdAvisoCobro, IdDescuento, DescripcionDescuento, PorceDescuento, ValorDescuento, PorceImp, PorceRet, ValorImp, ValorRet}
            rowDescuentoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDescuentoRow)
            Return rowDescuentoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DescuentoDataTable = CType(MyBase.Clone,DescuentoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DescuentoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdAvisoCobro = MyBase.Columns("IdAvisoCobro")
            Me.columnIdDescuento = MyBase.Columns("IdDescuento")
            Me.columnDescripcionDescuento = MyBase.Columns("DescripcionDescuento")
            Me.columnPorceDescuento = MyBase.Columns("PorceDescuento")
            Me.columnValorDescuento = MyBase.Columns("ValorDescuento")
            Me.columnPorceImp = MyBase.Columns("PorceImp")
            Me.columnPorceRet = MyBase.Columns("PorceRet")
            Me.columnValorImp = MyBase.Columns("ValorImp")
            Me.columnValorRet = MyBase.Columns("ValorRet")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdAvisoCobro = New Global.System.Data.DataColumn("IdAvisoCobro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdAvisoCobro)
            Me.columnIdDescuento = New Global.System.Data.DataColumn("IdDescuento", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdDescuento)
            Me.columnDescripcionDescuento = New Global.System.Data.DataColumn("DescripcionDescuento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionDescuento)
            Me.columnPorceDescuento = New Global.System.Data.DataColumn("PorceDescuento", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorceDescuento)
            Me.columnValorDescuento = New Global.System.Data.DataColumn("ValorDescuento", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValorDescuento)
            Me.columnPorceImp = New Global.System.Data.DataColumn("PorceImp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorceImp)
            Me.columnPorceRet = New Global.System.Data.DataColumn("PorceRet", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorceRet)
            Me.columnValorImp = New Global.System.Data.DataColumn("ValorImp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValorImp)
            Me.columnValorRet = New Global.System.Data.DataColumn("ValorRet", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValorRet)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDescuentoRow() As DescuentoRow
            Return CType(Me.NewRow,DescuentoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DescuentoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DescuentoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DescuentoRowChangedEvent) Is Nothing) Then
                RaiseEvent DescuentoRowChanged(Me, New DescuentoRowChangeEvent(CType(e.Row,DescuentoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DescuentoRowChangingEvent) Is Nothing) Then
                RaiseEvent DescuentoRowChanging(Me, New DescuentoRowChangeEvent(CType(e.Row,DescuentoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DescuentoRowDeletedEvent) Is Nothing) Then
                RaiseEvent DescuentoRowDeleted(Me, New DescuentoRowChangeEvent(CType(e.Row,DescuentoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DescuentoRowDeletingEvent) Is Nothing) Then
                RaiseEvent DescuentoRowDeleting(Me, New DescuentoRowChangeEvent(CType(e.Row,DescuentoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDescuentoRow(ByVal row As DescuentoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRepPrimas = New dsRepPrimas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DescuentoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PrimasRow
        Inherits Global.System.Data.DataRow
        
        Private tablePrimas As PrimasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePrimas = CType(Me.Table,PrimasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroFactura() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.NumeroFacturaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumeroFactura' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.NumeroFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Producto() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.ProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Producto' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.ProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ramo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.RamoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ramo' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.RamoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoSeguro() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.TipoSeguroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TipoSeguro' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.TipoSeguroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Aseguradora() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.AseguradoraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Aseguradora' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.AseguradoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Poliza() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.PolizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Poliza' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.PolizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoFactura() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.TipoFacturaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TipoFactura' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.TipoFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.NombreClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NombreCliente' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.NombreClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaPago() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.FechaPagoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaPago' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.FechaPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumCuota() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.NumCuotaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumCuota' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.NumCuotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalCuotas() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.TotalCuotasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalCuotas' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.TotalCuotasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dias() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.DiasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dias' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.DiasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrimaNeta() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.PrimaNetaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrimaNeta' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.PrimaNetaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gastos() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.GastosColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gastos' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.GastosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Impuestos() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.ImpuestosColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Impuestos' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.ImpuestosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.TotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comision() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.ComisionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comision' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.ComisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdAvisoCobro() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.IdAvisoCobroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdAvisoCobro' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.IdAvisoCobroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GastosEmision() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.GastosEmisionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GastosEmision' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.GastosEmisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GastosFracciona() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.GastosFraccionaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GastosFracciona' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.GastosFraccionaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GastosBomberos() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.GastosBomberosColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GastosBomberos' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.GastosBomberosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroCuota() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.NumeroCuotaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumeroCuota' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.NumeroCuotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.IdClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCliente' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.IdClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Referencia() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.ReferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Referencia' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.ReferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocumentoFiscal() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.DocumentoFiscalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocumentoFiscal' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.DocumentoFiscalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FormaPago() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.FormaPagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FormaPago' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.FormaPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PagoTardio() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.PagoTardioColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PagoTardio' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.PagoTardioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Usuario() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.UsuarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Usuario' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.UsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Motivo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.MotivoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Motivo' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.MotivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nota() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.NotaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nota' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.NotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.DireccionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Direccion' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.DireccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cuota() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.CuotaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cuota' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.CuotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocFiscalEnv() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.DocFiscalEnvColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocFiscalEnv' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.DocFiscalEnvColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReciboCaja() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.ReciboCajaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReciboCaja' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.ReciboCajaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gestion() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.GestionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gestion' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.GestionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObservacionRecibo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.ObservacionReciboColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObservacionRecibo' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.ObservacionReciboColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaVence() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.FechaVenceColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaVence' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.FechaVenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiasVence() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.DiasVenceColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiasVence' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.DiasVenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vendedor() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.VendedorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vendedor' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.VendedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreUsuarioGraba() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.NombreUsuarioGrabaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NombreUsuarioGraba' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.NombreUsuarioGrabaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CargoUsuarioGraba() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.CargoUsuarioGrabaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CargoUsuarioGraba' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.CargoUsuarioGrabaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RetIva() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.RetIvaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RetIva' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.RetIvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrimaExcenta() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.PrimaExcentaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrimaExcenta' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.PrimaExcentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaAplicaPago() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimas.FechaAplicaPagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaAplicaPago' in table 'Primas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimas.FechaAplicaPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroFacturaNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.NumeroFacturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroFacturaNull()
            Me(Me.tablePrimas.NumeroFacturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductoNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.ProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductoNull()
            Me(Me.tablePrimas.ProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRamoNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.RamoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRamoNull()
            Me(Me.tablePrimas.RamoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoSeguroNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.TipoSeguroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoSeguroNull()
            Me(Me.tablePrimas.TipoSeguroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAseguradoraNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.AseguradoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAseguradoraNull()
            Me(Me.tablePrimas.AseguradoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPolizaNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.PolizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPolizaNull()
            Me(Me.tablePrimas.PolizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoFacturaNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.TipoFacturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoFacturaNull()
            Me(Me.tablePrimas.TipoFacturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreClienteNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.NombreClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreClienteNull()
            Me(Me.tablePrimas.NombreClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaPagoNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.FechaPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaPagoNull()
            Me(Me.tablePrimas.FechaPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumCuotaNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.NumCuotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumCuotaNull()
            Me(Me.tablePrimas.NumCuotaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalCuotasNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.TotalCuotasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalCuotasNull()
            Me(Me.tablePrimas.TotalCuotasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiasNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.DiasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiasNull()
            Me(Me.tablePrimas.DiasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrimaNetaNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.PrimaNetaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrimaNetaNull()
            Me(Me.tablePrimas.PrimaNetaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGastosNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.GastosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGastosNull()
            Me(Me.tablePrimas.GastosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpuestosNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.ImpuestosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpuestosNull()
            Me(Me.tablePrimas.ImpuestosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tablePrimas.TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsComisionNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.ComisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetComisionNull()
            Me(Me.tablePrimas.ComisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdAvisoCobroNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.IdAvisoCobroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdAvisoCobroNull()
            Me(Me.tablePrimas.IdAvisoCobroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGastosEmisionNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.GastosEmisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGastosEmisionNull()
            Me(Me.tablePrimas.GastosEmisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGastosFraccionaNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.GastosFraccionaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGastosFraccionaNull()
            Me(Me.tablePrimas.GastosFraccionaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGastosBomberosNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.GastosBomberosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGastosBomberosNull()
            Me(Me.tablePrimas.GastosBomberosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroCuotaNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.NumeroCuotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroCuotaNull()
            Me(Me.tablePrimas.NumeroCuotaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdClienteNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.IdClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdClienteNull()
            Me(Me.tablePrimas.IdClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReferenciaNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.ReferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReferenciaNull()
            Me(Me.tablePrimas.ReferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocumentoFiscalNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.DocumentoFiscalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocumentoFiscalNull()
            Me(Me.tablePrimas.DocumentoFiscalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFormaPagoNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.FormaPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFormaPagoNull()
            Me(Me.tablePrimas.FormaPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPagoTardioNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.PagoTardioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPagoTardioNull()
            Me(Me.tablePrimas.PagoTardioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsuarioNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.UsuarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsuarioNull()
            Me(Me.tablePrimas.UsuarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMotivoNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.MotivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMotivoNull()
            Me(Me.tablePrimas.MotivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotaNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.NotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotaNull()
            Me(Me.tablePrimas.NotaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.DireccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionNull()
            Me(Me.tablePrimas.DireccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCuotaNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.CuotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCuotaNull()
            Me(Me.tablePrimas.CuotaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocFiscalEnvNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.DocFiscalEnvColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocFiscalEnvNull()
            Me(Me.tablePrimas.DocFiscalEnvColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReciboCajaNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.ReciboCajaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReciboCajaNull()
            Me(Me.tablePrimas.ReciboCajaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGestionNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.GestionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGestionNull()
            Me(Me.tablePrimas.GestionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionReciboNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.ObservacionReciboColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionReciboNull()
            Me(Me.tablePrimas.ObservacionReciboColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaVenceNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.FechaVenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaVenceNull()
            Me(Me.tablePrimas.FechaVenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiasVenceNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.DiasVenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiasVenceNull()
            Me(Me.tablePrimas.DiasVenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendedorNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.VendedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendedorNull()
            Me(Me.tablePrimas.VendedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreUsuarioGrabaNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.NombreUsuarioGrabaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreUsuarioGrabaNull()
            Me(Me.tablePrimas.NombreUsuarioGrabaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCargoUsuarioGrabaNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.CargoUsuarioGrabaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCargoUsuarioGrabaNull()
            Me(Me.tablePrimas.CargoUsuarioGrabaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRetIvaNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.RetIvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRetIvaNull()
            Me(Me.tablePrimas.RetIvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrimaExcentaNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.PrimaExcentaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrimaExcentaNull()
            Me(Me.tablePrimas.PrimaExcentaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaAplicaPagoNull() As Boolean
            Return Me.IsNull(Me.tablePrimas.FechaAplicaPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaAplicaPagoNull()
            Me(Me.tablePrimas.FechaAplicaPagoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ImagenesRow
        Inherits Global.System.Data.DataRow
        
        Private tableImagenes As ImagenesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableImagenes = CType(Me.Table,ImagenesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Logo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableImagenes.LogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Logo' in table 'Imagenes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImagenes.LogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sello() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableImagenes.SelloColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sello' in table 'Imagenes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImagenes.SelloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Logo2() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableImagenes.Logo2Column),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Logo2' in table 'Imagenes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImagenes.Logo2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogoNull() As Boolean
            Return Me.IsNull(Me.tableImagenes.LogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogoNull()
            Me(Me.tableImagenes.LogoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSelloNull() As Boolean
            Return Me.IsNull(Me.tableImagenes.SelloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSelloNull()
            Me(Me.tableImagenes.SelloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogo2Null() As Boolean
            Return Me.IsNull(Me.tableImagenes.Logo2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogo2Null()
            Me(Me.tableImagenes.Logo2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AvisoCobroRow
        Inherits Global.System.Data.DataRow
        
        Private tableAvisoCobro As AvisoCobroDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAvisoCobro = CType(Me.Table,AvisoCobroDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdAvisoCobro() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.IdAvisoCobroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdAvisoCobro' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.IdAvisoCobroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.NombreClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NombreCliente' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.NombreClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.NITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NIT' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.NITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.DireccionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Direccion' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.DireccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ciudad() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.CiudadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ciudad' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.CiudadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.TelefonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telefono' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.TelefonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Contacto() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.ContactoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contacto' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.ContactoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Aseguradora() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.AseguradoraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Aseguradora' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.AseguradoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Producto() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.ProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Producto' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.ProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Poliza() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.PolizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Poliza' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.PolizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VigenciaDesde() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.VigenciaDesdeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VigenciaDesde' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.VigenciaDesdeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VigenciaHasta() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.VigenciaHastaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VigenciaHasta' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.VigenciaHastaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Referencia() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.ReferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Referencia' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.ReferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreFactura() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.NombreFacturaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NombreFactura' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.NombreFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tarjeta() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.TarjetaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tarjeta' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.TarjetaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreTarjeta() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.NombreTarjetaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NombreTarjeta' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.NombreTarjetaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VenceTarjeta() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.VenceTarjetaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VenceTarjeta' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.VenceTarjetaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Anexo() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.AnexoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Anexo' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.AnexoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ejecutivo() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.EjecutivoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ejecutivo' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.EjecutivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Log() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.LogColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Log' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.LogColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observaciones() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.ObservacionesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observaciones' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.ObservacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACInterno() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.ACInternoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACInterno' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.ACInternoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaGrabacion() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.FechaGrabacionColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaGrabacion' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.FechaGrabacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaNotificacion() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.FechaNotificacionColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaNotificacion' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.FechaNotificacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContactoACTardio() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.ContactoACTardioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContactoACTardio' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.ContactoACTardioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CargoACTardio() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.CargoACTardioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CargoACTardio' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.CargoACTardioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EjecutivoPoliza() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.EjecutivoPolizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EjecutivoPoliza' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.EjecutivoPolizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EjecutivoCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.EjecutivoClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EjecutivoCliente' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.EjecutivoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreUsuarioGraba() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.NombreUsuarioGrabaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NombreUsuarioGraba' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.NombreUsuarioGrabaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CargoUsuarioGraba() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.CargoUsuarioGrabaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CargoUsuarioGraba' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.CargoUsuarioGrabaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdImpresion() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.IdImpresionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdImpresion' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.IdImpresionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalDescuento() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.TotalDescuentoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalDescuento' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.TotalDescuentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrimaNeta() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.PrimaNetaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrimaNeta' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.PrimaNetaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PSumaAsegurada() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.PSumaAseguradaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PSumaAsegurada' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.PSumaAseguradaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PTarifa() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.PTarifaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PTarifa' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.PTarifaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PPrima() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.PPrimaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PPrima' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.PPrimaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PPorceRen() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.PPorceRenColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PPorceRen' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.PPorceRenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PDescuento() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.PDescuentoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PDescuento' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.PDescuentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PPrimaNeta() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.PPrimaNetaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PPrimaNeta' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.PPrimaNetaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PComiCobranza() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.PComiCobranzaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PComiCobranza' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.PComiCobranzaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PPrimaPagar() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.PPrimaPagarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PPrimaPagar' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.PPrimaPagarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PPorceComi() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.PPorceComiColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PPorceComi' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.PPorceComiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PComision() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.PComisionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PComision' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.PComisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PIva() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.PIvaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PIva' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.PIvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PSubtotal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.PSubtotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PSubtotal' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.PSubtotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRetIva() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.PRetIvaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRetIva' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.PRetIvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PTotalCCF() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.PTotalCCFColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PTotalCCF' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.PTotalCCFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Banco() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.BancoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Banco' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.BancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableAvisoCobro.IdClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCliente' in table 'AvisoCobro' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAvisoCobro.IdClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdAvisoCobroNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.IdAvisoCobroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdAvisoCobroNull()
            Me(Me.tableAvisoCobro.IdAvisoCobroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreClienteNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.NombreClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreClienteNull()
            Me(Me.tableAvisoCobro.NombreClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNITNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.NITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNITNull()
            Me(Me.tableAvisoCobro.NITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.DireccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionNull()
            Me(Me.tableAvisoCobro.DireccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCiudadNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.CiudadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCiudadNull()
            Me(Me.tableAvisoCobro.CiudadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.TelefonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoNull()
            Me(Me.tableAvisoCobro.TelefonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContactoNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.ContactoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContactoNull()
            Me(Me.tableAvisoCobro.ContactoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAseguradoraNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.AseguradoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAseguradoraNull()
            Me(Me.tableAvisoCobro.AseguradoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductoNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.ProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductoNull()
            Me(Me.tableAvisoCobro.ProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPolizaNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.PolizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPolizaNull()
            Me(Me.tableAvisoCobro.PolizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVigenciaDesdeNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.VigenciaDesdeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVigenciaDesdeNull()
            Me(Me.tableAvisoCobro.VigenciaDesdeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVigenciaHastaNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.VigenciaHastaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVigenciaHastaNull()
            Me(Me.tableAvisoCobro.VigenciaHastaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReferenciaNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.ReferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReferenciaNull()
            Me(Me.tableAvisoCobro.ReferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreFacturaNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.NombreFacturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreFacturaNull()
            Me(Me.tableAvisoCobro.NombreFacturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTarjetaNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.TarjetaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTarjetaNull()
            Me(Me.tableAvisoCobro.TarjetaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreTarjetaNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.NombreTarjetaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreTarjetaNull()
            Me(Me.tableAvisoCobro.NombreTarjetaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVenceTarjetaNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.VenceTarjetaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVenceTarjetaNull()
            Me(Me.tableAvisoCobro.VenceTarjetaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnexoNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.AnexoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnexoNull()
            Me(Me.tableAvisoCobro.AnexoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEjecutivoNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.EjecutivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEjecutivoNull()
            Me(Me.tableAvisoCobro.EjecutivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.LogColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogNull()
            Me(Me.tableAvisoCobro.LogColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionesNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.ObservacionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionesNull()
            Me(Me.tableAvisoCobro.ObservacionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACInternoNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.ACInternoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACInternoNull()
            Me(Me.tableAvisoCobro.ACInternoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaGrabacionNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.FechaGrabacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaGrabacionNull()
            Me(Me.tableAvisoCobro.FechaGrabacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNotificacionNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.FechaNotificacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNotificacionNull()
            Me(Me.tableAvisoCobro.FechaNotificacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContactoACTardioNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.ContactoACTardioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContactoACTardioNull()
            Me(Me.tableAvisoCobro.ContactoACTardioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCargoACTardioNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.CargoACTardioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCargoACTardioNull()
            Me(Me.tableAvisoCobro.CargoACTardioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEjecutivoPolizaNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.EjecutivoPolizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEjecutivoPolizaNull()
            Me(Me.tableAvisoCobro.EjecutivoPolizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEjecutivoClienteNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.EjecutivoClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEjecutivoClienteNull()
            Me(Me.tableAvisoCobro.EjecutivoClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreUsuarioGrabaNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.NombreUsuarioGrabaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreUsuarioGrabaNull()
            Me(Me.tableAvisoCobro.NombreUsuarioGrabaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCargoUsuarioGrabaNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.CargoUsuarioGrabaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCargoUsuarioGrabaNull()
            Me(Me.tableAvisoCobro.CargoUsuarioGrabaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdImpresionNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.IdImpresionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdImpresionNull()
            Me(Me.tableAvisoCobro.IdImpresionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalDescuentoNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.TotalDescuentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalDescuentoNull()
            Me(Me.tableAvisoCobro.TotalDescuentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrimaNetaNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.PrimaNetaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrimaNetaNull()
            Me(Me.tableAvisoCobro.PrimaNetaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPSumaAseguradaNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.PSumaAseguradaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPSumaAseguradaNull()
            Me(Me.tableAvisoCobro.PSumaAseguradaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPTarifaNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.PTarifaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPTarifaNull()
            Me(Me.tableAvisoCobro.PTarifaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPPrimaNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.PPrimaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPPrimaNull()
            Me(Me.tableAvisoCobro.PPrimaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPPorceRenNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.PPorceRenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPPorceRenNull()
            Me(Me.tableAvisoCobro.PPorceRenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPDescuentoNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.PDescuentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPDescuentoNull()
            Me(Me.tableAvisoCobro.PDescuentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPPrimaNetaNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.PPrimaNetaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPPrimaNetaNull()
            Me(Me.tableAvisoCobro.PPrimaNetaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPComiCobranzaNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.PComiCobranzaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPComiCobranzaNull()
            Me(Me.tableAvisoCobro.PComiCobranzaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPPrimaPagarNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.PPrimaPagarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPPrimaPagarNull()
            Me(Me.tableAvisoCobro.PPrimaPagarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPPorceComiNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.PPorceComiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPPorceComiNull()
            Me(Me.tableAvisoCobro.PPorceComiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPComisionNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.PComisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPComisionNull()
            Me(Me.tableAvisoCobro.PComisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPIvaNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.PIvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPIvaNull()
            Me(Me.tableAvisoCobro.PIvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPSubtotalNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.PSubtotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPSubtotalNull()
            Me(Me.tableAvisoCobro.PSubtotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRetIvaNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.PRetIvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRetIvaNull()
            Me(Me.tableAvisoCobro.PRetIvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPTotalCCFNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.PTotalCCFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPTotalCCFNull()
            Me(Me.tableAvisoCobro.PTotalCCFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBancoNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.BancoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBancoNull()
            Me(Me.tableAvisoCobro.BancoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdClienteNull() As Boolean
            Return Me.IsNull(Me.tableAvisoCobro.IdClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdClienteNull()
            Me(Me.tableAvisoCobro.IdClienteColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ClientesRow
        Inherits Global.System.Data.DataRow
        
        Private tableClientes As ClientesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableClientes = CType(Me.Table,ClientesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.IdClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCliente' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.IdClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.NombreClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NombreCliente' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.NombreClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.DireccionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Direccion' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.DireccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ciudad() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.CiudadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ciudad' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.CiudadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ejecutivo() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.EjecutivoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ejecutivo' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.EjecutivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelefonoEjecutivo() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.TelefonoEjecutivoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TelefonoEjecutivo' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.TelefonoEjecutivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Log() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.LogColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Log' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.LogColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaCorte() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.FechaCorteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaCorte' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.FechaCorteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.TelefonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telefono' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.TelefonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Contacto() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.ContactoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contacto' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.ContactoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalMora() As Double
            Get
                Try 
                    Return CType(Me(Me.tableClientes.TotalMoraColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalMora' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.TotalMoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdClienteNull() As Boolean
            Return Me.IsNull(Me.tableClientes.IdClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdClienteNull()
            Me(Me.tableClientes.IdClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreClienteNull() As Boolean
            Return Me.IsNull(Me.tableClientes.NombreClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreClienteNull()
            Me(Me.tableClientes.NombreClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionNull() As Boolean
            Return Me.IsNull(Me.tableClientes.DireccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionNull()
            Me(Me.tableClientes.DireccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCiudadNull() As Boolean
            Return Me.IsNull(Me.tableClientes.CiudadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCiudadNull()
            Me(Me.tableClientes.CiudadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEjecutivoNull() As Boolean
            Return Me.IsNull(Me.tableClientes.EjecutivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEjecutivoNull()
            Me(Me.tableClientes.EjecutivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoEjecutivoNull() As Boolean
            Return Me.IsNull(Me.tableClientes.TelefonoEjecutivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoEjecutivoNull()
            Me(Me.tableClientes.TelefonoEjecutivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogNull() As Boolean
            Return Me.IsNull(Me.tableClientes.LogColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogNull()
            Me(Me.tableClientes.LogColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaCorteNull() As Boolean
            Return Me.IsNull(Me.tableClientes.FechaCorteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaCorteNull()
            Me(Me.tableClientes.FechaCorteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoNull() As Boolean
            Return Me.IsNull(Me.tableClientes.TelefonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoNull()
            Me(Me.tableClientes.TelefonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContactoNull() As Boolean
            Return Me.IsNull(Me.tableClientes.ContactoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContactoNull()
            Me(Me.tableClientes.ContactoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalMoraNull() As Boolean
            Return Me.IsNull(Me.tableClientes.TotalMoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalMoraNull()
            Me(Me.tableClientes.TotalMoraColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NotasCreditoRow
        Inherits Global.System.Data.DataRow
        
        Private tableNotasCredito As NotasCreditoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNotasCredito = CType(Me.Table,NotasCreditoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdNotaCredito() As String
            Get
                Return CType(Me(Me.tableNotasCredito.IdNotaCreditoColumn),String)
            End Get
            Set
                Me(Me.tableNotasCredito.IdNotaCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroFactura() As Integer
            Get
                Return CType(Me(Me.tableNotasCredito.NumeroFacturaColumn),Integer)
            End Get
            Set
                Me(Me.tableNotasCredito.NumeroFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdProducto() As String
            Get
                Return CType(Me(Me.tableNotasCredito.IdProductoColumn),String)
            End Get
            Set
                Me(Me.tableNotasCredito.IdProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdPoliza() As String
            Get
                Return CType(Me(Me.tableNotasCredito.IdPolizaColumn),String)
            End Get
            Set
                Me(Me.tableNotasCredito.IdPolizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdRamo() As String
            Get
                Return CType(Me(Me.tableNotasCredito.IdRamoColumn),String)
            End Get
            Set
                Me(Me.tableNotasCredito.IdRamoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrimaNetaNota() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNotasCredito.PrimaNetaNotaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrimaNetaNota' in table 'NotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotasCredito.PrimaNetaNotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GastosEmiNota() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNotasCredito.GastosEmiNotaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GastosEmiNota' in table 'NotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotasCredito.GastosEmiNotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GastosFinNota() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNotasCredito.GastosFinNotaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GastosFinNota' in table 'NotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotasCredito.GastosFinNotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GastosBombNota() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNotasCredito.GastosBombNotaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GastosBombNota' in table 'NotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotasCredito.GastosBombNotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GastosNota() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNotasCredito.GastosNotaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GastosNota' in table 'NotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotasCredito.GastosNotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpuestosNota() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNotasCredito.ImpuestosNotaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImpuestosNota' in table 'NotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotasCredito.ImpuestosNotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalNota() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNotasCredito.TotalNotaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalNota' in table 'NotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotasCredito.TotalNotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observaciones() As String
            Get
                Try 
                    Return CType(Me(Me.tableNotasCredito.ObservacionesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observaciones' in table 'NotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotasCredito.ObservacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaNotaCredito() As Date
            Get
                Try 
                    Return CType(Me(Me.tableNotasCredito.FechaNotaCreditoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaNotaCredito' in table 'NotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotasCredito.FechaNotaCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ComisionNota() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNotasCredito.ComisionNotaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ComisionNota' in table 'NotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotasCredito.ComisionNotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeComiFact() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNotasCredito.PorcentajeComiFactColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorcentajeComiFact' in table 'NotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotasCredito.PorcentajeComiFactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdTipoIngreso() As String
            Get
                Try 
                    Return CType(Me(Me.tableNotasCredito.IdTipoIngresoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdTipoIngreso' in table 'NotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotasCredito.IdTipoIngresoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionReintegro() As String
            Get
                Try 
                    Return CType(Me(Me.tableNotasCredito.DescripcionReintegroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DescripcionReintegro' in table 'NotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotasCredito.DescripcionReintegroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableNotasCredito.IdClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCliente' in table 'NotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotasCredito.IdClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableNotasCredito.NombreClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NombreCliente' in table 'NotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotasCredito.NombreClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Referencia() As String
            Get
                Try 
                    Return CType(Me(Me.tableNotasCredito.ReferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Referencia' in table 'NotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotasCredito.ReferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Notas() As String
            Get
                Try 
                    Return CType(Me(Me.tableNotasCredito.NotasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Notas' in table 'NotasCredito' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotasCredito.NotasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrimaNetaNotaNull() As Boolean
            Return Me.IsNull(Me.tableNotasCredito.PrimaNetaNotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrimaNetaNotaNull()
            Me(Me.tableNotasCredito.PrimaNetaNotaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGastosEmiNotaNull() As Boolean
            Return Me.IsNull(Me.tableNotasCredito.GastosEmiNotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGastosEmiNotaNull()
            Me(Me.tableNotasCredito.GastosEmiNotaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGastosFinNotaNull() As Boolean
            Return Me.IsNull(Me.tableNotasCredito.GastosFinNotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGastosFinNotaNull()
            Me(Me.tableNotasCredito.GastosFinNotaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGastosBombNotaNull() As Boolean
            Return Me.IsNull(Me.tableNotasCredito.GastosBombNotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGastosBombNotaNull()
            Me(Me.tableNotasCredito.GastosBombNotaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGastosNotaNull() As Boolean
            Return Me.IsNull(Me.tableNotasCredito.GastosNotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGastosNotaNull()
            Me(Me.tableNotasCredito.GastosNotaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpuestosNotaNull() As Boolean
            Return Me.IsNull(Me.tableNotasCredito.ImpuestosNotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpuestosNotaNull()
            Me(Me.tableNotasCredito.ImpuestosNotaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNotaNull() As Boolean
            Return Me.IsNull(Me.tableNotasCredito.TotalNotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNotaNull()
            Me(Me.tableNotasCredito.TotalNotaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionesNull() As Boolean
            Return Me.IsNull(Me.tableNotasCredito.ObservacionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionesNull()
            Me(Me.tableNotasCredito.ObservacionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNotaCreditoNull() As Boolean
            Return Me.IsNull(Me.tableNotasCredito.FechaNotaCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNotaCreditoNull()
            Me(Me.tableNotasCredito.FechaNotaCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsComisionNotaNull() As Boolean
            Return Me.IsNull(Me.tableNotasCredito.ComisionNotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetComisionNotaNull()
            Me(Me.tableNotasCredito.ComisionNotaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeComiFactNull() As Boolean
            Return Me.IsNull(Me.tableNotasCredito.PorcentajeComiFactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeComiFactNull()
            Me(Me.tableNotasCredito.PorcentajeComiFactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdTipoIngresoNull() As Boolean
            Return Me.IsNull(Me.tableNotasCredito.IdTipoIngresoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdTipoIngresoNull()
            Me(Me.tableNotasCredito.IdTipoIngresoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionReintegroNull() As Boolean
            Return Me.IsNull(Me.tableNotasCredito.DescripcionReintegroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionReintegroNull()
            Me(Me.tableNotasCredito.DescripcionReintegroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdClienteNull() As Boolean
            Return Me.IsNull(Me.tableNotasCredito.IdClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdClienteNull()
            Me(Me.tableNotasCredito.IdClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreClienteNull() As Boolean
            Return Me.IsNull(Me.tableNotasCredito.NombreClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreClienteNull()
            Me(Me.tableNotasCredito.NombreClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReferenciaNull() As Boolean
            Return Me.IsNull(Me.tableNotasCredito.ReferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReferenciaNull()
            Me(Me.tableNotasCredito.ReferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotasNull() As Boolean
            Return Me.IsNull(Me.tableNotasCredito.NotasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotasNull()
            Me(Me.tableNotasCredito.NotasColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DepositosRow
        Inherits Global.System.Data.DataRow
        
        Private tableDepositos As DepositosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDepositos = CType(Me.Table,DepositosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepositos.IdClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCliente' in table 'Depositos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepositos.IdClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Aseguradora() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepositos.AseguradoraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Aseguradora' in table 'Depositos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepositos.AseguradoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepositos.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tipo' in table 'Depositos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepositos.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaMovimiento() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDepositos.FechaMovimientoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaMovimiento' in table 'Depositos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepositos.FechaMovimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableDepositos.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'Depositos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepositos.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Valor() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDepositos.ValorColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Valor' in table 'Depositos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDepositos.ValorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdClienteNull() As Boolean
            Return Me.IsNull(Me.tableDepositos.IdClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdClienteNull()
            Me(Me.tableDepositos.IdClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAseguradoraNull() As Boolean
            Return Me.IsNull(Me.tableDepositos.AseguradoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAseguradoraNull()
            Me(Me.tableDepositos.AseguradoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableDepositos.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableDepositos.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaMovimientoNull() As Boolean
            Return Me.IsNull(Me.tableDepositos.FechaMovimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaMovimientoNull()
            Me(Me.tableDepositos.FechaMovimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableDepositos.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableDepositos.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValorNull() As Boolean
            Return Me.IsNull(Me.tableDepositos.ValorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValorNull()
            Me(Me.tableDepositos.ValorColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DescuentoRow
        Inherits Global.System.Data.DataRow
        
        Private tableDescuento As DescuentoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDescuento = CType(Me.Table,DescuentoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdAvisoCobro() As String
            Get
                Try 
                    Return CType(Me(Me.tableDescuento.IdAvisoCobroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdAvisoCobro' in table 'Descuento' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDescuento.IdAvisoCobroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdDescuento() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDescuento.IdDescuentoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdDescuento' in table 'Descuento' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDescuento.IdDescuentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionDescuento() As String
            Get
                Try 
                    Return CType(Me(Me.tableDescuento.DescripcionDescuentoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DescripcionDescuento' in table 'Descuento' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDescuento.DescripcionDescuentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorceDescuento() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDescuento.PorceDescuentoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorceDescuento' in table 'Descuento' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDescuento.PorceDescuentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ValorDescuento() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDescuento.ValorDescuentoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValorDescuento' in table 'Descuento' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDescuento.ValorDescuentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorceImp() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDescuento.PorceImpColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorceImp' in table 'Descuento' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDescuento.PorceImpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorceRet() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDescuento.PorceRetColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorceRet' in table 'Descuento' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDescuento.PorceRetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ValorImp() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDescuento.ValorImpColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValorImp' in table 'Descuento' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDescuento.ValorImpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ValorRet() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDescuento.ValorRetColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValorRet' in table 'Descuento' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDescuento.ValorRetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdAvisoCobroNull() As Boolean
            Return Me.IsNull(Me.tableDescuento.IdAvisoCobroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdAvisoCobroNull()
            Me(Me.tableDescuento.IdAvisoCobroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdDescuentoNull() As Boolean
            Return Me.IsNull(Me.tableDescuento.IdDescuentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdDescuentoNull()
            Me(Me.tableDescuento.IdDescuentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionDescuentoNull() As Boolean
            Return Me.IsNull(Me.tableDescuento.DescripcionDescuentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionDescuentoNull()
            Me(Me.tableDescuento.DescripcionDescuentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorceDescuentoNull() As Boolean
            Return Me.IsNull(Me.tableDescuento.PorceDescuentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorceDescuentoNull()
            Me(Me.tableDescuento.PorceDescuentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValorDescuentoNull() As Boolean
            Return Me.IsNull(Me.tableDescuento.ValorDescuentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValorDescuentoNull()
            Me(Me.tableDescuento.ValorDescuentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorceImpNull() As Boolean
            Return Me.IsNull(Me.tableDescuento.PorceImpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorceImpNull()
            Me(Me.tableDescuento.PorceImpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorceRetNull() As Boolean
            Return Me.IsNull(Me.tableDescuento.PorceRetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorceRetNull()
            Me(Me.tableDescuento.PorceRetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValorImpNull() As Boolean
            Return Me.IsNull(Me.tableDescuento.ValorImpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValorImpNull()
            Me(Me.tableDescuento.ValorImpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValorRetNull() As Boolean
            Return Me.IsNull(Me.tableDescuento.ValorRetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValorRetNull()
            Me(Me.tableDescuento.ValorRetColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PrimasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PrimasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PrimasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PrimasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ImagenesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ImagenesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ImagenesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ImagenesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AvisoCobroRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AvisoCobroRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AvisoCobroRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AvisoCobroRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ClientesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ClientesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ClientesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ClientesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NotasCreditoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NotasCreditoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NotasCreditoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NotasCreditoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DepositosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DepositosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DepositosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DepositosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DescuentoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DescuentoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DescuentoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DescuentoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
