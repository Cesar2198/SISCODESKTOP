<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="PictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        iGVC/9k=
</value>
  </data>
</root>