'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8800
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsClientes"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsClientes
    Inherits Global.System.Data.DataSet
    
    Private tableClientes As ClientesDataTable
    
    Private tableClientesContactos As ClientesContactosDataTable
    
    Private tableImagenes As ImagenesDataTable
    
    Private tableClientesPolizas As ClientesPolizasDataTable
    
    Private tableClientesEspecial As ClientesEspecialDataTable
    
    Private tableClientesCampos As ClientesCamposDataTable
    
    Private tableOfertas As OfertasDataTable
    
    Private relationClientes_ClientesContactos As Global.System.Data.DataRelation
    
    Private relationClientes_ClientesPolizas As Global.System.Data.DataRelation
    
    Private relationClientes_ClientesCampos As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Clientes")) Is Nothing) Then
                MyBase.Tables.Add(New ClientesDataTable(ds.Tables("Clientes")))
            End If
            If (Not (ds.Tables("ClientesContactos")) Is Nothing) Then
                MyBase.Tables.Add(New ClientesContactosDataTable(ds.Tables("ClientesContactos")))
            End If
            If (Not (ds.Tables("Imagenes")) Is Nothing) Then
                MyBase.Tables.Add(New ImagenesDataTable(ds.Tables("Imagenes")))
            End If
            If (Not (ds.Tables("ClientesPolizas")) Is Nothing) Then
                MyBase.Tables.Add(New ClientesPolizasDataTable(ds.Tables("ClientesPolizas")))
            End If
            If (Not (ds.Tables("ClientesEspecial")) Is Nothing) Then
                MyBase.Tables.Add(New ClientesEspecialDataTable(ds.Tables("ClientesEspecial")))
            End If
            If (Not (ds.Tables("ClientesCampos")) Is Nothing) Then
                MyBase.Tables.Add(New ClientesCamposDataTable(ds.Tables("ClientesCampos")))
            End If
            If (Not (ds.Tables("Ofertas")) Is Nothing) Then
                MyBase.Tables.Add(New OfertasDataTable(ds.Tables("Ofertas")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Clientes() As ClientesDataTable
        Get
            Return Me.tableClientes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ClientesContactos() As ClientesContactosDataTable
        Get
            Return Me.tableClientesContactos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Imagenes() As ImagenesDataTable
        Get
            Return Me.tableImagenes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ClientesPolizas() As ClientesPolizasDataTable
        Get
            Return Me.tableClientesPolizas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ClientesEspecial() As ClientesEspecialDataTable
        Get
            Return Me.tableClientesEspecial
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ClientesCampos() As ClientesCamposDataTable
        Get
            Return Me.tableClientesCampos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Ofertas() As OfertasDataTable
        Get
            Return Me.tableOfertas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsClientes = CType(MyBase.Clone,dsClientes)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Clientes")) Is Nothing) Then
                MyBase.Tables.Add(New ClientesDataTable(ds.Tables("Clientes")))
            End If
            If (Not (ds.Tables("ClientesContactos")) Is Nothing) Then
                MyBase.Tables.Add(New ClientesContactosDataTable(ds.Tables("ClientesContactos")))
            End If
            If (Not (ds.Tables("Imagenes")) Is Nothing) Then
                MyBase.Tables.Add(New ImagenesDataTable(ds.Tables("Imagenes")))
            End If
            If (Not (ds.Tables("ClientesPolizas")) Is Nothing) Then
                MyBase.Tables.Add(New ClientesPolizasDataTable(ds.Tables("ClientesPolizas")))
            End If
            If (Not (ds.Tables("ClientesEspecial")) Is Nothing) Then
                MyBase.Tables.Add(New ClientesEspecialDataTable(ds.Tables("ClientesEspecial")))
            End If
            If (Not (ds.Tables("ClientesCampos")) Is Nothing) Then
                MyBase.Tables.Add(New ClientesCamposDataTable(ds.Tables("ClientesCampos")))
            End If
            If (Not (ds.Tables("Ofertas")) Is Nothing) Then
                MyBase.Tables.Add(New OfertasDataTable(ds.Tables("Ofertas")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableClientes = CType(MyBase.Tables("Clientes"),ClientesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableClientes) Is Nothing) Then
                Me.tableClientes.InitVars
            End If
        End If
        Me.tableClientesContactos = CType(MyBase.Tables("ClientesContactos"),ClientesContactosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableClientesContactos) Is Nothing) Then
                Me.tableClientesContactos.InitVars
            End If
        End If
        Me.tableImagenes = CType(MyBase.Tables("Imagenes"),ImagenesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableImagenes) Is Nothing) Then
                Me.tableImagenes.InitVars
            End If
        End If
        Me.tableClientesPolizas = CType(MyBase.Tables("ClientesPolizas"),ClientesPolizasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableClientesPolizas) Is Nothing) Then
                Me.tableClientesPolizas.InitVars
            End If
        End If
        Me.tableClientesEspecial = CType(MyBase.Tables("ClientesEspecial"),ClientesEspecialDataTable)
        If (initTable = true) Then
            If (Not (Me.tableClientesEspecial) Is Nothing) Then
                Me.tableClientesEspecial.InitVars
            End If
        End If
        Me.tableClientesCampos = CType(MyBase.Tables("ClientesCampos"),ClientesCamposDataTable)
        If (initTable = true) Then
            If (Not (Me.tableClientesCampos) Is Nothing) Then
                Me.tableClientesCampos.InitVars
            End If
        End If
        Me.tableOfertas = CType(MyBase.Tables("Ofertas"),OfertasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOfertas) Is Nothing) Then
                Me.tableOfertas.InitVars
            End If
        End If
        Me.relationClientes_ClientesContactos = Me.Relations("Clientes_ClientesContactos")
        Me.relationClientes_ClientesPolizas = Me.Relations("Clientes_ClientesPolizas")
        Me.relationClientes_ClientesCampos = Me.Relations("Clientes_ClientesCampos")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsClientes"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsClientes.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableClientes = New ClientesDataTable
        MyBase.Tables.Add(Me.tableClientes)
        Me.tableClientesContactos = New ClientesContactosDataTable
        MyBase.Tables.Add(Me.tableClientesContactos)
        Me.tableImagenes = New ImagenesDataTable
        MyBase.Tables.Add(Me.tableImagenes)
        Me.tableClientesPolizas = New ClientesPolizasDataTable
        MyBase.Tables.Add(Me.tableClientesPolizas)
        Me.tableClientesEspecial = New ClientesEspecialDataTable
        MyBase.Tables.Add(Me.tableClientesEspecial)
        Me.tableClientesCampos = New ClientesCamposDataTable
        MyBase.Tables.Add(Me.tableClientesCampos)
        Me.tableOfertas = New OfertasDataTable
        MyBase.Tables.Add(Me.tableOfertas)
        Me.relationClientes_ClientesContactos = New Global.System.Data.DataRelation("Clientes_ClientesContactos", New Global.System.Data.DataColumn() {Me.tableClientes.IdClienteColumn}, New Global.System.Data.DataColumn() {Me.tableClientesContactos.IdClienteColumn}, false)
        Me.Relations.Add(Me.relationClientes_ClientesContactos)
        Me.relationClientes_ClientesPolizas = New Global.System.Data.DataRelation("Clientes_ClientesPolizas", New Global.System.Data.DataColumn() {Me.tableClientes.IdClienteColumn}, New Global.System.Data.DataColumn() {Me.tableClientesPolizas.IdClienteColumn}, false)
        Me.Relations.Add(Me.relationClientes_ClientesPolizas)
        Me.relationClientes_ClientesCampos = New Global.System.Data.DataRelation("Clientes_ClientesCampos", New Global.System.Data.DataColumn() {Me.tableClientes.IdClienteColumn}, New Global.System.Data.DataColumn() {Me.tableClientesCampos.IdClienteColumn}, false)
        Me.Relations.Add(Me.relationClientes_ClientesCampos)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeClientes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeClientesContactos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeImagenes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeClientesPolizas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeClientesEspecial() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeClientesCampos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOfertas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsClientes = New dsClientes
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ClientesRowChangeEventHandler(ByVal sender As Object, ByVal e As ClientesRowChangeEvent)
    
    Public Delegate Sub ClientesContactosRowChangeEventHandler(ByVal sender As Object, ByVal e As ClientesContactosRowChangeEvent)
    
    Public Delegate Sub ImagenesRowChangeEventHandler(ByVal sender As Object, ByVal e As ImagenesRowChangeEvent)
    
    Public Delegate Sub ClientesPolizasRowChangeEventHandler(ByVal sender As Object, ByVal e As ClientesPolizasRowChangeEvent)
    
    Public Delegate Sub ClientesEspecialRowChangeEventHandler(ByVal sender As Object, ByVal e As ClientesEspecialRowChangeEvent)
    
    Public Delegate Sub ClientesCamposRowChangeEventHandler(ByVal sender As Object, ByVal e As ClientesCamposRowChangeEvent)
    
    Public Delegate Sub OfertasRowChangeEventHandler(ByVal sender As Object, ByVal e As OfertasRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ClientesDataTable
        Inherits Global.System.Data.TypedTableBase(Of ClientesRow)
        
        Private columnIdCliente As Global.System.Data.DataColumn
        
        Private columnNombreCliente As Global.System.Data.DataColumn
        
        Private columnNit As Global.System.Data.DataColumn
        
        Private columnDui As Global.System.Data.DataColumn
        
        Private columnRegistroFiscal As Global.System.Data.DataColumn
        
        Private columnGiro As Global.System.Data.DataColumn
        
        Private columnFechaNacimiento As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnFax As Global.System.Data.DataColumn
        
        Private columnIdTipoCliente As Global.System.Data.DataColumn
        
        Private columnEjecutivoCta As Global.System.Data.DataColumn
        
        Private columnLugarTrabajo As Global.System.Data.DataColumn
        
        Private columnNombreRepLegal As Global.System.Data.DataColumn
        
        Private columnNitRepLegal As Global.System.Data.DataColumn
        
        Private columnTelRepLegal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Clientes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DuiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDui
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistroFiscalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistroFiscal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GiroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGiro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaNacimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaNacimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdTipoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdTipoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EjecutivoCtaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEjecutivoCta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LugarTrabajoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLugarTrabajo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreRepLegalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreRepLegal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NitRepLegalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNitRepLegal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelRepLegalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelRepLegal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClientesRow
            Get
                Return CType(Me.Rows(index),ClientesRow)
            End Get
        End Property
        
        Public Event ClientesRowChanging As ClientesRowChangeEventHandler
        
        Public Event ClientesRowChanged As ClientesRowChangeEventHandler
        
        Public Event ClientesRowDeleting As ClientesRowChangeEventHandler
        
        Public Event ClientesRowDeleted As ClientesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddClientesRow(ByVal row As ClientesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddClientesRow(ByVal IdCliente As String, ByVal NombreCliente As String, ByVal Nit As String, ByVal Dui As String, ByVal RegistroFiscal As String, ByVal Giro As String, ByVal FechaNacimiento As Date, ByVal Email As String, ByVal Fax As String, ByVal IdTipoCliente As String, ByVal EjecutivoCta As String, ByVal LugarTrabajo As String, ByVal NombreRepLegal As String, ByVal NitRepLegal As String, ByVal TelRepLegal As String) As ClientesRow
            Dim rowClientesRow As ClientesRow = CType(Me.NewRow,ClientesRow)
            Dim columnValuesArray() As Object = New Object() {IdCliente, NombreCliente, Nit, Dui, RegistroFiscal, Giro, FechaNacimiento, Email, Fax, IdTipoCliente, EjecutivoCta, LugarTrabajo, NombreRepLegal, NitRepLegal, TelRepLegal}
            rowClientesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowClientesRow)
            Return rowClientesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ClientesDataTable = CType(MyBase.Clone,ClientesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ClientesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdCliente = MyBase.Columns("IdCliente")
            Me.columnNombreCliente = MyBase.Columns("NombreCliente")
            Me.columnNit = MyBase.Columns("Nit")
            Me.columnDui = MyBase.Columns("Dui")
            Me.columnRegistroFiscal = MyBase.Columns("RegistroFiscal")
            Me.columnGiro = MyBase.Columns("Giro")
            Me.columnFechaNacimiento = MyBase.Columns("FechaNacimiento")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnFax = MyBase.Columns("Fax")
            Me.columnIdTipoCliente = MyBase.Columns("IdTipoCliente")
            Me.columnEjecutivoCta = MyBase.Columns("EjecutivoCta")
            Me.columnLugarTrabajo = MyBase.Columns("LugarTrabajo")
            Me.columnNombreRepLegal = MyBase.Columns("NombreRepLegal")
            Me.columnNitRepLegal = MyBase.Columns("NitRepLegal")
            Me.columnTelRepLegal = MyBase.Columns("TelRepLegal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdCliente = New Global.System.Data.DataColumn("IdCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCliente)
            Me.columnNombreCliente = New Global.System.Data.DataColumn("NombreCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCliente)
            Me.columnNit = New Global.System.Data.DataColumn("Nit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNit)
            Me.columnDui = New Global.System.Data.DataColumn("Dui", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDui)
            Me.columnRegistroFiscal = New Global.System.Data.DataColumn("RegistroFiscal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistroFiscal)
            Me.columnGiro = New Global.System.Data.DataColumn("Giro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGiro)
            Me.columnFechaNacimiento = New Global.System.Data.DataColumn("FechaNacimiento", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaNacimiento)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnFax = New Global.System.Data.DataColumn("Fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFax)
            Me.columnIdTipoCliente = New Global.System.Data.DataColumn("IdTipoCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdTipoCliente)
            Me.columnEjecutivoCta = New Global.System.Data.DataColumn("EjecutivoCta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEjecutivoCta)
            Me.columnLugarTrabajo = New Global.System.Data.DataColumn("LugarTrabajo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLugarTrabajo)
            Me.columnNombreRepLegal = New Global.System.Data.DataColumn("NombreRepLegal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreRepLegal)
            Me.columnNitRepLegal = New Global.System.Data.DataColumn("NitRepLegal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNitRepLegal)
            Me.columnTelRepLegal = New Global.System.Data.DataColumn("TelRepLegal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelRepLegal)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewClientesRow() As ClientesRow
            Return CType(Me.NewRow,ClientesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ClientesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ClientesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClientesRowChangedEvent) Is Nothing) Then
                RaiseEvent ClientesRowChanged(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClientesRowChangingEvent) Is Nothing) Then
                RaiseEvent ClientesRowChanging(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClientesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClientesRowDeleted(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClientesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClientesRowDeleting(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveClientesRow(ByVal row As ClientesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsClientes = New dsClientes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ClientesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ClientesContactosDataTable
        Inherits Global.System.Data.TypedTableBase(Of ClientesContactosRow)
        
        Private columnIdCliente As Global.System.Data.DataColumn
        
        Private columnIdContacto As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnTelefono As Global.System.Data.DataColumn
        
        Private columnDireccion As Global.System.Data.DataColumn
        
        Private columnCiudad As Global.System.Data.DataColumn
        
        Private columnCargo As Global.System.Data.DataColumn
        
        Private columnUsoCorrespondencia As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ClientesContactos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdContactoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdContacto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DireccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CiudadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCiudad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CargoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCargo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsoCorrespondenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsoCorrespondencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClientesContactosRow
            Get
                Return CType(Me.Rows(index),ClientesContactosRow)
            End Get
        End Property
        
        Public Event ClientesContactosRowChanging As ClientesContactosRowChangeEventHandler
        
        Public Event ClientesContactosRowChanged As ClientesContactosRowChangeEventHandler
        
        Public Event ClientesContactosRowDeleting As ClientesContactosRowChangeEventHandler
        
        Public Event ClientesContactosRowDeleted As ClientesContactosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddClientesContactosRow(ByVal row As ClientesContactosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddClientesContactosRow(ByVal parentClientesRowByClientes_ClientesContactos As ClientesRow, ByVal IdContacto As Integer, ByVal Nombre As String, ByVal Telefono As String, ByVal Direccion As String, ByVal Ciudad As String, ByVal Cargo As String, ByVal UsoCorrespondencia As String) As ClientesContactosRow
            Dim rowClientesContactosRow As ClientesContactosRow = CType(Me.NewRow,ClientesContactosRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, IdContacto, Nombre, Telefono, Direccion, Ciudad, Cargo, UsoCorrespondencia}
            If (Not (parentClientesRowByClientes_ClientesContactos) Is Nothing) Then
                columnValuesArray(0) = parentClientesRowByClientes_ClientesContactos(0)
            End If
            rowClientesContactosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowClientesContactosRow)
            Return rowClientesContactosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ClientesContactosDataTable = CType(MyBase.Clone,ClientesContactosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ClientesContactosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdCliente = MyBase.Columns("IdCliente")
            Me.columnIdContacto = MyBase.Columns("IdContacto")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnTelefono = MyBase.Columns("Telefono")
            Me.columnDireccion = MyBase.Columns("Direccion")
            Me.columnCiudad = MyBase.Columns("Ciudad")
            Me.columnCargo = MyBase.Columns("Cargo")
            Me.columnUsoCorrespondencia = MyBase.Columns("UsoCorrespondencia")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdCliente = New Global.System.Data.DataColumn("IdCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCliente)
            Me.columnIdContacto = New Global.System.Data.DataColumn("IdContacto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdContacto)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnTelefono = New Global.System.Data.DataColumn("Telefono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono)
            Me.columnDireccion = New Global.System.Data.DataColumn("Direccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDireccion)
            Me.columnCiudad = New Global.System.Data.DataColumn("Ciudad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCiudad)
            Me.columnCargo = New Global.System.Data.DataColumn("Cargo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCargo)
            Me.columnUsoCorrespondencia = New Global.System.Data.DataColumn("UsoCorrespondencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsoCorrespondencia)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewClientesContactosRow() As ClientesContactosRow
            Return CType(Me.NewRow,ClientesContactosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ClientesContactosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ClientesContactosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClientesContactosRowChangedEvent) Is Nothing) Then
                RaiseEvent ClientesContactosRowChanged(Me, New ClientesContactosRowChangeEvent(CType(e.Row,ClientesContactosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClientesContactosRowChangingEvent) Is Nothing) Then
                RaiseEvent ClientesContactosRowChanging(Me, New ClientesContactosRowChangeEvent(CType(e.Row,ClientesContactosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClientesContactosRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClientesContactosRowDeleted(Me, New ClientesContactosRowChangeEvent(CType(e.Row,ClientesContactosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClientesContactosRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClientesContactosRowDeleting(Me, New ClientesContactosRowChangeEvent(CType(e.Row,ClientesContactosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveClientesContactosRow(ByVal row As ClientesContactosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsClientes = New dsClientes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ClientesContactosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ImagenesDataTable
        Inherits Global.System.Data.TypedTableBase(Of ImagenesRow)
        
        Private columnLogo As Global.System.Data.DataColumn
        
        Private columnSello As Global.System.Data.DataColumn
        
        Private columnLogo2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Imagenes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SelloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSello
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Logo2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogo2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImagenesRow
            Get
                Return CType(Me.Rows(index),ImagenesRow)
            End Get
        End Property
        
        Public Event ImagenesRowChanging As ImagenesRowChangeEventHandler
        
        Public Event ImagenesRowChanged As ImagenesRowChangeEventHandler
        
        Public Event ImagenesRowDeleting As ImagenesRowChangeEventHandler
        
        Public Event ImagenesRowDeleted As ImagenesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddImagenesRow(ByVal row As ImagenesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddImagenesRow(ByVal Logo() As Byte, ByVal Sello() As Byte, ByVal Logo2() As Byte) As ImagenesRow
            Dim rowImagenesRow As ImagenesRow = CType(Me.NewRow,ImagenesRow)
            Dim columnValuesArray() As Object = New Object() {Logo, Sello, Logo2}
            rowImagenesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowImagenesRow)
            Return rowImagenesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ImagenesDataTable = CType(MyBase.Clone,ImagenesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ImagenesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLogo = MyBase.Columns("Logo")
            Me.columnSello = MyBase.Columns("Sello")
            Me.columnLogo2 = MyBase.Columns("Logo2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLogo = New Global.System.Data.DataColumn("Logo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogo)
            Me.columnSello = New Global.System.Data.DataColumn("Sello", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSello)
            Me.columnLogo2 = New Global.System.Data.DataColumn("Logo2", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogo2)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewImagenesRow() As ImagenesRow
            Return CType(Me.NewRow,ImagenesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ImagenesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ImagenesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImagenesRowChangedEvent) Is Nothing) Then
                RaiseEvent ImagenesRowChanged(Me, New ImagenesRowChangeEvent(CType(e.Row,ImagenesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImagenesRowChangingEvent) Is Nothing) Then
                RaiseEvent ImagenesRowChanging(Me, New ImagenesRowChangeEvent(CType(e.Row,ImagenesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImagenesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImagenesRowDeleted(Me, New ImagenesRowChangeEvent(CType(e.Row,ImagenesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImagenesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImagenesRowDeleting(Me, New ImagenesRowChangeEvent(CType(e.Row,ImagenesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveImagenesRow(ByVal row As ImagenesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsClientes = New dsClientes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ImagenesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ClientesPolizasDataTable
        Inherits Global.System.Data.TypedTableBase(Of ClientesPolizasRow)
        
        Private columnIdCliente As Global.System.Data.DataColumn
        
        Private columnAseguradora As Global.System.Data.DataColumn
        
        Private columnPoliza As Global.System.Data.DataColumn
        
        Private columnAvisoCobro As Global.System.Data.DataColumn
        
        Private columnTarjeta As Global.System.Data.DataColumn
        
        Private columnProducto As Global.System.Data.DataColumn
        
        Private columnVenceTarjeta As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ClientesPolizas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AseguradoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAseguradora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PolizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPoliza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AvisoCobroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAvisoCobro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TarjetaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTarjeta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VenceTarjetaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVenceTarjeta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClientesPolizasRow
            Get
                Return CType(Me.Rows(index),ClientesPolizasRow)
            End Get
        End Property
        
        Public Event ClientesPolizasRowChanging As ClientesPolizasRowChangeEventHandler
        
        Public Event ClientesPolizasRowChanged As ClientesPolizasRowChangeEventHandler
        
        Public Event ClientesPolizasRowDeleting As ClientesPolizasRowChangeEventHandler
        
        Public Event ClientesPolizasRowDeleted As ClientesPolizasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddClientesPolizasRow(ByVal row As ClientesPolizasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddClientesPolizasRow(ByVal parentClientesRowByClientes_ClientesPolizas As ClientesRow, ByVal Aseguradora As String, ByVal Poliza As String, ByVal AvisoCobro As String, ByVal Tarjeta As String, ByVal Producto As String, ByVal VenceTarjeta As String) As ClientesPolizasRow
            Dim rowClientesPolizasRow As ClientesPolizasRow = CType(Me.NewRow,ClientesPolizasRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Aseguradora, Poliza, AvisoCobro, Tarjeta, Producto, VenceTarjeta}
            If (Not (parentClientesRowByClientes_ClientesPolizas) Is Nothing) Then
                columnValuesArray(0) = parentClientesRowByClientes_ClientesPolizas(0)
            End If
            rowClientesPolizasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowClientesPolizasRow)
            Return rowClientesPolizasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ClientesPolizasDataTable = CType(MyBase.Clone,ClientesPolizasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ClientesPolizasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdCliente = MyBase.Columns("IdCliente")
            Me.columnAseguradora = MyBase.Columns("Aseguradora")
            Me.columnPoliza = MyBase.Columns("Poliza")
            Me.columnAvisoCobro = MyBase.Columns("AvisoCobro")
            Me.columnTarjeta = MyBase.Columns("Tarjeta")
            Me.columnProducto = MyBase.Columns("Producto")
            Me.columnVenceTarjeta = MyBase.Columns("VenceTarjeta")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdCliente = New Global.System.Data.DataColumn("IdCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCliente)
            Me.columnAseguradora = New Global.System.Data.DataColumn("Aseguradora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAseguradora)
            Me.columnPoliza = New Global.System.Data.DataColumn("Poliza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPoliza)
            Me.columnAvisoCobro = New Global.System.Data.DataColumn("AvisoCobro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAvisoCobro)
            Me.columnTarjeta = New Global.System.Data.DataColumn("Tarjeta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTarjeta)
            Me.columnProducto = New Global.System.Data.DataColumn("Producto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProducto)
            Me.columnVenceTarjeta = New Global.System.Data.DataColumn("VenceTarjeta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVenceTarjeta)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewClientesPolizasRow() As ClientesPolizasRow
            Return CType(Me.NewRow,ClientesPolizasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ClientesPolizasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ClientesPolizasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClientesPolizasRowChangedEvent) Is Nothing) Then
                RaiseEvent ClientesPolizasRowChanged(Me, New ClientesPolizasRowChangeEvent(CType(e.Row,ClientesPolizasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClientesPolizasRowChangingEvent) Is Nothing) Then
                RaiseEvent ClientesPolizasRowChanging(Me, New ClientesPolizasRowChangeEvent(CType(e.Row,ClientesPolizasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClientesPolizasRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClientesPolizasRowDeleted(Me, New ClientesPolizasRowChangeEvent(CType(e.Row,ClientesPolizasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClientesPolizasRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClientesPolizasRowDeleting(Me, New ClientesPolizasRowChangeEvent(CType(e.Row,ClientesPolizasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveClientesPolizasRow(ByVal row As ClientesPolizasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsClientes = New dsClientes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ClientesPolizasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ClientesEspecialDataTable
        Inherits Global.System.Data.TypedTableBase(Of ClientesEspecialRow)
        
        Private columnIdCliente As Global.System.Data.DataColumn
        
        Private columnnat_NombreCliente As Global.System.Data.DataColumn
        
        Private columnnat_DireccionCasa As Global.System.Data.DataColumn
        
        Private columnnat_TelCasa As Global.System.Data.DataColumn
        
        Private columnnat_TelMovil As Global.System.Data.DataColumn
        
        Private columnnat_EstadoCivil As Global.System.Data.DataColumn
        
        Private columnnat_TieneHijos As Global.System.Data.DataColumn
        
        Private columnnat_NumHijos As Global.System.Data.DataColumn
        
        Private columnnat_EmailCasa As Global.System.Data.DataColumn
        
        Private columnnat_PinBB As Global.System.Data.DataColumn
        
        Private columnnat_Facebook As Global.System.Data.DataColumn
        
        Private columnnat_twitter As Global.System.Data.DataColumn
        
        Private columnnat_Profesion As Global.System.Data.DataColumn
        
        Private columnnat_LugarTrabajo As Global.System.Data.DataColumn
        
        Private columnnat_Cargo As Global.System.Data.DataColumn
        
        Private columnnat_DireccionTrabajo As Global.System.Data.DataColumn
        
        Private columnnat_TelTrabajo As Global.System.Data.DataColumn
        
        Private columnnat_FaxTrabajo As Global.System.Data.DataColumn
        
        Private columnnat_EmailTrabajo As Global.System.Data.DataColumn
        
        Private columnnat_PaginaWeb As Global.System.Data.DataColumn
        
        Private columnnat_PreferenciaCobro As Global.System.Data.DataColumn
        
        Private columnnat_ContactoCobro As Global.System.Data.DataColumn
        
        Private columnnat_PreferenciaPago As Global.System.Data.DataColumn
        
        Private columnnat_ClienteExistente As Global.System.Data.DataColumn
        
        Private columnnat_ReferidoPor As Global.System.Data.DataColumn
        
        Private columnnat_Hobbie As Global.System.Data.DataColumn
        
        Private columnnat_Deporte As Global.System.Data.DataColumn
        
        Private columnnat_Religion As Global.System.Data.DataColumn
        
        Private columnnat_Comida As Global.System.Data.DataColumn
        
        Private columnnat_Musica As Global.System.Data.DataColumn
        
        Private columnnat_Bebida As Global.System.Data.DataColumn
        
        Private columnnat_MedioInformacion As Global.System.Data.DataColumn
        
        Private columnnat_Cesion As Global.System.Data.DataColumn
        
        Private columnnat_CompletaFormulario As Global.System.Data.DataColumn
        
        Private columnnat_FechaFormulario As Global.System.Data.DataColumn
        
        Private columnnat_Comentarios As Global.System.Data.DataColumn
        
        Private columnjur_NombreEmpresa As Global.System.Data.DataColumn
        
        Private columnjur_Giro As Global.System.Data.DataColumn
        
        Private columnjur_RepresentanteLegal As Global.System.Data.DataColumn
        
        Private columnjur_PinBB As Global.System.Data.DataColumn
        
        Private columnjur_TelMovil As Global.System.Data.DataColumn
        
        Private columnjur_Profesion As Global.System.Data.DataColumn
        
        Private columnjur_EncargadoPoliza As Global.System.Data.DataColumn
        
        Private columnjur_DireccionOficina As Global.System.Data.DataColumn
        
        Private columnjur_TelOficina As Global.System.Data.DataColumn
        
        Private columnjur_FaxOficina As Global.System.Data.DataColumn
        
        Private columnjur_Email As Global.System.Data.DataColumn
        
        Private columnjur_PolPinBB As Global.System.Data.DataColumn
        
        Private columnjur_PaginaWeb As Global.System.Data.DataColumn
        
        Private columnjur_Facebook As Global.System.Data.DataColumn
        
        Private columnjur_Twitter As Global.System.Data.DataColumn
        
        Private columnjur_ContactoCobro As Global.System.Data.DataColumn
        
        Private columnjur_CobroTelefono As Global.System.Data.DataColumn
        
        Private columnjur_CobroFax As Global.System.Data.DataColumn
        
        Private columnjur_CobroEmail As Global.System.Data.DataColumn
        
        Private columnjur_ClienteExiste As Global.System.Data.DataColumn
        
        Private columnjur_ReferidoPor As Global.System.Data.DataColumn
        
        Private columnjur_FormaPago As Global.System.Data.DataColumn
        
        Private columnjur_Pagador As Global.System.Data.DataColumn
        
        Private columnjur_Cesion As Global.System.Data.DataColumn
        
        Private columnjur_ActDireccion As Global.System.Data.DataColumn
        
        Private columnjur_ActTelefonos As Global.System.Data.DataColumn
        
        Private columnjur_ActFax As Global.System.Data.DataColumn
        
        Private columnjur_ActEmail As Global.System.Data.DataColumn
        
        Private columnjur_ActPaginaWeb As Global.System.Data.DataColumn
        
        Private columnjur_Comentario As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ClientesEspecial"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_NombreClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_NombreCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_DireccionCasaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_DireccionCasa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_TelCasaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_TelCasa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_TelMovilColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_TelMovil
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_EstadoCivilColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_EstadoCivil
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_TieneHijosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_TieneHijos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_NumHijosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_NumHijos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_EmailCasaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_EmailCasa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_PinBBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_PinBB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_FacebookColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_Facebook
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_twitterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_twitter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_ProfesionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_Profesion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_LugarTrabajoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_LugarTrabajo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_CargoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_Cargo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_DireccionTrabajoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_DireccionTrabajo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_TelTrabajoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_TelTrabajo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_FaxTrabajoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_FaxTrabajo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_EmailTrabajoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_EmailTrabajo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_PaginaWebColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_PaginaWeb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_PreferenciaCobroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_PreferenciaCobro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_ContactoCobroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_ContactoCobro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_PreferenciaPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_PreferenciaPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_ClienteExistenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_ClienteExistente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_ReferidoPorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_ReferidoPor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_HobbieColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_Hobbie
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_DeporteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_Deporte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_ReligionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_Religion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_ComidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_Comida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_MusicaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_Musica
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_BebidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_Bebida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_MedioInformacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_MedioInformacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_CesionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_Cesion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_CompletaFormularioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_CompletaFormulario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_FechaFormularioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_FechaFormulario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nat_ComentariosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnat_Comentarios
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_NombreEmpresaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_NombreEmpresa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_GiroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_Giro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_RepresentanteLegalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_RepresentanteLegal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_PinBBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_PinBB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_TelMovilColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_TelMovil
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_ProfesionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_Profesion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_EncargadoPolizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_EncargadoPoliza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_DireccionOficinaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_DireccionOficina
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_TelOficinaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_TelOficina
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_FaxOficinaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_FaxOficina
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_Email
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_PolPinBBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_PolPinBB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_PaginaWebColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_PaginaWeb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_FacebookColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_Facebook
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_TwitterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_Twitter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_ContactoCobroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_ContactoCobro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_CobroTelefonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_CobroTelefono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_CobroFaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_CobroFax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_CobroEmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_CobroEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_ClienteExisteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_ClienteExiste
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_ReferidoPorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_ReferidoPor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_FormaPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_FormaPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_PagadorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_Pagador
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_CesionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_Cesion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_ActDireccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_ActDireccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_ActTelefonosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_ActTelefonos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_ActFaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_ActFax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_ActEmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_ActEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_ActPaginaWebColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_ActPaginaWeb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jur_ComentarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjur_Comentario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClientesEspecialRow
            Get
                Return CType(Me.Rows(index),ClientesEspecialRow)
            End Get
        End Property
        
        Public Event ClientesEspecialRowChanging As ClientesEspecialRowChangeEventHandler
        
        Public Event ClientesEspecialRowChanged As ClientesEspecialRowChangeEventHandler
        
        Public Event ClientesEspecialRowDeleting As ClientesEspecialRowChangeEventHandler
        
        Public Event ClientesEspecialRowDeleted As ClientesEspecialRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddClientesEspecialRow(ByVal row As ClientesEspecialRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddClientesEspecialRow( _
                    ByVal IdCliente As String,  _
                    ByVal nat_NombreCliente As String,  _
                    ByVal nat_DireccionCasa As String,  _
                    ByVal nat_TelCasa As String,  _
                    ByVal nat_TelMovil As String,  _
                    ByVal nat_EstadoCivil As String,  _
                    ByVal nat_TieneHijos As String,  _
                    ByVal nat_NumHijos As Integer,  _
                    ByVal nat_EmailCasa As String,  _
                    ByVal nat_PinBB As String,  _
                    ByVal nat_Facebook As String,  _
                    ByVal nat_twitter As String,  _
                    ByVal nat_Profesion As String,  _
                    ByVal nat_LugarTrabajo As String,  _
                    ByVal nat_Cargo As String,  _
                    ByVal nat_DireccionTrabajo As String,  _
                    ByVal nat_TelTrabajo As String,  _
                    ByVal nat_FaxTrabajo As String,  _
                    ByVal nat_EmailTrabajo As String,  _
                    ByVal nat_PaginaWeb As String,  _
                    ByVal nat_PreferenciaCobro As String,  _
                    ByVal nat_ContactoCobro As String,  _
                    ByVal nat_PreferenciaPago As String,  _
                    ByVal nat_ClienteExistente As String,  _
                    ByVal nat_ReferidoPor As String,  _
                    ByVal nat_Hobbie As String,  _
                    ByVal nat_Deporte As String,  _
                    ByVal nat_Religion As String,  _
                    ByVal nat_Comida As String,  _
                    ByVal nat_Musica As String,  _
                    ByVal nat_Bebida As String,  _
                    ByVal nat_MedioInformacion As String,  _
                    ByVal nat_Cesion As String,  _
                    ByVal nat_CompletaFormulario As String,  _
                    ByVal nat_FechaFormulario As Date,  _
                    ByVal nat_Comentarios As String,  _
                    ByVal jur_NombreEmpresa As String,  _
                    ByVal jur_Giro As String,  _
                    ByVal jur_RepresentanteLegal As String,  _
                    ByVal jur_PinBB As String,  _
                    ByVal jur_TelMovil As String,  _
                    ByVal jur_Profesion As String,  _
                    ByVal jur_EncargadoPoliza As String,  _
                    ByVal jur_DireccionOficina As String,  _
                    ByVal jur_TelOficina As String,  _
                    ByVal jur_FaxOficina As String,  _
                    ByVal jur_Email As String,  _
                    ByVal jur_PolPinBB As String,  _
                    ByVal jur_PaginaWeb As String,  _
                    ByVal jur_Facebook As String,  _
                    ByVal jur_Twitter As String,  _
                    ByVal jur_ContactoCobro As String,  _
                    ByVal jur_CobroTelefono As String,  _
                    ByVal jur_CobroFax As String,  _
                    ByVal jur_CobroEmail As String,  _
                    ByVal jur_ClienteExiste As String,  _
                    ByVal jur_ReferidoPor As String,  _
                    ByVal jur_FormaPago As String,  _
                    ByVal jur_Pagador As String,  _
                    ByVal jur_Cesion As String,  _
                    ByVal jur_ActDireccion As String,  _
                    ByVal jur_ActTelefonos As String,  _
                    ByVal jur_ActFax As String,  _
                    ByVal jur_ActEmail As String,  _
                    ByVal jur_ActPaginaWeb As String,  _
                    ByVal jur_Comentario As String) As ClientesEspecialRow
            Dim rowClientesEspecialRow As ClientesEspecialRow = CType(Me.NewRow,ClientesEspecialRow)
            Dim columnValuesArray() As Object = New Object() {IdCliente, nat_NombreCliente, nat_DireccionCasa, nat_TelCasa, nat_TelMovil, nat_EstadoCivil, nat_TieneHijos, nat_NumHijos, nat_EmailCasa, nat_PinBB, nat_Facebook, nat_twitter, nat_Profesion, nat_LugarTrabajo, nat_Cargo, nat_DireccionTrabajo, nat_TelTrabajo, nat_FaxTrabajo, nat_EmailTrabajo, nat_PaginaWeb, nat_PreferenciaCobro, nat_ContactoCobro, nat_PreferenciaPago, nat_ClienteExistente, nat_ReferidoPor, nat_Hobbie, nat_Deporte, nat_Religion, nat_Comida, nat_Musica, nat_Bebida, nat_MedioInformacion, nat_Cesion, nat_CompletaFormulario, nat_FechaFormulario, nat_Comentarios, jur_NombreEmpresa, jur_Giro, jur_RepresentanteLegal, jur_PinBB, jur_TelMovil, jur_Profesion, jur_EncargadoPoliza, jur_DireccionOficina, jur_TelOficina, jur_FaxOficina, jur_Email, jur_PolPinBB, jur_PaginaWeb, jur_Facebook, jur_Twitter, jur_ContactoCobro, jur_CobroTelefono, jur_CobroFax, jur_CobroEmail, jur_ClienteExiste, jur_ReferidoPor, jur_FormaPago, jur_Pagador, jur_Cesion, jur_ActDireccion, jur_ActTelefonos, jur_ActFax, jur_ActEmail, jur_ActPaginaWeb, jur_Comentario}
            rowClientesEspecialRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowClientesEspecialRow)
            Return rowClientesEspecialRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIdCliente(ByVal IdCliente As String) As ClientesEspecialRow
            Return CType(Me.Rows.Find(New Object() {IdCliente}),ClientesEspecialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ClientesEspecialDataTable = CType(MyBase.Clone,ClientesEspecialDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ClientesEspecialDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdCliente = MyBase.Columns("IdCliente")
            Me.columnnat_NombreCliente = MyBase.Columns("nat_NombreCliente")
            Me.columnnat_DireccionCasa = MyBase.Columns("nat_DireccionCasa")
            Me.columnnat_TelCasa = MyBase.Columns("nat_TelCasa")
            Me.columnnat_TelMovil = MyBase.Columns("nat_TelMovil")
            Me.columnnat_EstadoCivil = MyBase.Columns("nat_EstadoCivil")
            Me.columnnat_TieneHijos = MyBase.Columns("nat_TieneHijos")
            Me.columnnat_NumHijos = MyBase.Columns("nat_NumHijos")
            Me.columnnat_EmailCasa = MyBase.Columns("nat_EmailCasa")
            Me.columnnat_PinBB = MyBase.Columns("nat_PinBB")
            Me.columnnat_Facebook = MyBase.Columns("nat_Facebook")
            Me.columnnat_twitter = MyBase.Columns("nat_twitter")
            Me.columnnat_Profesion = MyBase.Columns("nat_Profesion")
            Me.columnnat_LugarTrabajo = MyBase.Columns("nat_LugarTrabajo")
            Me.columnnat_Cargo = MyBase.Columns("nat_Cargo")
            Me.columnnat_DireccionTrabajo = MyBase.Columns("nat_DireccionTrabajo")
            Me.columnnat_TelTrabajo = MyBase.Columns("nat_TelTrabajo")
            Me.columnnat_FaxTrabajo = MyBase.Columns("nat_FaxTrabajo")
            Me.columnnat_EmailTrabajo = MyBase.Columns("nat_EmailTrabajo")
            Me.columnnat_PaginaWeb = MyBase.Columns("nat_PaginaWeb")
            Me.columnnat_PreferenciaCobro = MyBase.Columns("nat_PreferenciaCobro")
            Me.columnnat_ContactoCobro = MyBase.Columns("nat_ContactoCobro")
            Me.columnnat_PreferenciaPago = MyBase.Columns("nat_PreferenciaPago")
            Me.columnnat_ClienteExistente = MyBase.Columns("nat_ClienteExistente")
            Me.columnnat_ReferidoPor = MyBase.Columns("nat_ReferidoPor")
            Me.columnnat_Hobbie = MyBase.Columns("nat_Hobbie")
            Me.columnnat_Deporte = MyBase.Columns("nat_Deporte")
            Me.columnnat_Religion = MyBase.Columns("nat_Religion")
            Me.columnnat_Comida = MyBase.Columns("nat_Comida")
            Me.columnnat_Musica = MyBase.Columns("nat_Musica")
            Me.columnnat_Bebida = MyBase.Columns("nat_Bebida")
            Me.columnnat_MedioInformacion = MyBase.Columns("nat_MedioInformacion")
            Me.columnnat_Cesion = MyBase.Columns("nat_Cesion")
            Me.columnnat_CompletaFormulario = MyBase.Columns("nat_CompletaFormulario")
            Me.columnnat_FechaFormulario = MyBase.Columns("nat_FechaFormulario")
            Me.columnnat_Comentarios = MyBase.Columns("nat_Comentarios")
            Me.columnjur_NombreEmpresa = MyBase.Columns("jur_NombreEmpresa")
            Me.columnjur_Giro = MyBase.Columns("jur_Giro")
            Me.columnjur_RepresentanteLegal = MyBase.Columns("jur_RepresentanteLegal")
            Me.columnjur_PinBB = MyBase.Columns("jur_PinBB")
            Me.columnjur_TelMovil = MyBase.Columns("jur_TelMovil")
            Me.columnjur_Profesion = MyBase.Columns("jur_Profesion")
            Me.columnjur_EncargadoPoliza = MyBase.Columns("jur_EncargadoPoliza")
            Me.columnjur_DireccionOficina = MyBase.Columns("jur_DireccionOficina")
            Me.columnjur_TelOficina = MyBase.Columns("jur_TelOficina")
            Me.columnjur_FaxOficina = MyBase.Columns("jur_FaxOficina")
            Me.columnjur_Email = MyBase.Columns("jur_Email")
            Me.columnjur_PolPinBB = MyBase.Columns("jur_PolPinBB")
            Me.columnjur_PaginaWeb = MyBase.Columns("jur_PaginaWeb")
            Me.columnjur_Facebook = MyBase.Columns("jur_Facebook")
            Me.columnjur_Twitter = MyBase.Columns("jur_Twitter")
            Me.columnjur_ContactoCobro = MyBase.Columns("jur_ContactoCobro")
            Me.columnjur_CobroTelefono = MyBase.Columns("jur_CobroTelefono")
            Me.columnjur_CobroFax = MyBase.Columns("jur_CobroFax")
            Me.columnjur_CobroEmail = MyBase.Columns("jur_CobroEmail")
            Me.columnjur_ClienteExiste = MyBase.Columns("jur_ClienteExiste")
            Me.columnjur_ReferidoPor = MyBase.Columns("jur_ReferidoPor")
            Me.columnjur_FormaPago = MyBase.Columns("jur_FormaPago")
            Me.columnjur_Pagador = MyBase.Columns("jur_Pagador")
            Me.columnjur_Cesion = MyBase.Columns("jur_Cesion")
            Me.columnjur_ActDireccion = MyBase.Columns("jur_ActDireccion")
            Me.columnjur_ActTelefonos = MyBase.Columns("jur_ActTelefonos")
            Me.columnjur_ActFax = MyBase.Columns("jur_ActFax")
            Me.columnjur_ActEmail = MyBase.Columns("jur_ActEmail")
            Me.columnjur_ActPaginaWeb = MyBase.Columns("jur_ActPaginaWeb")
            Me.columnjur_Comentario = MyBase.Columns("jur_Comentario")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdCliente = New Global.System.Data.DataColumn("IdCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCliente)
            Me.columnnat_NombreCliente = New Global.System.Data.DataColumn("nat_NombreCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_NombreCliente)
            Me.columnnat_DireccionCasa = New Global.System.Data.DataColumn("nat_DireccionCasa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_DireccionCasa)
            Me.columnnat_TelCasa = New Global.System.Data.DataColumn("nat_TelCasa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_TelCasa)
            Me.columnnat_TelMovil = New Global.System.Data.DataColumn("nat_TelMovil", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_TelMovil)
            Me.columnnat_EstadoCivil = New Global.System.Data.DataColumn("nat_EstadoCivil", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_EstadoCivil)
            Me.columnnat_TieneHijos = New Global.System.Data.DataColumn("nat_TieneHijos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_TieneHijos)
            Me.columnnat_NumHijos = New Global.System.Data.DataColumn("nat_NumHijos", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_NumHijos)
            Me.columnnat_EmailCasa = New Global.System.Data.DataColumn("nat_EmailCasa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_EmailCasa)
            Me.columnnat_PinBB = New Global.System.Data.DataColumn("nat_PinBB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_PinBB)
            Me.columnnat_Facebook = New Global.System.Data.DataColumn("nat_Facebook", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_Facebook)
            Me.columnnat_twitter = New Global.System.Data.DataColumn("nat_twitter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_twitter)
            Me.columnnat_Profesion = New Global.System.Data.DataColumn("nat_Profesion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_Profesion)
            Me.columnnat_LugarTrabajo = New Global.System.Data.DataColumn("nat_LugarTrabajo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_LugarTrabajo)
            Me.columnnat_Cargo = New Global.System.Data.DataColumn("nat_Cargo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_Cargo)
            Me.columnnat_DireccionTrabajo = New Global.System.Data.DataColumn("nat_DireccionTrabajo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_DireccionTrabajo)
            Me.columnnat_TelTrabajo = New Global.System.Data.DataColumn("nat_TelTrabajo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_TelTrabajo)
            Me.columnnat_FaxTrabajo = New Global.System.Data.DataColumn("nat_FaxTrabajo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_FaxTrabajo)
            Me.columnnat_EmailTrabajo = New Global.System.Data.DataColumn("nat_EmailTrabajo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_EmailTrabajo)
            Me.columnnat_PaginaWeb = New Global.System.Data.DataColumn("nat_PaginaWeb", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_PaginaWeb)
            Me.columnnat_PreferenciaCobro = New Global.System.Data.DataColumn("nat_PreferenciaCobro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_PreferenciaCobro)
            Me.columnnat_ContactoCobro = New Global.System.Data.DataColumn("nat_ContactoCobro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_ContactoCobro)
            Me.columnnat_PreferenciaPago = New Global.System.Data.DataColumn("nat_PreferenciaPago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_PreferenciaPago)
            Me.columnnat_ClienteExistente = New Global.System.Data.DataColumn("nat_ClienteExistente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_ClienteExistente)
            Me.columnnat_ReferidoPor = New Global.System.Data.DataColumn("nat_ReferidoPor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_ReferidoPor)
            Me.columnnat_Hobbie = New Global.System.Data.DataColumn("nat_Hobbie", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_Hobbie)
            Me.columnnat_Deporte = New Global.System.Data.DataColumn("nat_Deporte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_Deporte)
            Me.columnnat_Religion = New Global.System.Data.DataColumn("nat_Religion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_Religion)
            Me.columnnat_Comida = New Global.System.Data.DataColumn("nat_Comida", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_Comida)
            Me.columnnat_Musica = New Global.System.Data.DataColumn("nat_Musica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_Musica)
            Me.columnnat_Bebida = New Global.System.Data.DataColumn("nat_Bebida", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_Bebida)
            Me.columnnat_MedioInformacion = New Global.System.Data.DataColumn("nat_MedioInformacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_MedioInformacion)
            Me.columnnat_Cesion = New Global.System.Data.DataColumn("nat_Cesion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_Cesion)
            Me.columnnat_CompletaFormulario = New Global.System.Data.DataColumn("nat_CompletaFormulario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_CompletaFormulario)
            Me.columnnat_FechaFormulario = New Global.System.Data.DataColumn("nat_FechaFormulario", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_FechaFormulario)
            Me.columnnat_Comentarios = New Global.System.Data.DataColumn("nat_Comentarios", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnat_Comentarios)
            Me.columnjur_NombreEmpresa = New Global.System.Data.DataColumn("jur_NombreEmpresa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_NombreEmpresa)
            Me.columnjur_Giro = New Global.System.Data.DataColumn("jur_Giro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_Giro)
            Me.columnjur_RepresentanteLegal = New Global.System.Data.DataColumn("jur_RepresentanteLegal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_RepresentanteLegal)
            Me.columnjur_PinBB = New Global.System.Data.DataColumn("jur_PinBB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_PinBB)
            Me.columnjur_TelMovil = New Global.System.Data.DataColumn("jur_TelMovil", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_TelMovil)
            Me.columnjur_Profesion = New Global.System.Data.DataColumn("jur_Profesion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_Profesion)
            Me.columnjur_EncargadoPoliza = New Global.System.Data.DataColumn("jur_EncargadoPoliza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_EncargadoPoliza)
            Me.columnjur_DireccionOficina = New Global.System.Data.DataColumn("jur_DireccionOficina", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_DireccionOficina)
            Me.columnjur_TelOficina = New Global.System.Data.DataColumn("jur_TelOficina", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_TelOficina)
            Me.columnjur_FaxOficina = New Global.System.Data.DataColumn("jur_FaxOficina", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_FaxOficina)
            Me.columnjur_Email = New Global.System.Data.DataColumn("jur_Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_Email)
            Me.columnjur_PolPinBB = New Global.System.Data.DataColumn("jur_PolPinBB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_PolPinBB)
            Me.columnjur_PaginaWeb = New Global.System.Data.DataColumn("jur_PaginaWeb", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_PaginaWeb)
            Me.columnjur_Facebook = New Global.System.Data.DataColumn("jur_Facebook", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_Facebook)
            Me.columnjur_Twitter = New Global.System.Data.DataColumn("jur_Twitter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_Twitter)
            Me.columnjur_ContactoCobro = New Global.System.Data.DataColumn("jur_ContactoCobro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_ContactoCobro)
            Me.columnjur_CobroTelefono = New Global.System.Data.DataColumn("jur_CobroTelefono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_CobroTelefono)
            Me.columnjur_CobroFax = New Global.System.Data.DataColumn("jur_CobroFax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_CobroFax)
            Me.columnjur_CobroEmail = New Global.System.Data.DataColumn("jur_CobroEmail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_CobroEmail)
            Me.columnjur_ClienteExiste = New Global.System.Data.DataColumn("jur_ClienteExiste", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_ClienteExiste)
            Me.columnjur_ReferidoPor = New Global.System.Data.DataColumn("jur_ReferidoPor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_ReferidoPor)
            Me.columnjur_FormaPago = New Global.System.Data.DataColumn("jur_FormaPago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_FormaPago)
            Me.columnjur_Pagador = New Global.System.Data.DataColumn("jur_Pagador", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_Pagador)
            Me.columnjur_Cesion = New Global.System.Data.DataColumn("jur_Cesion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_Cesion)
            Me.columnjur_ActDireccion = New Global.System.Data.DataColumn("jur_ActDireccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_ActDireccion)
            Me.columnjur_ActTelefonos = New Global.System.Data.DataColumn("jur_ActTelefonos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_ActTelefonos)
            Me.columnjur_ActFax = New Global.System.Data.DataColumn("jur_ActFax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_ActFax)
            Me.columnjur_ActEmail = New Global.System.Data.DataColumn("jur_ActEmail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_ActEmail)
            Me.columnjur_ActPaginaWeb = New Global.System.Data.DataColumn("jur_ActPaginaWeb", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_ActPaginaWeb)
            Me.columnjur_Comentario = New Global.System.Data.DataColumn("jur_Comentario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjur_Comentario)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIdCliente}, true))
            Me.columnIdCliente.AllowDBNull = false
            Me.columnIdCliente.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewClientesEspecialRow() As ClientesEspecialRow
            Return CType(Me.NewRow,ClientesEspecialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ClientesEspecialRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ClientesEspecialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClientesEspecialRowChangedEvent) Is Nothing) Then
                RaiseEvent ClientesEspecialRowChanged(Me, New ClientesEspecialRowChangeEvent(CType(e.Row,ClientesEspecialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClientesEspecialRowChangingEvent) Is Nothing) Then
                RaiseEvent ClientesEspecialRowChanging(Me, New ClientesEspecialRowChangeEvent(CType(e.Row,ClientesEspecialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClientesEspecialRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClientesEspecialRowDeleted(Me, New ClientesEspecialRowChangeEvent(CType(e.Row,ClientesEspecialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClientesEspecialRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClientesEspecialRowDeleting(Me, New ClientesEspecialRowChangeEvent(CType(e.Row,ClientesEspecialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveClientesEspecialRow(ByVal row As ClientesEspecialRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsClientes = New dsClientes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ClientesEspecialDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ClientesCamposDataTable
        Inherits Global.System.Data.TypedTableBase(Of ClientesCamposRow)
        
        Private columnIdCliente As Global.System.Data.DataColumn
        
        Private columnIdCampo As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ClientesCampos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCampoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCampo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClientesCamposRow
            Get
                Return CType(Me.Rows(index),ClientesCamposRow)
            End Get
        End Property
        
        Public Event ClientesCamposRowChanging As ClientesCamposRowChangeEventHandler
        
        Public Event ClientesCamposRowChanged As ClientesCamposRowChangeEventHandler
        
        Public Event ClientesCamposRowDeleting As ClientesCamposRowChangeEventHandler
        
        Public Event ClientesCamposRowDeleted As ClientesCamposRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddClientesCamposRow(ByVal row As ClientesCamposRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddClientesCamposRow(ByVal parentClientesRowByClientes_ClientesCampos As ClientesRow, ByVal IdCampo As Integer, ByVal Nombre As String, ByVal Descripcion As String) As ClientesCamposRow
            Dim rowClientesCamposRow As ClientesCamposRow = CType(Me.NewRow,ClientesCamposRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, IdCampo, Nombre, Descripcion}
            If (Not (parentClientesRowByClientes_ClientesCampos) Is Nothing) Then
                columnValuesArray(0) = parentClientesRowByClientes_ClientesCampos(0)
            End If
            rowClientesCamposRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowClientesCamposRow)
            Return rowClientesCamposRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ClientesCamposDataTable = CType(MyBase.Clone,ClientesCamposDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ClientesCamposDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdCliente = MyBase.Columns("IdCliente")
            Me.columnIdCampo = MyBase.Columns("IdCampo")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdCliente = New Global.System.Data.DataColumn("IdCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCliente)
            Me.columnIdCampo = New Global.System.Data.DataColumn("IdCampo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCampo)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewClientesCamposRow() As ClientesCamposRow
            Return CType(Me.NewRow,ClientesCamposRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ClientesCamposRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ClientesCamposRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClientesCamposRowChangedEvent) Is Nothing) Then
                RaiseEvent ClientesCamposRowChanged(Me, New ClientesCamposRowChangeEvent(CType(e.Row,ClientesCamposRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClientesCamposRowChangingEvent) Is Nothing) Then
                RaiseEvent ClientesCamposRowChanging(Me, New ClientesCamposRowChangeEvent(CType(e.Row,ClientesCamposRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClientesCamposRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClientesCamposRowDeleted(Me, New ClientesCamposRowChangeEvent(CType(e.Row,ClientesCamposRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClientesCamposRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClientesCamposRowDeleting(Me, New ClientesCamposRowChangeEvent(CType(e.Row,ClientesCamposRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveClientesCamposRow(ByVal row As ClientesCamposRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsClientes = New dsClientes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ClientesCamposDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OfertasDataTable
        Inherits Global.System.Data.TypedTableBase(Of OfertasRow)
        
        Private columnIdOferta As Global.System.Data.DataColumn
        
        Private columnNombreCliente As Global.System.Data.DataColumn
        
        Private columnReferidoPor As Global.System.Data.DataColumn
        
        Private columnProducto As Global.System.Data.DataColumn
        
        Private columnSumaAsegurada As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Ofertas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdOfertaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdOferta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferidoPorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferidoPor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumaAseguradaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumaAsegurada
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OfertasRow
            Get
                Return CType(Me.Rows(index),OfertasRow)
            End Get
        End Property
        
        Public Event OfertasRowChanging As OfertasRowChangeEventHandler
        
        Public Event OfertasRowChanged As OfertasRowChangeEventHandler
        
        Public Event OfertasRowDeleting As OfertasRowChangeEventHandler
        
        Public Event OfertasRowDeleted As OfertasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOfertasRow(ByVal row As OfertasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOfertasRow(ByVal IdOferta As String, ByVal NombreCliente As String, ByVal ReferidoPor As String, ByVal Producto As String, ByVal SumaAsegurada As Double, ByVal Total As Double) As OfertasRow
            Dim rowOfertasRow As OfertasRow = CType(Me.NewRow,OfertasRow)
            Dim columnValuesArray() As Object = New Object() {IdOferta, NombreCliente, ReferidoPor, Producto, SumaAsegurada, Total}
            rowOfertasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOfertasRow)
            Return rowOfertasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OfertasDataTable = CType(MyBase.Clone,OfertasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OfertasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdOferta = MyBase.Columns("IdOferta")
            Me.columnNombreCliente = MyBase.Columns("NombreCliente")
            Me.columnReferidoPor = MyBase.Columns("ReferidoPor")
            Me.columnProducto = MyBase.Columns("Producto")
            Me.columnSumaAsegurada = MyBase.Columns("SumaAsegurada")
            Me.columnTotal = MyBase.Columns("Total")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdOferta = New Global.System.Data.DataColumn("IdOferta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdOferta)
            Me.columnNombreCliente = New Global.System.Data.DataColumn("NombreCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCliente)
            Me.columnReferidoPor = New Global.System.Data.DataColumn("ReferidoPor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferidoPor)
            Me.columnProducto = New Global.System.Data.DataColumn("Producto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProducto)
            Me.columnSumaAsegurada = New Global.System.Data.DataColumn("SumaAsegurada", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumaAsegurada)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOfertasRow() As OfertasRow
            Return CType(Me.NewRow,OfertasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OfertasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OfertasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OfertasRowChangedEvent) Is Nothing) Then
                RaiseEvent OfertasRowChanged(Me, New OfertasRowChangeEvent(CType(e.Row,OfertasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OfertasRowChangingEvent) Is Nothing) Then
                RaiseEvent OfertasRowChanging(Me, New OfertasRowChangeEvent(CType(e.Row,OfertasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OfertasRowDeletedEvent) Is Nothing) Then
                RaiseEvent OfertasRowDeleted(Me, New OfertasRowChangeEvent(CType(e.Row,OfertasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OfertasRowDeletingEvent) Is Nothing) Then
                RaiseEvent OfertasRowDeleting(Me, New OfertasRowChangeEvent(CType(e.Row,OfertasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOfertasRow(ByVal row As OfertasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsClientes = New dsClientes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OfertasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ClientesRow
        Inherits Global.System.Data.DataRow
        
        Private tableClientes As ClientesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableClientes = CType(Me.Table,ClientesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.IdClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCliente' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.IdClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.NombreClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NombreCliente' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.NombreClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nit() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.NitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nit' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.NitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dui() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.DuiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dui' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.DuiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegistroFiscal() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.RegistroFiscalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RegistroFiscal' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.RegistroFiscalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Giro() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.GiroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Giro' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.GiroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaNacimiento() As Date
            Get
                Try 
                    Return CType(Me(Me.tableClientes.FechaNacimientoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaNacimiento' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.FechaNacimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Email' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fax() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.FaxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fax' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.FaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdTipoCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.IdTipoClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdTipoCliente' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.IdTipoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EjecutivoCta() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.EjecutivoCtaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EjecutivoCta' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.EjecutivoCtaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LugarTrabajo() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.LugarTrabajoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LugarTrabajo' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.LugarTrabajoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreRepLegal() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.NombreRepLegalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NombreRepLegal' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.NombreRepLegalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NitRepLegal() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.NitRepLegalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NitRepLegal' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.NitRepLegalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelRepLegal() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.TelRepLegalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TelRepLegal' in table 'Clientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.TelRepLegalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdClienteNull() As Boolean
            Return Me.IsNull(Me.tableClientes.IdClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdClienteNull()
            Me(Me.tableClientes.IdClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreClienteNull() As Boolean
            Return Me.IsNull(Me.tableClientes.NombreClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreClienteNull()
            Me(Me.tableClientes.NombreClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNitNull() As Boolean
            Return Me.IsNull(Me.tableClientes.NitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNitNull()
            Me(Me.tableClientes.NitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDuiNull() As Boolean
            Return Me.IsNull(Me.tableClientes.DuiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDuiNull()
            Me(Me.tableClientes.DuiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegistroFiscalNull() As Boolean
            Return Me.IsNull(Me.tableClientes.RegistroFiscalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegistroFiscalNull()
            Me(Me.tableClientes.RegistroFiscalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGiroNull() As Boolean
            Return Me.IsNull(Me.tableClientes.GiroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGiroNull()
            Me(Me.tableClientes.GiroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNacimientoNull() As Boolean
            Return Me.IsNull(Me.tableClientes.FechaNacimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNacimientoNull()
            Me(Me.tableClientes.FechaNacimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tableClientes.EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailNull()
            Me(Me.tableClientes.EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaxNull() As Boolean
            Return Me.IsNull(Me.tableClientes.FaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaxNull()
            Me(Me.tableClientes.FaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdTipoClienteNull() As Boolean
            Return Me.IsNull(Me.tableClientes.IdTipoClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdTipoClienteNull()
            Me(Me.tableClientes.IdTipoClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEjecutivoCtaNull() As Boolean
            Return Me.IsNull(Me.tableClientes.EjecutivoCtaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEjecutivoCtaNull()
            Me(Me.tableClientes.EjecutivoCtaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLugarTrabajoNull() As Boolean
            Return Me.IsNull(Me.tableClientes.LugarTrabajoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLugarTrabajoNull()
            Me(Me.tableClientes.LugarTrabajoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreRepLegalNull() As Boolean
            Return Me.IsNull(Me.tableClientes.NombreRepLegalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreRepLegalNull()
            Me(Me.tableClientes.NombreRepLegalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNitRepLegalNull() As Boolean
            Return Me.IsNull(Me.tableClientes.NitRepLegalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNitRepLegalNull()
            Me(Me.tableClientes.NitRepLegalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelRepLegalNull() As Boolean
            Return Me.IsNull(Me.tableClientes.TelRepLegalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelRepLegalNull()
            Me(Me.tableClientes.TelRepLegalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetClientesContactosRows() As ClientesContactosRow()
            If (Me.Table.ChildRelations("Clientes_ClientesContactos") Is Nothing) Then
                Return New ClientesContactosRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Clientes_ClientesContactos")),ClientesContactosRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetClientesPolizasRows() As ClientesPolizasRow()
            If (Me.Table.ChildRelations("Clientes_ClientesPolizas") Is Nothing) Then
                Return New ClientesPolizasRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Clientes_ClientesPolizas")),ClientesPolizasRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetClientesCamposRows() As ClientesCamposRow()
            If (Me.Table.ChildRelations("Clientes_ClientesCampos") Is Nothing) Then
                Return New ClientesCamposRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Clientes_ClientesCampos")),ClientesCamposRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ClientesContactosRow
        Inherits Global.System.Data.DataRow
        
        Private tableClientesContactos As ClientesContactosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableClientesContactos = CType(Me.Table,ClientesContactosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesContactos.IdClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCliente' in table 'ClientesContactos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesContactos.IdClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdContacto() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableClientesContactos.IdContactoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdContacto' in table 'ClientesContactos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesContactos.IdContactoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesContactos.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'ClientesContactos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesContactos.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesContactos.TelefonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telefono' in table 'ClientesContactos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesContactos.TelefonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Direccion() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesContactos.DireccionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Direccion' in table 'ClientesContactos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesContactos.DireccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ciudad() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesContactos.CiudadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ciudad' in table 'ClientesContactos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesContactos.CiudadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cargo() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesContactos.CargoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cargo' in table 'ClientesContactos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesContactos.CargoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsoCorrespondencia() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesContactos.UsoCorrespondenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UsoCorrespondencia' in table 'ClientesContactos' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesContactos.UsoCorrespondenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientesRow() As ClientesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Clientes_ClientesContactos")),ClientesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Clientes_ClientesContactos"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdClienteNull() As Boolean
            Return Me.IsNull(Me.tableClientesContactos.IdClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdClienteNull()
            Me(Me.tableClientesContactos.IdClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdContactoNull() As Boolean
            Return Me.IsNull(Me.tableClientesContactos.IdContactoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdContactoNull()
            Me(Me.tableClientesContactos.IdContactoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tableClientesContactos.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tableClientesContactos.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoNull() As Boolean
            Return Me.IsNull(Me.tableClientesContactos.TelefonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoNull()
            Me(Me.tableClientesContactos.TelefonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDireccionNull() As Boolean
            Return Me.IsNull(Me.tableClientesContactos.DireccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDireccionNull()
            Me(Me.tableClientesContactos.DireccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCiudadNull() As Boolean
            Return Me.IsNull(Me.tableClientesContactos.CiudadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCiudadNull()
            Me(Me.tableClientesContactos.CiudadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCargoNull() As Boolean
            Return Me.IsNull(Me.tableClientesContactos.CargoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCargoNull()
            Me(Me.tableClientesContactos.CargoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsoCorrespondenciaNull() As Boolean
            Return Me.IsNull(Me.tableClientesContactos.UsoCorrespondenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsoCorrespondenciaNull()
            Me(Me.tableClientesContactos.UsoCorrespondenciaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ImagenesRow
        Inherits Global.System.Data.DataRow
        
        Private tableImagenes As ImagenesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableImagenes = CType(Me.Table,ImagenesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Logo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableImagenes.LogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Logo' in table 'Imagenes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImagenes.LogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sello() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableImagenes.SelloColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sello' in table 'Imagenes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImagenes.SelloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Logo2() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableImagenes.Logo2Column),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Logo2' in table 'Imagenes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImagenes.Logo2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogoNull() As Boolean
            Return Me.IsNull(Me.tableImagenes.LogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogoNull()
            Me(Me.tableImagenes.LogoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSelloNull() As Boolean
            Return Me.IsNull(Me.tableImagenes.SelloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSelloNull()
            Me(Me.tableImagenes.SelloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogo2Null() As Boolean
            Return Me.IsNull(Me.tableImagenes.Logo2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogo2Null()
            Me(Me.tableImagenes.Logo2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ClientesPolizasRow
        Inherits Global.System.Data.DataRow
        
        Private tableClientesPolizas As ClientesPolizasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableClientesPolizas = CType(Me.Table,ClientesPolizasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesPolizas.IdClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCliente' in table 'ClientesPolizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesPolizas.IdClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Aseguradora() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesPolizas.AseguradoraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Aseguradora' in table 'ClientesPolizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesPolizas.AseguradoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Poliza() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesPolizas.PolizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Poliza' in table 'ClientesPolizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesPolizas.PolizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AvisoCobro() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesPolizas.AvisoCobroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AvisoCobro' in table 'ClientesPolizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesPolizas.AvisoCobroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tarjeta() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesPolizas.TarjetaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tarjeta' in table 'ClientesPolizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesPolizas.TarjetaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Producto() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesPolizas.ProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Producto' in table 'ClientesPolizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesPolizas.ProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VenceTarjeta() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesPolizas.VenceTarjetaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VenceTarjeta' in table 'ClientesPolizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesPolizas.VenceTarjetaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientesRow() As ClientesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Clientes_ClientesPolizas")),ClientesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Clientes_ClientesPolizas"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdClienteNull() As Boolean
            Return Me.IsNull(Me.tableClientesPolizas.IdClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdClienteNull()
            Me(Me.tableClientesPolizas.IdClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAseguradoraNull() As Boolean
            Return Me.IsNull(Me.tableClientesPolizas.AseguradoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAseguradoraNull()
            Me(Me.tableClientesPolizas.AseguradoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPolizaNull() As Boolean
            Return Me.IsNull(Me.tableClientesPolizas.PolizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPolizaNull()
            Me(Me.tableClientesPolizas.PolizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAvisoCobroNull() As Boolean
            Return Me.IsNull(Me.tableClientesPolizas.AvisoCobroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAvisoCobroNull()
            Me(Me.tableClientesPolizas.AvisoCobroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTarjetaNull() As Boolean
            Return Me.IsNull(Me.tableClientesPolizas.TarjetaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTarjetaNull()
            Me(Me.tableClientesPolizas.TarjetaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductoNull() As Boolean
            Return Me.IsNull(Me.tableClientesPolizas.ProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductoNull()
            Me(Me.tableClientesPolizas.ProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVenceTarjetaNull() As Boolean
            Return Me.IsNull(Me.tableClientesPolizas.VenceTarjetaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVenceTarjetaNull()
            Me(Me.tableClientesPolizas.VenceTarjetaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ClientesEspecialRow
        Inherits Global.System.Data.DataRow
        
        Private tableClientesEspecial As ClientesEspecialDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableClientesEspecial = CType(Me.Table,ClientesEspecialDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCliente() As String
            Get
                Return CType(Me(Me.tableClientesEspecial.IdClienteColumn),String)
            End Get
            Set
                Me(Me.tableClientesEspecial.IdClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_NombreCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_NombreClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_NombreCliente' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_NombreClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_DireccionCasa() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_DireccionCasaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_DireccionCasa' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_DireccionCasaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_TelCasa() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_TelCasaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_TelCasa' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_TelCasaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_TelMovil() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_TelMovilColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_TelMovil' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_TelMovilColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_EstadoCivil() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_EstadoCivilColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_EstadoCivil' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_EstadoCivilColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_TieneHijos() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_TieneHijosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_TieneHijos' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_TieneHijosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_NumHijos() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_NumHijosColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_NumHijos' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_NumHijosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_EmailCasa() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_EmailCasaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_EmailCasa' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_EmailCasaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_PinBB() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_PinBBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_PinBB' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_PinBBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_Facebook() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_FacebookColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_Facebook' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_FacebookColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_twitter() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_twitterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_twitter' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_twitterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_Profesion() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_ProfesionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_Profesion' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_ProfesionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_LugarTrabajo() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_LugarTrabajoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_LugarTrabajo' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_LugarTrabajoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_Cargo() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_CargoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_Cargo' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_CargoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_DireccionTrabajo() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_DireccionTrabajoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_DireccionTrabajo' in table 'ClientesEspecial' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_DireccionTrabajoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_TelTrabajo() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_TelTrabajoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_TelTrabajo' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_TelTrabajoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_FaxTrabajo() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_FaxTrabajoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_FaxTrabajo' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_FaxTrabajoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_EmailTrabajo() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_EmailTrabajoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_EmailTrabajo' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_EmailTrabajoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_PaginaWeb() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_PaginaWebColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_PaginaWeb' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_PaginaWebColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_PreferenciaCobro() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_PreferenciaCobroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_PreferenciaCobro' in table 'ClientesEspecial' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_PreferenciaCobroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_ContactoCobro() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_ContactoCobroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_ContactoCobro' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_ContactoCobroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_PreferenciaPago() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_PreferenciaPagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_PreferenciaPago' in table 'ClientesEspecial' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_PreferenciaPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_ClienteExistente() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_ClienteExistenteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_ClienteExistente' in table 'ClientesEspecial' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_ClienteExistenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_ReferidoPor() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_ReferidoPorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_ReferidoPor' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_ReferidoPorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_Hobbie() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_HobbieColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_Hobbie' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_HobbieColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_Deporte() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_DeporteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_Deporte' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_DeporteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_Religion() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_ReligionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_Religion' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_ReligionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_Comida() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_ComidaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_Comida' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_ComidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_Musica() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_MusicaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_Musica' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_MusicaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_Bebida() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_BebidaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_Bebida' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_BebidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_MedioInformacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_MedioInformacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_MedioInformacion' in table 'ClientesEspecial' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_MedioInformacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_Cesion() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_CesionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_Cesion' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_CesionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_CompletaFormulario() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_CompletaFormularioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_CompletaFormulario' in table 'ClientesEspecial' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_CompletaFormularioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_FechaFormulario() As Date
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_FechaFormularioColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_FechaFormulario' in table 'ClientesEspecial' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_FechaFormularioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nat_Comentarios() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.nat_ComentariosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nat_Comentarios' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.nat_ComentariosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_NombreEmpresa() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_NombreEmpresaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_NombreEmpresa' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_NombreEmpresaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_Giro() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_GiroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_Giro' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_GiroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_RepresentanteLegal() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_RepresentanteLegalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_RepresentanteLegal' in table 'ClientesEspecial' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_RepresentanteLegalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_PinBB() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_PinBBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_PinBB' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_PinBBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_TelMovil() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_TelMovilColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_TelMovil' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_TelMovilColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_Profesion() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_ProfesionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_Profesion' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_ProfesionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_EncargadoPoliza() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_EncargadoPolizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_EncargadoPoliza' in table 'ClientesEspecial' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_EncargadoPolizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_DireccionOficina() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_DireccionOficinaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_DireccionOficina' in table 'ClientesEspecial' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_DireccionOficinaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_TelOficina() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_TelOficinaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_TelOficina' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_TelOficinaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_FaxOficina() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_FaxOficinaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_FaxOficina' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_FaxOficinaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_Email() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_Email' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_PolPinBB() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_PolPinBBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_PolPinBB' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_PolPinBBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_PaginaWeb() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_PaginaWebColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_PaginaWeb' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_PaginaWebColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_Facebook() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_FacebookColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_Facebook' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_FacebookColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_Twitter() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_TwitterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_Twitter' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_TwitterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_ContactoCobro() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_ContactoCobroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_ContactoCobro' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_ContactoCobroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_CobroTelefono() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_CobroTelefonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_CobroTelefono' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_CobroTelefonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_CobroFax() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_CobroFaxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_CobroFax' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_CobroFaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_CobroEmail() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_CobroEmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_CobroEmail' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_CobroEmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_ClienteExiste() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_ClienteExisteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_ClienteExiste' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_ClienteExisteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_ReferidoPor() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_ReferidoPorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_ReferidoPor' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_ReferidoPorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_FormaPago() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_FormaPagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_FormaPago' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_FormaPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_Pagador() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_PagadorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_Pagador' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_PagadorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_Cesion() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_CesionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_Cesion' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_CesionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_ActDireccion() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_ActDireccionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_ActDireccion' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_ActDireccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_ActTelefonos() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_ActTelefonosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_ActTelefonos' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_ActTelefonosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_ActFax() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_ActFaxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_ActFax' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_ActFaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_ActEmail() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_ActEmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_ActEmail' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_ActEmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_ActPaginaWeb() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_ActPaginaWebColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_ActPaginaWeb' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_ActPaginaWebColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jur_Comentario() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesEspecial.jur_ComentarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jur_Comentario' in table 'ClientesEspecial' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesEspecial.jur_ComentarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_NombreClienteNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_NombreClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_NombreClienteNull()
            Me(Me.tableClientesEspecial.nat_NombreClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_DireccionCasaNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_DireccionCasaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_DireccionCasaNull()
            Me(Me.tableClientesEspecial.nat_DireccionCasaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_TelCasaNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_TelCasaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_TelCasaNull()
            Me(Me.tableClientesEspecial.nat_TelCasaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_TelMovilNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_TelMovilColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_TelMovilNull()
            Me(Me.tableClientesEspecial.nat_TelMovilColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_EstadoCivilNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_EstadoCivilColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_EstadoCivilNull()
            Me(Me.tableClientesEspecial.nat_EstadoCivilColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_TieneHijosNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_TieneHijosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_TieneHijosNull()
            Me(Me.tableClientesEspecial.nat_TieneHijosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_NumHijosNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_NumHijosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_NumHijosNull()
            Me(Me.tableClientesEspecial.nat_NumHijosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_EmailCasaNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_EmailCasaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_EmailCasaNull()
            Me(Me.tableClientesEspecial.nat_EmailCasaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_PinBBNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_PinBBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_PinBBNull()
            Me(Me.tableClientesEspecial.nat_PinBBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_FacebookNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_FacebookColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_FacebookNull()
            Me(Me.tableClientesEspecial.nat_FacebookColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_twitterNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_twitterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_twitterNull()
            Me(Me.tableClientesEspecial.nat_twitterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_ProfesionNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_ProfesionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_ProfesionNull()
            Me(Me.tableClientesEspecial.nat_ProfesionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_LugarTrabajoNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_LugarTrabajoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_LugarTrabajoNull()
            Me(Me.tableClientesEspecial.nat_LugarTrabajoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_CargoNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_CargoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_CargoNull()
            Me(Me.tableClientesEspecial.nat_CargoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_DireccionTrabajoNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_DireccionTrabajoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_DireccionTrabajoNull()
            Me(Me.tableClientesEspecial.nat_DireccionTrabajoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_TelTrabajoNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_TelTrabajoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_TelTrabajoNull()
            Me(Me.tableClientesEspecial.nat_TelTrabajoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_FaxTrabajoNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_FaxTrabajoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_FaxTrabajoNull()
            Me(Me.tableClientesEspecial.nat_FaxTrabajoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_EmailTrabajoNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_EmailTrabajoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_EmailTrabajoNull()
            Me(Me.tableClientesEspecial.nat_EmailTrabajoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_PaginaWebNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_PaginaWebColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_PaginaWebNull()
            Me(Me.tableClientesEspecial.nat_PaginaWebColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_PreferenciaCobroNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_PreferenciaCobroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_PreferenciaCobroNull()
            Me(Me.tableClientesEspecial.nat_PreferenciaCobroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_ContactoCobroNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_ContactoCobroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_ContactoCobroNull()
            Me(Me.tableClientesEspecial.nat_ContactoCobroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_PreferenciaPagoNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_PreferenciaPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_PreferenciaPagoNull()
            Me(Me.tableClientesEspecial.nat_PreferenciaPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_ClienteExistenteNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_ClienteExistenteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_ClienteExistenteNull()
            Me(Me.tableClientesEspecial.nat_ClienteExistenteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_ReferidoPorNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_ReferidoPorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_ReferidoPorNull()
            Me(Me.tableClientesEspecial.nat_ReferidoPorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_HobbieNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_HobbieColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_HobbieNull()
            Me(Me.tableClientesEspecial.nat_HobbieColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_DeporteNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_DeporteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_DeporteNull()
            Me(Me.tableClientesEspecial.nat_DeporteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_ReligionNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_ReligionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_ReligionNull()
            Me(Me.tableClientesEspecial.nat_ReligionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_ComidaNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_ComidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_ComidaNull()
            Me(Me.tableClientesEspecial.nat_ComidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_MusicaNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_MusicaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_MusicaNull()
            Me(Me.tableClientesEspecial.nat_MusicaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_BebidaNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_BebidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_BebidaNull()
            Me(Me.tableClientesEspecial.nat_BebidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_MedioInformacionNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_MedioInformacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_MedioInformacionNull()
            Me(Me.tableClientesEspecial.nat_MedioInformacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_CesionNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_CesionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_CesionNull()
            Me(Me.tableClientesEspecial.nat_CesionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_CompletaFormularioNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_CompletaFormularioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_CompletaFormularioNull()
            Me(Me.tableClientesEspecial.nat_CompletaFormularioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_FechaFormularioNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_FechaFormularioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_FechaFormularioNull()
            Me(Me.tableClientesEspecial.nat_FechaFormularioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnat_ComentariosNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.nat_ComentariosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnat_ComentariosNull()
            Me(Me.tableClientesEspecial.nat_ComentariosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_NombreEmpresaNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_NombreEmpresaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_NombreEmpresaNull()
            Me(Me.tableClientesEspecial.jur_NombreEmpresaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_GiroNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_GiroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_GiroNull()
            Me(Me.tableClientesEspecial.jur_GiroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_RepresentanteLegalNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_RepresentanteLegalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_RepresentanteLegalNull()
            Me(Me.tableClientesEspecial.jur_RepresentanteLegalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_PinBBNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_PinBBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_PinBBNull()
            Me(Me.tableClientesEspecial.jur_PinBBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_TelMovilNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_TelMovilColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_TelMovilNull()
            Me(Me.tableClientesEspecial.jur_TelMovilColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_ProfesionNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_ProfesionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_ProfesionNull()
            Me(Me.tableClientesEspecial.jur_ProfesionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_EncargadoPolizaNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_EncargadoPolizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_EncargadoPolizaNull()
            Me(Me.tableClientesEspecial.jur_EncargadoPolizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_DireccionOficinaNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_DireccionOficinaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_DireccionOficinaNull()
            Me(Me.tableClientesEspecial.jur_DireccionOficinaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_TelOficinaNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_TelOficinaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_TelOficinaNull()
            Me(Me.tableClientesEspecial.jur_TelOficinaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_FaxOficinaNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_FaxOficinaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_FaxOficinaNull()
            Me(Me.tableClientesEspecial.jur_FaxOficinaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_EmailNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_EmailNull()
            Me(Me.tableClientesEspecial.jur_EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_PolPinBBNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_PolPinBBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_PolPinBBNull()
            Me(Me.tableClientesEspecial.jur_PolPinBBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_PaginaWebNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_PaginaWebColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_PaginaWebNull()
            Me(Me.tableClientesEspecial.jur_PaginaWebColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_FacebookNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_FacebookColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_FacebookNull()
            Me(Me.tableClientesEspecial.jur_FacebookColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_TwitterNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_TwitterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_TwitterNull()
            Me(Me.tableClientesEspecial.jur_TwitterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_ContactoCobroNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_ContactoCobroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_ContactoCobroNull()
            Me(Me.tableClientesEspecial.jur_ContactoCobroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_CobroTelefonoNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_CobroTelefonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_CobroTelefonoNull()
            Me(Me.tableClientesEspecial.jur_CobroTelefonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_CobroFaxNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_CobroFaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_CobroFaxNull()
            Me(Me.tableClientesEspecial.jur_CobroFaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_CobroEmailNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_CobroEmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_CobroEmailNull()
            Me(Me.tableClientesEspecial.jur_CobroEmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_ClienteExisteNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_ClienteExisteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_ClienteExisteNull()
            Me(Me.tableClientesEspecial.jur_ClienteExisteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_ReferidoPorNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_ReferidoPorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_ReferidoPorNull()
            Me(Me.tableClientesEspecial.jur_ReferidoPorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_FormaPagoNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_FormaPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_FormaPagoNull()
            Me(Me.tableClientesEspecial.jur_FormaPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_PagadorNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_PagadorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_PagadorNull()
            Me(Me.tableClientesEspecial.jur_PagadorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_CesionNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_CesionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_CesionNull()
            Me(Me.tableClientesEspecial.jur_CesionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_ActDireccionNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_ActDireccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_ActDireccionNull()
            Me(Me.tableClientesEspecial.jur_ActDireccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_ActTelefonosNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_ActTelefonosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_ActTelefonosNull()
            Me(Me.tableClientesEspecial.jur_ActTelefonosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_ActFaxNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_ActFaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_ActFaxNull()
            Me(Me.tableClientesEspecial.jur_ActFaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_ActEmailNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_ActEmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_ActEmailNull()
            Me(Me.tableClientesEspecial.jur_ActEmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_ActPaginaWebNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_ActPaginaWebColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_ActPaginaWebNull()
            Me(Me.tableClientesEspecial.jur_ActPaginaWebColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjur_ComentarioNull() As Boolean
            Return Me.IsNull(Me.tableClientesEspecial.jur_ComentarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjur_ComentarioNull()
            Me(Me.tableClientesEspecial.jur_ComentarioColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ClientesCamposRow
        Inherits Global.System.Data.DataRow
        
        Private tableClientesCampos As ClientesCamposDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableClientesCampos = CType(Me.Table,ClientesCamposDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesCampos.IdClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCliente' in table 'ClientesCampos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesCampos.IdClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCampo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableClientesCampos.IdCampoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCampo' in table 'ClientesCampos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesCampos.IdCampoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesCampos.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nombre' in table 'ClientesCampos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesCampos.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientesCampos.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'ClientesCampos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientesCampos.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientesRow() As ClientesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Clientes_ClientesCampos")),ClientesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Clientes_ClientesCampos"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdClienteNull() As Boolean
            Return Me.IsNull(Me.tableClientesCampos.IdClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdClienteNull()
            Me(Me.tableClientesCampos.IdClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdCampoNull() As Boolean
            Return Me.IsNull(Me.tableClientesCampos.IdCampoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdCampoNull()
            Me(Me.tableClientesCampos.IdCampoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tableClientesCampos.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tableClientesCampos.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableClientesCampos.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableClientesCampos.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OfertasRow
        Inherits Global.System.Data.DataRow
        
        Private tableOfertas As OfertasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOfertas = CType(Me.Table,OfertasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdOferta() As String
            Get
                Try 
                    Return CType(Me(Me.tableOfertas.IdOfertaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdOferta' in table 'Ofertas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOfertas.IdOfertaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableOfertas.NombreClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NombreCliente' in table 'Ofertas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOfertas.NombreClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReferidoPor() As String
            Get
                Try 
                    Return CType(Me(Me.tableOfertas.ReferidoPorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReferidoPor' in table 'Ofertas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOfertas.ReferidoPorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Producto() As String
            Get
                Try 
                    Return CType(Me(Me.tableOfertas.ProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Producto' in table 'Ofertas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOfertas.ProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumaAsegurada() As Double
            Get
                Try 
                    Return CType(Me(Me.tableOfertas.SumaAseguradaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumaAsegurada' in table 'Ofertas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOfertas.SumaAseguradaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As Double
            Get
                Try 
                    Return CType(Me(Me.tableOfertas.TotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total' in table 'Ofertas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOfertas.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdOfertaNull() As Boolean
            Return Me.IsNull(Me.tableOfertas.IdOfertaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdOfertaNull()
            Me(Me.tableOfertas.IdOfertaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreClienteNull() As Boolean
            Return Me.IsNull(Me.tableOfertas.NombreClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreClienteNull()
            Me(Me.tableOfertas.NombreClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReferidoPorNull() As Boolean
            Return Me.IsNull(Me.tableOfertas.ReferidoPorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReferidoPorNull()
            Me(Me.tableOfertas.ReferidoPorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductoNull() As Boolean
            Return Me.IsNull(Me.tableOfertas.ProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductoNull()
            Me(Me.tableOfertas.ProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumaAseguradaNull() As Boolean
            Return Me.IsNull(Me.tableOfertas.SumaAseguradaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumaAseguradaNull()
            Me(Me.tableOfertas.SumaAseguradaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableOfertas.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tableOfertas.TotalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ClientesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ClientesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ClientesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ClientesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ClientesContactosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ClientesContactosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ClientesContactosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ClientesContactosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ImagenesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ImagenesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ImagenesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ImagenesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ClientesPolizasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ClientesPolizasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ClientesPolizasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ClientesPolizasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ClientesEspecialRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ClientesEspecialRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ClientesEspecialRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ClientesEspecialRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ClientesCamposRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ClientesCamposRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ClientesCamposRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ClientesCamposRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OfertasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OfertasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OfertasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OfertasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
