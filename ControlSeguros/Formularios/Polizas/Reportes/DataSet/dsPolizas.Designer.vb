'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5420
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsPolizas"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsPolizas
    Inherits Global.System.Data.DataSet
    
    Private tableImagenes As ImagenesDataTable
    
    Private tablePolizas As PolizasDataTable
    
    Private tableCondiciones As CondicionesDataTable
    
    Private tableCertificados As CertificadosDataTable
    
    Private tableCoberturas As CoberturasDataTable
    
    Private tableBienes As BienesDataTable
    
    Private tableDatosAutos As DatosAutosDataTable
    
    Private tableBeneficiarios As BeneficiariosDataTable
    
    Private tableCesiones As CesionesDataTable
    
    Private relationPolizas_Condiciones As Global.System.Data.DataRelation
    
    Private relationPolizas_Certificados As Global.System.Data.DataRelation
    
    Private relationCertificados_Coberturas As Global.System.Data.DataRelation
    
    Private relationCertificados_Bienes As Global.System.Data.DataRelation
    
    Private relationPolizas_DatosAutos As Global.System.Data.DataRelation
    
    Private relationCertificados_Beneficiarios As Global.System.Data.DataRelation
    
    Private relationCertificados_Cesiones As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Imagenes")) Is Nothing) Then
                MyBase.Tables.Add(New ImagenesDataTable(ds.Tables("Imagenes")))
            End If
            If (Not (ds.Tables("Polizas")) Is Nothing) Then
                MyBase.Tables.Add(New PolizasDataTable(ds.Tables("Polizas")))
            End If
            If (Not (ds.Tables("Condiciones")) Is Nothing) Then
                MyBase.Tables.Add(New CondicionesDataTable(ds.Tables("Condiciones")))
            End If
            If (Not (ds.Tables("Certificados")) Is Nothing) Then
                MyBase.Tables.Add(New CertificadosDataTable(ds.Tables("Certificados")))
            End If
            If (Not (ds.Tables("Coberturas")) Is Nothing) Then
                MyBase.Tables.Add(New CoberturasDataTable(ds.Tables("Coberturas")))
            End If
            If (Not (ds.Tables("Bienes")) Is Nothing) Then
                MyBase.Tables.Add(New BienesDataTable(ds.Tables("Bienes")))
            End If
            If (Not (ds.Tables("DatosAutos")) Is Nothing) Then
                MyBase.Tables.Add(New DatosAutosDataTable(ds.Tables("DatosAutos")))
            End If
            If (Not (ds.Tables("Beneficiarios")) Is Nothing) Then
                MyBase.Tables.Add(New BeneficiariosDataTable(ds.Tables("Beneficiarios")))
            End If
            If (Not (ds.Tables("Cesiones")) Is Nothing) Then
                MyBase.Tables.Add(New CesionesDataTable(ds.Tables("Cesiones")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Imagenes() As ImagenesDataTable
        Get
            Return Me.tableImagenes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Polizas() As PolizasDataTable
        Get
            Return Me.tablePolizas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Condiciones() As CondicionesDataTable
        Get
            Return Me.tableCondiciones
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Certificados() As CertificadosDataTable
        Get
            Return Me.tableCertificados
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Coberturas() As CoberturasDataTable
        Get
            Return Me.tableCoberturas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Bienes() As BienesDataTable
        Get
            Return Me.tableBienes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DatosAutos() As DatosAutosDataTable
        Get
            Return Me.tableDatosAutos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Beneficiarios() As BeneficiariosDataTable
        Get
            Return Me.tableBeneficiarios
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Cesiones() As CesionesDataTable
        Get
            Return Me.tableCesiones
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsPolizas = CType(MyBase.Clone,dsPolizas)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Imagenes")) Is Nothing) Then
                MyBase.Tables.Add(New ImagenesDataTable(ds.Tables("Imagenes")))
            End If
            If (Not (ds.Tables("Polizas")) Is Nothing) Then
                MyBase.Tables.Add(New PolizasDataTable(ds.Tables("Polizas")))
            End If
            If (Not (ds.Tables("Condiciones")) Is Nothing) Then
                MyBase.Tables.Add(New CondicionesDataTable(ds.Tables("Condiciones")))
            End If
            If (Not (ds.Tables("Certificados")) Is Nothing) Then
                MyBase.Tables.Add(New CertificadosDataTable(ds.Tables("Certificados")))
            End If
            If (Not (ds.Tables("Coberturas")) Is Nothing) Then
                MyBase.Tables.Add(New CoberturasDataTable(ds.Tables("Coberturas")))
            End If
            If (Not (ds.Tables("Bienes")) Is Nothing) Then
                MyBase.Tables.Add(New BienesDataTable(ds.Tables("Bienes")))
            End If
            If (Not (ds.Tables("DatosAutos")) Is Nothing) Then
                MyBase.Tables.Add(New DatosAutosDataTable(ds.Tables("DatosAutos")))
            End If
            If (Not (ds.Tables("Beneficiarios")) Is Nothing) Then
                MyBase.Tables.Add(New BeneficiariosDataTable(ds.Tables("Beneficiarios")))
            End If
            If (Not (ds.Tables("Cesiones")) Is Nothing) Then
                MyBase.Tables.Add(New CesionesDataTable(ds.Tables("Cesiones")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableImagenes = CType(MyBase.Tables("Imagenes"),ImagenesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableImagenes) Is Nothing) Then
                Me.tableImagenes.InitVars
            End If
        End If
        Me.tablePolizas = CType(MyBase.Tables("Polizas"),PolizasDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePolizas) Is Nothing) Then
                Me.tablePolizas.InitVars
            End If
        End If
        Me.tableCondiciones = CType(MyBase.Tables("Condiciones"),CondicionesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCondiciones) Is Nothing) Then
                Me.tableCondiciones.InitVars
            End If
        End If
        Me.tableCertificados = CType(MyBase.Tables("Certificados"),CertificadosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCertificados) Is Nothing) Then
                Me.tableCertificados.InitVars
            End If
        End If
        Me.tableCoberturas = CType(MyBase.Tables("Coberturas"),CoberturasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCoberturas) Is Nothing) Then
                Me.tableCoberturas.InitVars
            End If
        End If
        Me.tableBienes = CType(MyBase.Tables("Bienes"),BienesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBienes) Is Nothing) Then
                Me.tableBienes.InitVars
            End If
        End If
        Me.tableDatosAutos = CType(MyBase.Tables("DatosAutos"),DatosAutosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDatosAutos) Is Nothing) Then
                Me.tableDatosAutos.InitVars
            End If
        End If
        Me.tableBeneficiarios = CType(MyBase.Tables("Beneficiarios"),BeneficiariosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBeneficiarios) Is Nothing) Then
                Me.tableBeneficiarios.InitVars
            End If
        End If
        Me.tableCesiones = CType(MyBase.Tables("Cesiones"),CesionesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCesiones) Is Nothing) Then
                Me.tableCesiones.InitVars
            End If
        End If
        Me.relationPolizas_Condiciones = Me.Relations("Polizas_Condiciones")
        Me.relationPolizas_Certificados = Me.Relations("Polizas_Certificados")
        Me.relationCertificados_Coberturas = Me.Relations("Certificados_Coberturas")
        Me.relationCertificados_Bienes = Me.Relations("Certificados_Bienes")
        Me.relationPolizas_DatosAutos = Me.Relations("Polizas_DatosAutos")
        Me.relationCertificados_Beneficiarios = Me.Relations("Certificados_Beneficiarios")
        Me.relationCertificados_Cesiones = Me.Relations("Certificados_Cesiones")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsPolizas"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsPolizas.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableImagenes = New ImagenesDataTable
        MyBase.Tables.Add(Me.tableImagenes)
        Me.tablePolizas = New PolizasDataTable
        MyBase.Tables.Add(Me.tablePolizas)
        Me.tableCondiciones = New CondicionesDataTable
        MyBase.Tables.Add(Me.tableCondiciones)
        Me.tableCertificados = New CertificadosDataTable
        MyBase.Tables.Add(Me.tableCertificados)
        Me.tableCoberturas = New CoberturasDataTable
        MyBase.Tables.Add(Me.tableCoberturas)
        Me.tableBienes = New BienesDataTable
        MyBase.Tables.Add(Me.tableBienes)
        Me.tableDatosAutos = New DatosAutosDataTable
        MyBase.Tables.Add(Me.tableDatosAutos)
        Me.tableBeneficiarios = New BeneficiariosDataTable
        MyBase.Tables.Add(Me.tableBeneficiarios)
        Me.tableCesiones = New CesionesDataTable
        MyBase.Tables.Add(Me.tableCesiones)
        Me.relationPolizas_Condiciones = New Global.System.Data.DataRelation("Polizas_Condiciones", New Global.System.Data.DataColumn() {Me.tablePolizas.IdPolizaColumn, Me.tablePolizas.ProductoColumn}, New Global.System.Data.DataColumn() {Me.tableCondiciones.IdPolizaColumn, Me.tableCondiciones.ProductoColumn}, false)
        Me.Relations.Add(Me.relationPolizas_Condiciones)
        Me.relationPolizas_Certificados = New Global.System.Data.DataRelation("Polizas_Certificados", New Global.System.Data.DataColumn() {Me.tablePolizas.IdPolizaColumn, Me.tablePolizas.ProductoColumn}, New Global.System.Data.DataColumn() {Me.tableCertificados.IdPolizaColumn, Me.tableCertificados.ProductoColumn}, false)
        Me.Relations.Add(Me.relationPolizas_Certificados)
        Me.relationCertificados_Coberturas = New Global.System.Data.DataRelation("Certificados_Coberturas", New Global.System.Data.DataColumn() {Me.tableCertificados.IdPolizaColumn, Me.tableCertificados.ProductoColumn, Me.tableCertificados.IdCertificadoColumn}, New Global.System.Data.DataColumn() {Me.tableCoberturas.IdPolizaColumn, Me.tableCoberturas.ProductoColumn, Me.tableCoberturas.IdCertificadoColumn}, false)
        Me.Relations.Add(Me.relationCertificados_Coberturas)
        Me.relationCertificados_Bienes = New Global.System.Data.DataRelation("Certificados_Bienes", New Global.System.Data.DataColumn() {Me.tableCertificados.IdPolizaColumn, Me.tableCertificados.ProductoColumn, Me.tableCertificados.IdCertificadoColumn}, New Global.System.Data.DataColumn() {Me.tableBienes.IdPolizaColumn, Me.tableBienes.ProductoColumn, Me.tableBienes.IdCertificadoColumn}, false)
        Me.Relations.Add(Me.relationCertificados_Bienes)
        Me.relationPolizas_DatosAutos = New Global.System.Data.DataRelation("Polizas_DatosAutos", New Global.System.Data.DataColumn() {Me.tablePolizas.IdPolizaColumn, Me.tablePolizas.ProductoColumn}, New Global.System.Data.DataColumn() {Me.tableDatosAutos.IdPolizaColumn, Me.tableDatosAutos.ProductoColumn}, false)
        Me.Relations.Add(Me.relationPolizas_DatosAutos)
        Me.relationCertificados_Beneficiarios = New Global.System.Data.DataRelation("Certificados_Beneficiarios", New Global.System.Data.DataColumn() {Me.tableCertificados.IdPolizaColumn, Me.tableCertificados.ProductoColumn, Me.tableCertificados.IdCertificadoColumn}, New Global.System.Data.DataColumn() {Me.tableBeneficiarios.IdPolizaColumn, Me.tableBeneficiarios.ProductoColumn, Me.tableBeneficiarios.IdCertificadoColumn}, false)
        Me.Relations.Add(Me.relationCertificados_Beneficiarios)
        Me.relationCertificados_Cesiones = New Global.System.Data.DataRelation("Certificados_Cesiones", New Global.System.Data.DataColumn() {Me.tableCertificados.IdPolizaColumn, Me.tableCertificados.ProductoColumn, Me.tableCertificados.IdCertificadoColumn}, New Global.System.Data.DataColumn() {Me.tableCesiones.IdPolizaColumn, Me.tableCesiones.ProductoColumn, Me.tableCesiones.IdCertificadoColumn}, false)
        Me.Relations.Add(Me.relationCertificados_Cesiones)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeImagenes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePolizas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCondiciones() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCertificados() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCoberturas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBienes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDatosAutos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBeneficiarios() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCesiones() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsPolizas = New dsPolizas
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ImagenesRowChangeEventHandler(ByVal sender As Object, ByVal e As ImagenesRowChangeEvent)
    
    Public Delegate Sub PolizasRowChangeEventHandler(ByVal sender As Object, ByVal e As PolizasRowChangeEvent)
    
    Public Delegate Sub CondicionesRowChangeEventHandler(ByVal sender As Object, ByVal e As CondicionesRowChangeEvent)
    
    Public Delegate Sub CertificadosRowChangeEventHandler(ByVal sender As Object, ByVal e As CertificadosRowChangeEvent)
    
    Public Delegate Sub CoberturasRowChangeEventHandler(ByVal sender As Object, ByVal e As CoberturasRowChangeEvent)
    
    Public Delegate Sub BienesRowChangeEventHandler(ByVal sender As Object, ByVal e As BienesRowChangeEvent)
    
    Public Delegate Sub DatosAutosRowChangeEventHandler(ByVal sender As Object, ByVal e As DatosAutosRowChangeEvent)
    
    Public Delegate Sub BeneficiariosRowChangeEventHandler(ByVal sender As Object, ByVal e As BeneficiariosRowChangeEvent)
    
    Public Delegate Sub CesionesRowChangeEventHandler(ByVal sender As Object, ByVal e As CesionesRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ImagenesDataTable
        Inherits Global.System.Data.TypedTableBase(Of ImagenesRow)
        
        Private columnLogo As Global.System.Data.DataColumn
        
        Private columnSello As Global.System.Data.DataColumn
        
        Private columnLogo2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Imagenes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SelloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSello
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Logo2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogo2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImagenesRow
            Get
                Return CType(Me.Rows(index),ImagenesRow)
            End Get
        End Property
        
        Public Event ImagenesRowChanging As ImagenesRowChangeEventHandler
        
        Public Event ImagenesRowChanged As ImagenesRowChangeEventHandler
        
        Public Event ImagenesRowDeleting As ImagenesRowChangeEventHandler
        
        Public Event ImagenesRowDeleted As ImagenesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddImagenesRow(ByVal row As ImagenesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddImagenesRow(ByVal Logo() As Byte, ByVal Sello() As Byte, ByVal Logo2() As Byte) As ImagenesRow
            Dim rowImagenesRow As ImagenesRow = CType(Me.NewRow,ImagenesRow)
            Dim columnValuesArray() As Object = New Object() {Logo, Sello, Logo2}
            rowImagenesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowImagenesRow)
            Return rowImagenesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ImagenesDataTable = CType(MyBase.Clone,ImagenesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ImagenesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLogo = MyBase.Columns("Logo")
            Me.columnSello = MyBase.Columns("Sello")
            Me.columnLogo2 = MyBase.Columns("Logo2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLogo = New Global.System.Data.DataColumn("Logo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogo)
            Me.columnSello = New Global.System.Data.DataColumn("Sello", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSello)
            Me.columnLogo2 = New Global.System.Data.DataColumn("Logo2", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogo2)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewImagenesRow() As ImagenesRow
            Return CType(Me.NewRow,ImagenesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ImagenesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ImagenesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImagenesRowChangedEvent) Is Nothing) Then
                RaiseEvent ImagenesRowChanged(Me, New ImagenesRowChangeEvent(CType(e.Row,ImagenesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImagenesRowChangingEvent) Is Nothing) Then
                RaiseEvent ImagenesRowChanging(Me, New ImagenesRowChangeEvent(CType(e.Row,ImagenesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImagenesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImagenesRowDeleted(Me, New ImagenesRowChangeEvent(CType(e.Row,ImagenesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImagenesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImagenesRowDeleting(Me, New ImagenesRowChangeEvent(CType(e.Row,ImagenesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveImagenesRow(ByVal row As ImagenesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPolizas = New dsPolizas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ImagenesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PolizasDataTable
        Inherits Global.System.Data.TypedTableBase(Of PolizasRow)
        
        Private columnIdPoliza As Global.System.Data.DataColumn
        
        Private columnProducto As Global.System.Data.DataColumn
        
        Private columnRamo As Global.System.Data.DataColumn
        
        Private columnAseguradora As Global.System.Data.DataColumn
        
        Private columnIdCliente As Global.System.Data.DataColumn
        
        Private columnCliente As Global.System.Data.DataColumn
        
        Private columnVigenciaDesde As Global.System.Data.DataColumn
        
        Private columnVigenciaHasta As Global.System.Data.DataColumn
        
        Private columnSumaAsegurada As Global.System.Data.DataColumn
        
        Private columnPrimaNeta As Global.System.Data.DataColumn
        
        Private columnGastos As Global.System.Data.DataColumn
        
        Private columnIva As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        Private columnEjecutivo As Global.System.Data.DataColumn
        
        Private columnFechaCancela As Global.System.Data.DataColumn
        
        Private columnMotivoCancela As Global.System.Data.DataColumn
        
        Private columnNumVigencia As Global.System.Data.DataColumn
        
        Private columnAtencion As Global.System.Data.DataColumn
        
        Private columnCargoAtencion As Global.System.Data.DataColumn
        
        Private columnCesionario As Global.System.Data.DataColumn
        
        Private columnIdOferta As Global.System.Data.DataColumn
        
        Private columnVendedor As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Polizas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdPolizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdPoliza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RamoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRamo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AseguradoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAseguradora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VigenciaDesdeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVigenciaDesde
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VigenciaHastaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVigenciaHasta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumaAseguradaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumaAsegurada
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrimaNetaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrimaNeta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GastosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGastos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EjecutivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEjecutivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaCancelaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaCancela
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MotivoCancelaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMotivoCancela
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumVigenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumVigencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AtencionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAtencion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CargoAtencionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCargoAtencion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CesionarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCesionario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdOfertaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdOferta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PolizasRow
            Get
                Return CType(Me.Rows(index),PolizasRow)
            End Get
        End Property
        
        Public Event PolizasRowChanging As PolizasRowChangeEventHandler
        
        Public Event PolizasRowChanged As PolizasRowChangeEventHandler
        
        Public Event PolizasRowDeleting As PolizasRowChangeEventHandler
        
        Public Event PolizasRowDeleted As PolizasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPolizasRow(ByVal row As PolizasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPolizasRow( _
                    ByVal IdPoliza As String,  _
                    ByVal Producto As String,  _
                    ByVal Ramo As String,  _
                    ByVal Aseguradora As String,  _
                    ByVal IdCliente As String,  _
                    ByVal Cliente As String,  _
                    ByVal VigenciaDesde As Date,  _
                    ByVal VigenciaHasta As Date,  _
                    ByVal SumaAsegurada As Double,  _
                    ByVal PrimaNeta As Double,  _
                    ByVal Gastos As Double,  _
                    ByVal Iva As Double,  _
                    ByVal Total As Double,  _
                    ByVal Ejecutivo As String,  _
                    ByVal FechaCancela As Date,  _
                    ByVal MotivoCancela As String,  _
                    ByVal NumVigencia As Integer,  _
                    ByVal Atencion As String,  _
                    ByVal CargoAtencion As String,  _
                    ByVal Cesionario As String,  _
                    ByVal IdOferta As String,  _
                    ByVal Vendedor As String) As PolizasRow
            Dim rowPolizasRow As PolizasRow = CType(Me.NewRow,PolizasRow)
            Dim columnValuesArray() As Object = New Object() {IdPoliza, Producto, Ramo, Aseguradora, IdCliente, Cliente, VigenciaDesde, VigenciaHasta, SumaAsegurada, PrimaNeta, Gastos, Iva, Total, Ejecutivo, FechaCancela, MotivoCancela, NumVigencia, Atencion, CargoAtencion, Cesionario, IdOferta, Vendedor}
            rowPolizasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPolizasRow)
            Return rowPolizasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PolizasDataTable = CType(MyBase.Clone,PolizasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PolizasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdPoliza = MyBase.Columns("IdPoliza")
            Me.columnProducto = MyBase.Columns("Producto")
            Me.columnRamo = MyBase.Columns("Ramo")
            Me.columnAseguradora = MyBase.Columns("Aseguradora")
            Me.columnIdCliente = MyBase.Columns("IdCliente")
            Me.columnCliente = MyBase.Columns("Cliente")
            Me.columnVigenciaDesde = MyBase.Columns("VigenciaDesde")
            Me.columnVigenciaHasta = MyBase.Columns("VigenciaHasta")
            Me.columnSumaAsegurada = MyBase.Columns("SumaAsegurada")
            Me.columnPrimaNeta = MyBase.Columns("PrimaNeta")
            Me.columnGastos = MyBase.Columns("Gastos")
            Me.columnIva = MyBase.Columns("Iva")
            Me.columnTotal = MyBase.Columns("Total")
            Me.columnEjecutivo = MyBase.Columns("Ejecutivo")
            Me.columnFechaCancela = MyBase.Columns("FechaCancela")
            Me.columnMotivoCancela = MyBase.Columns("MotivoCancela")
            Me.columnNumVigencia = MyBase.Columns("NumVigencia")
            Me.columnAtencion = MyBase.Columns("Atencion")
            Me.columnCargoAtencion = MyBase.Columns("CargoAtencion")
            Me.columnCesionario = MyBase.Columns("Cesionario")
            Me.columnIdOferta = MyBase.Columns("IdOferta")
            Me.columnVendedor = MyBase.Columns("Vendedor")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdPoliza = New Global.System.Data.DataColumn("IdPoliza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdPoliza)
            Me.columnProducto = New Global.System.Data.DataColumn("Producto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProducto)
            Me.columnRamo = New Global.System.Data.DataColumn("Ramo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRamo)
            Me.columnAseguradora = New Global.System.Data.DataColumn("Aseguradora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAseguradora)
            Me.columnIdCliente = New Global.System.Data.DataColumn("IdCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCliente)
            Me.columnCliente = New Global.System.Data.DataColumn("Cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCliente)
            Me.columnVigenciaDesde = New Global.System.Data.DataColumn("VigenciaDesde", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVigenciaDesde)
            Me.columnVigenciaHasta = New Global.System.Data.DataColumn("VigenciaHasta", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVigenciaHasta)
            Me.columnSumaAsegurada = New Global.System.Data.DataColumn("SumaAsegurada", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumaAsegurada)
            Me.columnPrimaNeta = New Global.System.Data.DataColumn("PrimaNeta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrimaNeta)
            Me.columnGastos = New Global.System.Data.DataColumn("Gastos", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGastos)
            Me.columnIva = New Global.System.Data.DataColumn("Iva", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIva)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.columnEjecutivo = New Global.System.Data.DataColumn("Ejecutivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEjecutivo)
            Me.columnFechaCancela = New Global.System.Data.DataColumn("FechaCancela", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaCancela)
            Me.columnMotivoCancela = New Global.System.Data.DataColumn("MotivoCancela", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMotivoCancela)
            Me.columnNumVigencia = New Global.System.Data.DataColumn("NumVigencia", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumVigencia)
            Me.columnAtencion = New Global.System.Data.DataColumn("Atencion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAtencion)
            Me.columnCargoAtencion = New Global.System.Data.DataColumn("CargoAtencion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCargoAtencion)
            Me.columnCesionario = New Global.System.Data.DataColumn("Cesionario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCesionario)
            Me.columnIdOferta = New Global.System.Data.DataColumn("IdOferta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdOferta)
            Me.columnVendedor = New Global.System.Data.DataColumn("Vendedor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendedor)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPolizasRow() As PolizasRow
            Return CType(Me.NewRow,PolizasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PolizasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PolizasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PolizasRowChangedEvent) Is Nothing) Then
                RaiseEvent PolizasRowChanged(Me, New PolizasRowChangeEvent(CType(e.Row,PolizasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PolizasRowChangingEvent) Is Nothing) Then
                RaiseEvent PolizasRowChanging(Me, New PolizasRowChangeEvent(CType(e.Row,PolizasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PolizasRowDeletedEvent) Is Nothing) Then
                RaiseEvent PolizasRowDeleted(Me, New PolizasRowChangeEvent(CType(e.Row,PolizasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PolizasRowDeletingEvent) Is Nothing) Then
                RaiseEvent PolizasRowDeleting(Me, New PolizasRowChangeEvent(CType(e.Row,PolizasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePolizasRow(ByVal row As PolizasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPolizas = New dsPolizas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PolizasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CondicionesDataTable
        Inherits Global.System.Data.TypedTableBase(Of CondicionesRow)
        
        Private columnIdPoliza As Global.System.Data.DataColumn
        
        Private columnProducto As Global.System.Data.DataColumn
        
        Private columnCondicion As Global.System.Data.DataColumn
        
        Private columnIdClausula As Global.System.Data.DataColumn
        
        Private columnCategoria As Global.System.Data.DataColumn
        
        Private columnSumaAsegurada As Global.System.Data.DataColumn
        
        Private columnDeducible As Global.System.Data.DataColumn
        
        Private columnParticipacion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Condiciones"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdPolizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdPoliza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CondicionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCondicion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdClausulaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdClausula
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CategoriaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCategoria
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumaAseguradaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumaAsegurada
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeducibleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeducible
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParticipacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParticipacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CondicionesRow
            Get
                Return CType(Me.Rows(index),CondicionesRow)
            End Get
        End Property
        
        Public Event CondicionesRowChanging As CondicionesRowChangeEventHandler
        
        Public Event CondicionesRowChanged As CondicionesRowChangeEventHandler
        
        Public Event CondicionesRowDeleting As CondicionesRowChangeEventHandler
        
        Public Event CondicionesRowDeleted As CondicionesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCondicionesRow(ByVal row As CondicionesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCondicionesRow(ByVal IdPoliza As String, ByVal Producto As String, ByVal Condicion As String, ByVal IdClausula As String, ByVal Categoria As String, ByVal SumaAsegurada As Double, ByVal Deducible As String, ByVal Participacion As String) As CondicionesRow
            Dim rowCondicionesRow As CondicionesRow = CType(Me.NewRow,CondicionesRow)
            Dim columnValuesArray() As Object = New Object() {IdPoliza, Producto, Condicion, IdClausula, Categoria, SumaAsegurada, Deducible, Participacion}
            rowCondicionesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCondicionesRow)
            Return rowCondicionesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CondicionesDataTable = CType(MyBase.Clone,CondicionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CondicionesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdPoliza = MyBase.Columns("IdPoliza")
            Me.columnProducto = MyBase.Columns("Producto")
            Me.columnCondicion = MyBase.Columns("Condicion")
            Me.columnIdClausula = MyBase.Columns("IdClausula")
            Me.columnCategoria = MyBase.Columns("Categoria")
            Me.columnSumaAsegurada = MyBase.Columns("SumaAsegurada")
            Me.columnDeducible = MyBase.Columns("Deducible")
            Me.columnParticipacion = MyBase.Columns("Participacion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdPoliza = New Global.System.Data.DataColumn("IdPoliza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdPoliza)
            Me.columnProducto = New Global.System.Data.DataColumn("Producto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProducto)
            Me.columnCondicion = New Global.System.Data.DataColumn("Condicion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCondicion)
            Me.columnIdClausula = New Global.System.Data.DataColumn("IdClausula", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdClausula)
            Me.columnCategoria = New Global.System.Data.DataColumn("Categoria", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCategoria)
            Me.columnSumaAsegurada = New Global.System.Data.DataColumn("SumaAsegurada", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumaAsegurada)
            Me.columnDeducible = New Global.System.Data.DataColumn("Deducible", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeducible)
            Me.columnParticipacion = New Global.System.Data.DataColumn("Participacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParticipacion)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCondicionesRow() As CondicionesRow
            Return CType(Me.NewRow,CondicionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CondicionesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CondicionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CondicionesRowChangedEvent) Is Nothing) Then
                RaiseEvent CondicionesRowChanged(Me, New CondicionesRowChangeEvent(CType(e.Row,CondicionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CondicionesRowChangingEvent) Is Nothing) Then
                RaiseEvent CondicionesRowChanging(Me, New CondicionesRowChangeEvent(CType(e.Row,CondicionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CondicionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent CondicionesRowDeleted(Me, New CondicionesRowChangeEvent(CType(e.Row,CondicionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CondicionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent CondicionesRowDeleting(Me, New CondicionesRowChangeEvent(CType(e.Row,CondicionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCondicionesRow(ByVal row As CondicionesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPolizas = New dsPolizas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CondicionesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CertificadosDataTable
        Inherits Global.System.Data.TypedTableBase(Of CertificadosRow)
        
        Private columnIdPoliza As Global.System.Data.DataColumn
        
        Private columnProducto As Global.System.Data.DataColumn
        
        Private columnIdCertificado As Global.System.Data.DataColumn
        
        Private columnCliente As Global.System.Data.DataColumn
        
        Private columnSumaAsegurada As Global.System.Data.DataColumn
        
        Private columnPrimaNeta As Global.System.Data.DataColumn
        
        Private columnGastosEmi As Global.System.Data.DataColumn
        
        Private columnGastosFin As Global.System.Data.DataColumn
        
        Private columnGastosBomb As Global.System.Data.DataColumn
        
        Private columnGastosOtros As Global.System.Data.DataColumn
        
        Private columnImpuestos As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        Private columnVigenciaDesde As Global.System.Data.DataColumn
        
        Private columnVigenciaHasta As Global.System.Data.DataColumn
        
        Private columnFechaIngreso As Global.System.Data.DataColumn
        
        Private columnFechaExclusion As Global.System.Data.DataColumn
        
        Private columnParticipacion As Global.System.Data.DataColumn
        
        Private columnDeducible As Global.System.Data.DataColumn
        
        Private columnTasaPrincipal As Global.System.Data.DataColumn
        
        Private columnIdCertificadoAseguradora As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Certificados"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdPolizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdPoliza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCertificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCertificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumaAseguradaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumaAsegurada
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrimaNetaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrimaNeta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GastosEmiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGastosEmi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GastosFinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGastosFin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GastosBombColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGastosBomb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GastosOtrosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGastosOtros
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpuestosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpuestos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VigenciaDesdeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVigenciaDesde
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VigenciaHastaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVigenciaHasta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaIngresoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaIngreso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaExclusionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaExclusion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParticipacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParticipacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeducibleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeducible
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TasaPrincipalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTasaPrincipal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCertificadoAseguradoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCertificadoAseguradora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CertificadosRow
            Get
                Return CType(Me.Rows(index),CertificadosRow)
            End Get
        End Property
        
        Public Event CertificadosRowChanging As CertificadosRowChangeEventHandler
        
        Public Event CertificadosRowChanged As CertificadosRowChangeEventHandler
        
        Public Event CertificadosRowDeleting As CertificadosRowChangeEventHandler
        
        Public Event CertificadosRowDeleted As CertificadosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCertificadosRow(ByVal row As CertificadosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCertificadosRow( _
                    ByVal IdPoliza As String,  _
                    ByVal Producto As String,  _
                    ByVal IdCertificado As String,  _
                    ByVal Cliente As String,  _
                    ByVal SumaAsegurada As Double,  _
                    ByVal PrimaNeta As Double,  _
                    ByVal GastosEmi As Double,  _
                    ByVal GastosFin As Double,  _
                    ByVal GastosBomb As Double,  _
                    ByVal GastosOtros As Double,  _
                    ByVal Impuestos As Double,  _
                    ByVal Total As Double,  _
                    ByVal VigenciaDesde As Date,  _
                    ByVal VigenciaHasta As Date,  _
                    ByVal FechaIngreso As Date,  _
                    ByVal FechaExclusion As Date,  _
                    ByVal Participacion As String,  _
                    ByVal Deducible As String,  _
                    ByVal TasaPrincipal As Double,  _
                    ByVal IdCertificadoAseguradora As String) As CertificadosRow
            Dim rowCertificadosRow As CertificadosRow = CType(Me.NewRow,CertificadosRow)
            Dim columnValuesArray() As Object = New Object() {IdPoliza, Producto, IdCertificado, Cliente, SumaAsegurada, PrimaNeta, GastosEmi, GastosFin, GastosBomb, GastosOtros, Impuestos, Total, VigenciaDesde, VigenciaHasta, FechaIngreso, FechaExclusion, Participacion, Deducible, TasaPrincipal, IdCertificadoAseguradora}
            rowCertificadosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCertificadosRow)
            Return rowCertificadosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CertificadosDataTable = CType(MyBase.Clone,CertificadosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CertificadosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdPoliza = MyBase.Columns("IdPoliza")
            Me.columnProducto = MyBase.Columns("Producto")
            Me.columnIdCertificado = MyBase.Columns("IdCertificado")
            Me.columnCliente = MyBase.Columns("Cliente")
            Me.columnSumaAsegurada = MyBase.Columns("SumaAsegurada")
            Me.columnPrimaNeta = MyBase.Columns("PrimaNeta")
            Me.columnGastosEmi = MyBase.Columns("GastosEmi")
            Me.columnGastosFin = MyBase.Columns("GastosFin")
            Me.columnGastosBomb = MyBase.Columns("GastosBomb")
            Me.columnGastosOtros = MyBase.Columns("GastosOtros")
            Me.columnImpuestos = MyBase.Columns("Impuestos")
            Me.columnTotal = MyBase.Columns("Total")
            Me.columnVigenciaDesde = MyBase.Columns("VigenciaDesde")
            Me.columnVigenciaHasta = MyBase.Columns("VigenciaHasta")
            Me.columnFechaIngreso = MyBase.Columns("FechaIngreso")
            Me.columnFechaExclusion = MyBase.Columns("FechaExclusion")
            Me.columnParticipacion = MyBase.Columns("Participacion")
            Me.columnDeducible = MyBase.Columns("Deducible")
            Me.columnTasaPrincipal = MyBase.Columns("TasaPrincipal")
            Me.columnIdCertificadoAseguradora = MyBase.Columns("IdCertificadoAseguradora")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdPoliza = New Global.System.Data.DataColumn("IdPoliza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdPoliza)
            Me.columnProducto = New Global.System.Data.DataColumn("Producto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProducto)
            Me.columnIdCertificado = New Global.System.Data.DataColumn("IdCertificado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCertificado)
            Me.columnCliente = New Global.System.Data.DataColumn("Cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCliente)
            Me.columnSumaAsegurada = New Global.System.Data.DataColumn("SumaAsegurada", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumaAsegurada)
            Me.columnPrimaNeta = New Global.System.Data.DataColumn("PrimaNeta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrimaNeta)
            Me.columnGastosEmi = New Global.System.Data.DataColumn("GastosEmi", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGastosEmi)
            Me.columnGastosFin = New Global.System.Data.DataColumn("GastosFin", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGastosFin)
            Me.columnGastosBomb = New Global.System.Data.DataColumn("GastosBomb", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGastosBomb)
            Me.columnGastosOtros = New Global.System.Data.DataColumn("GastosOtros", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGastosOtros)
            Me.columnImpuestos = New Global.System.Data.DataColumn("Impuestos", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpuestos)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.columnVigenciaDesde = New Global.System.Data.DataColumn("VigenciaDesde", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVigenciaDesde)
            Me.columnVigenciaHasta = New Global.System.Data.DataColumn("VigenciaHasta", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVigenciaHasta)
            Me.columnFechaIngreso = New Global.System.Data.DataColumn("FechaIngreso", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaIngreso)
            Me.columnFechaExclusion = New Global.System.Data.DataColumn("FechaExclusion", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaExclusion)
            Me.columnParticipacion = New Global.System.Data.DataColumn("Participacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParticipacion)
            Me.columnDeducible = New Global.System.Data.DataColumn("Deducible", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeducible)
            Me.columnTasaPrincipal = New Global.System.Data.DataColumn("TasaPrincipal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTasaPrincipal)
            Me.columnIdCertificadoAseguradora = New Global.System.Data.DataColumn("IdCertificadoAseguradora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCertificadoAseguradora)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCertificadosRow() As CertificadosRow
            Return CType(Me.NewRow,CertificadosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CertificadosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CertificadosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CertificadosRowChangedEvent) Is Nothing) Then
                RaiseEvent CertificadosRowChanged(Me, New CertificadosRowChangeEvent(CType(e.Row,CertificadosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CertificadosRowChangingEvent) Is Nothing) Then
                RaiseEvent CertificadosRowChanging(Me, New CertificadosRowChangeEvent(CType(e.Row,CertificadosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CertificadosRowDeletedEvent) Is Nothing) Then
                RaiseEvent CertificadosRowDeleted(Me, New CertificadosRowChangeEvent(CType(e.Row,CertificadosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CertificadosRowDeletingEvent) Is Nothing) Then
                RaiseEvent CertificadosRowDeleting(Me, New CertificadosRowChangeEvent(CType(e.Row,CertificadosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCertificadosRow(ByVal row As CertificadosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPolizas = New dsPolizas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CertificadosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CoberturasDataTable
        Inherits Global.System.Data.TypedTableBase(Of CoberturasRow)
        
        Private columnIdPoliza As Global.System.Data.DataColumn
        
        Private columnProducto As Global.System.Data.DataColumn
        
        Private columnIdCertificado As Global.System.Data.DataColumn
        
        Private columnCobertura As Global.System.Data.DataColumn
        
        Private columnSumaAsegurada As Global.System.Data.DataColumn
        
        Private columnDeducible As Global.System.Data.DataColumn
        
        Private columnTasa As Global.System.Data.DataColumn
        
        Private columnIdCobertura As Global.System.Data.DataColumn
        
        Private columnParticipacion As Global.System.Data.DataColumn
        
        Private columnPrima As Global.System.Data.DataColumn
        
        Private columnPorceSuma As Global.System.Data.DataColumn
        
        Private columnPorceSumaCert As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Coberturas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdPolizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdPoliza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCertificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCertificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CoberturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCobertura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumaAseguradaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumaAsegurada
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeducibleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeducible
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TasaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTasa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCoberturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCobertura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParticipacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParticipacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrimaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrima
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorceSumaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorceSuma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorceSumaCertColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorceSumaCert
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CoberturasRow
            Get
                Return CType(Me.Rows(index),CoberturasRow)
            End Get
        End Property
        
        Public Event CoberturasRowChanging As CoberturasRowChangeEventHandler
        
        Public Event CoberturasRowChanged As CoberturasRowChangeEventHandler
        
        Public Event CoberturasRowDeleting As CoberturasRowChangeEventHandler
        
        Public Event CoberturasRowDeleted As CoberturasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCoberturasRow(ByVal row As CoberturasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCoberturasRow(ByVal IdPoliza As String, ByVal Producto As String, ByVal IdCertificado As String, ByVal Cobertura As String, ByVal SumaAsegurada As Double, ByVal Deducible As String, ByVal Tasa As String, ByVal IdCobertura As Integer, ByVal Participacion As String, ByVal Prima As Double, ByVal PorceSuma As Double, ByVal PorceSumaCert As String) As CoberturasRow
            Dim rowCoberturasRow As CoberturasRow = CType(Me.NewRow,CoberturasRow)
            Dim columnValuesArray() As Object = New Object() {IdPoliza, Producto, IdCertificado, Cobertura, SumaAsegurada, Deducible, Tasa, IdCobertura, Participacion, Prima, PorceSuma, PorceSumaCert}
            rowCoberturasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCoberturasRow)
            Return rowCoberturasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CoberturasDataTable = CType(MyBase.Clone,CoberturasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CoberturasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdPoliza = MyBase.Columns("IdPoliza")
            Me.columnProducto = MyBase.Columns("Producto")
            Me.columnIdCertificado = MyBase.Columns("IdCertificado")
            Me.columnCobertura = MyBase.Columns("Cobertura")
            Me.columnSumaAsegurada = MyBase.Columns("SumaAsegurada")
            Me.columnDeducible = MyBase.Columns("Deducible")
            Me.columnTasa = MyBase.Columns("Tasa")
            Me.columnIdCobertura = MyBase.Columns("IdCobertura")
            Me.columnParticipacion = MyBase.Columns("Participacion")
            Me.columnPrima = MyBase.Columns("Prima")
            Me.columnPorceSuma = MyBase.Columns("PorceSuma")
            Me.columnPorceSumaCert = MyBase.Columns("PorceSumaCert")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdPoliza = New Global.System.Data.DataColumn("IdPoliza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdPoliza)
            Me.columnProducto = New Global.System.Data.DataColumn("Producto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProducto)
            Me.columnIdCertificado = New Global.System.Data.DataColumn("IdCertificado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCertificado)
            Me.columnCobertura = New Global.System.Data.DataColumn("Cobertura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCobertura)
            Me.columnSumaAsegurada = New Global.System.Data.DataColumn("SumaAsegurada", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumaAsegurada)
            Me.columnDeducible = New Global.System.Data.DataColumn("Deducible", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeducible)
            Me.columnTasa = New Global.System.Data.DataColumn("Tasa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTasa)
            Me.columnIdCobertura = New Global.System.Data.DataColumn("IdCobertura", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCobertura)
            Me.columnParticipacion = New Global.System.Data.DataColumn("Participacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParticipacion)
            Me.columnPrima = New Global.System.Data.DataColumn("Prima", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrima)
            Me.columnPorceSuma = New Global.System.Data.DataColumn("PorceSuma", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorceSuma)
            Me.columnPorceSumaCert = New Global.System.Data.DataColumn("PorceSumaCert", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorceSumaCert)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCoberturasRow() As CoberturasRow
            Return CType(Me.NewRow,CoberturasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CoberturasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CoberturasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CoberturasRowChangedEvent) Is Nothing) Then
                RaiseEvent CoberturasRowChanged(Me, New CoberturasRowChangeEvent(CType(e.Row,CoberturasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CoberturasRowChangingEvent) Is Nothing) Then
                RaiseEvent CoberturasRowChanging(Me, New CoberturasRowChangeEvent(CType(e.Row,CoberturasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CoberturasRowDeletedEvent) Is Nothing) Then
                RaiseEvent CoberturasRowDeleted(Me, New CoberturasRowChangeEvent(CType(e.Row,CoberturasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CoberturasRowDeletingEvent) Is Nothing) Then
                RaiseEvent CoberturasRowDeleting(Me, New CoberturasRowChangeEvent(CType(e.Row,CoberturasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCoberturasRow(ByVal row As CoberturasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPolizas = New dsPolizas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CoberturasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BienesDataTable
        Inherits Global.System.Data.TypedTableBase(Of BienesRow)
        
        Private columnIdPoliza As Global.System.Data.DataColumn
        
        Private columnProducto As Global.System.Data.DataColumn
        
        Private columnIdCertificado As Global.System.Data.DataColumn
        
        Private columnIdBien As Global.System.Data.DataColumn
        
        Private columnNombreBien As Global.System.Data.DataColumn
        
        Private columnDescripcionBien As Global.System.Data.DataColumn
        
        Private columnSumaAsegurada As Global.System.Data.DataColumn
        
        Private columnValorPrima As Global.System.Data.DataColumn
        
        Private columnValorSumaAsegurada As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Bienes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdPolizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdPoliza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCertificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCertificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdBienColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdBien
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreBienColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreBien
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionBienColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionBien
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumaAseguradaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumaAsegurada
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValorPrimaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValorPrima
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValorSumaAseguradaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValorSumaAsegurada
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BienesRow
            Get
                Return CType(Me.Rows(index),BienesRow)
            End Get
        End Property
        
        Public Event BienesRowChanging As BienesRowChangeEventHandler
        
        Public Event BienesRowChanged As BienesRowChangeEventHandler
        
        Public Event BienesRowDeleting As BienesRowChangeEventHandler
        
        Public Event BienesRowDeleted As BienesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBienesRow(ByVal row As BienesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBienesRow(ByVal IdPoliza As String, ByVal Producto As String, ByVal IdCertificado As String, ByVal IdBien As String, ByVal NombreBien As String, ByVal DescripcionBien As String, ByVal SumaAsegurada As String, ByVal ValorPrima As Double, ByVal ValorSumaAsegurada As Double) As BienesRow
            Dim rowBienesRow As BienesRow = CType(Me.NewRow,BienesRow)
            Dim columnValuesArray() As Object = New Object() {IdPoliza, Producto, IdCertificado, IdBien, NombreBien, DescripcionBien, SumaAsegurada, ValorPrima, ValorSumaAsegurada}
            rowBienesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBienesRow)
            Return rowBienesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BienesDataTable = CType(MyBase.Clone,BienesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BienesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdPoliza = MyBase.Columns("IdPoliza")
            Me.columnProducto = MyBase.Columns("Producto")
            Me.columnIdCertificado = MyBase.Columns("IdCertificado")
            Me.columnIdBien = MyBase.Columns("IdBien")
            Me.columnNombreBien = MyBase.Columns("NombreBien")
            Me.columnDescripcionBien = MyBase.Columns("DescripcionBien")
            Me.columnSumaAsegurada = MyBase.Columns("SumaAsegurada")
            Me.columnValorPrima = MyBase.Columns("ValorPrima")
            Me.columnValorSumaAsegurada = MyBase.Columns("ValorSumaAsegurada")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdPoliza = New Global.System.Data.DataColumn("IdPoliza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdPoliza)
            Me.columnProducto = New Global.System.Data.DataColumn("Producto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProducto)
            Me.columnIdCertificado = New Global.System.Data.DataColumn("IdCertificado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCertificado)
            Me.columnIdBien = New Global.System.Data.DataColumn("IdBien", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdBien)
            Me.columnNombreBien = New Global.System.Data.DataColumn("NombreBien", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreBien)
            Me.columnDescripcionBien = New Global.System.Data.DataColumn("DescripcionBien", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionBien)
            Me.columnSumaAsegurada = New Global.System.Data.DataColumn("SumaAsegurada", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumaAsegurada)
            Me.columnValorPrima = New Global.System.Data.DataColumn("ValorPrima", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValorPrima)
            Me.columnValorSumaAsegurada = New Global.System.Data.DataColumn("ValorSumaAsegurada", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValorSumaAsegurada)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBienesRow() As BienesRow
            Return CType(Me.NewRow,BienesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BienesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BienesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BienesRowChangedEvent) Is Nothing) Then
                RaiseEvent BienesRowChanged(Me, New BienesRowChangeEvent(CType(e.Row,BienesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BienesRowChangingEvent) Is Nothing) Then
                RaiseEvent BienesRowChanging(Me, New BienesRowChangeEvent(CType(e.Row,BienesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BienesRowDeletedEvent) Is Nothing) Then
                RaiseEvent BienesRowDeleted(Me, New BienesRowChangeEvent(CType(e.Row,BienesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BienesRowDeletingEvent) Is Nothing) Then
                RaiseEvent BienesRowDeleting(Me, New BienesRowChangeEvent(CType(e.Row,BienesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBienesRow(ByVal row As BienesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPolizas = New dsPolizas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BienesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DatosAutosDataTable
        Inherits Global.System.Data.TypedTableBase(Of DatosAutosRow)
        
        Private columnIdPoliza As Global.System.Data.DataColumn
        
        Private columnProducto As Global.System.Data.DataColumn
        
        Private columnMarca As Global.System.Data.DataColumn
        
        Private columnModelo As Global.System.Data.DataColumn
        
        Private columnClase As Global.System.Data.DataColumn
        
        Private columnAnio As Global.System.Data.DataColumn
        
        Private columnPlaca As Global.System.Data.DataColumn
        
        Private columnSumaDPropios As Global.System.Data.DataColumn
        
        Private columnPrimaDPropios As Global.System.Data.DataColumn
        
        Private columnDeducible As Global.System.Data.DataColumn
        
        Private columnSumaDBienes As Global.System.Data.DataColumn
        
        Private columnPrimaDBienes As Global.System.Data.DataColumn
        
        Private columnSumaDPersonas As Global.System.Data.DataColumn
        
        Private columnPrimaDPersonas As Global.System.Data.DataColumn
        
        Private columnSumaGM As Global.System.Data.DataColumn
        
        Private columnPrimaGM As Global.System.Data.DataColumn
        
        Private columnSumaAP As Global.System.Data.DataColumn
        
        Private columnPrimaBruta As Global.System.Data.DataColumn
        
        Private columnDescuentos As Global.System.Data.DataColumn
        
        Private columnPrimaCatastro As Global.System.Data.DataColumn
        
        Private columnPrimaRCExceso As Global.System.Data.DataColumn
        
        Private columnPrima As Global.System.Data.DataColumn
        
        Private columnOrden As Global.System.Data.DataColumn
        
        Private columnIdCertificado As Global.System.Data.DataColumn
        
        Private columnGastos As Global.System.Data.DataColumn
        
        Private columnIva As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        Private columnPrimaExenta As Global.System.Data.DataColumn
        
        Private columnFechaIngreso As Global.System.Data.DataColumn
        
        Private columnFechaExclusion As Global.System.Data.DataColumn
        
        Private columnSumaDPersona As Global.System.Data.DataColumn
        
        Private columnSumaGMUnaPersona As Global.System.Data.DataColumn
        
        Private columnSumaRCExceso As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DatosAutos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdPolizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdPoliza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarcaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModelo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClase
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlacaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlaca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumaDPropiosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumaDPropios
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrimaDPropiosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrimaDPropios
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeducibleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeducible
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumaDBienesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumaDBienes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrimaDBienesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrimaDBienes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumaDPersonasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumaDPersonas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrimaDPersonasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrimaDPersonas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumaGMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumaGM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrimaGMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrimaGM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumaAPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumaAP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrimaBrutaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrimaBruta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescuentosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescuentos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrimaCatastroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrimaCatastro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrimaRCExcesoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrimaRCExceso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrimaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrima
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrdenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrden
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCertificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCertificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GastosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGastos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IvaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrimaExentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrimaExenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaIngresoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaIngreso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaExclusionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaExclusion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumaDPersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumaDPersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumaGMUnaPersonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumaGMUnaPersona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumaRCExcesoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumaRCExceso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DatosAutosRow
            Get
                Return CType(Me.Rows(index),DatosAutosRow)
            End Get
        End Property
        
        Public Event DatosAutosRowChanging As DatosAutosRowChangeEventHandler
        
        Public Event DatosAutosRowChanged As DatosAutosRowChangeEventHandler
        
        Public Event DatosAutosRowDeleting As DatosAutosRowChangeEventHandler
        
        Public Event DatosAutosRowDeleted As DatosAutosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDatosAutosRow(ByVal row As DatosAutosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDatosAutosRow( _
                    ByVal IdPoliza As String,  _
                    ByVal Producto As String,  _
                    ByVal Marca As String,  _
                    ByVal Modelo As String,  _
                    ByVal Clase As String,  _
                    ByVal Anio As String,  _
                    ByVal Placa As String,  _
                    ByVal SumaDPropios As Double,  _
                    ByVal PrimaDPropios As Double,  _
                    ByVal Deducible As String,  _
                    ByVal SumaDBienes As Double,  _
                    ByVal PrimaDBienes As Double,  _
                    ByVal SumaDPersonas As Double,  _
                    ByVal PrimaDPersonas As Double,  _
                    ByVal SumaGM As Double,  _
                    ByVal PrimaGM As Double,  _
                    ByVal SumaAP As Double,  _
                    ByVal PrimaBruta As Double,  _
                    ByVal Descuentos As Double,  _
                    ByVal PrimaCatastro As Double,  _
                    ByVal PrimaRCExceso As Double,  _
                    ByVal Prima As Double,  _
                    ByVal Orden As Integer,  _
                    ByVal IdCertificado As String,  _
                    ByVal Gastos As Double,  _
                    ByVal Iva As Double,  _
                    ByVal Total As Double,  _
                    ByVal PrimaExenta As Double,  _
                    ByVal FechaIngreso As Date,  _
                    ByVal FechaExclusion As Date,  _
                    ByVal SumaDPersona As Double,  _
                    ByVal SumaGMUnaPersona As Double,  _
                    ByVal SumaRCExceso As Double) As DatosAutosRow
            Dim rowDatosAutosRow As DatosAutosRow = CType(Me.NewRow,DatosAutosRow)
            Dim columnValuesArray() As Object = New Object() {IdPoliza, Producto, Marca, Modelo, Clase, Anio, Placa, SumaDPropios, PrimaDPropios, Deducible, SumaDBienes, PrimaDBienes, SumaDPersonas, PrimaDPersonas, SumaGM, PrimaGM, SumaAP, PrimaBruta, Descuentos, PrimaCatastro, PrimaRCExceso, Prima, Orden, IdCertificado, Gastos, Iva, Total, PrimaExenta, FechaIngreso, FechaExclusion, SumaDPersona, SumaGMUnaPersona, SumaRCExceso}
            rowDatosAutosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDatosAutosRow)
            Return rowDatosAutosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DatosAutosDataTable = CType(MyBase.Clone,DatosAutosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DatosAutosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdPoliza = MyBase.Columns("IdPoliza")
            Me.columnProducto = MyBase.Columns("Producto")
            Me.columnMarca = MyBase.Columns("Marca")
            Me.columnModelo = MyBase.Columns("Modelo")
            Me.columnClase = MyBase.Columns("Clase")
            Me.columnAnio = MyBase.Columns("Anio")
            Me.columnPlaca = MyBase.Columns("Placa")
            Me.columnSumaDPropios = MyBase.Columns("SumaDPropios")
            Me.columnPrimaDPropios = MyBase.Columns("PrimaDPropios")
            Me.columnDeducible = MyBase.Columns("Deducible")
            Me.columnSumaDBienes = MyBase.Columns("SumaDBienes")
            Me.columnPrimaDBienes = MyBase.Columns("PrimaDBienes")
            Me.columnSumaDPersonas = MyBase.Columns("SumaDPersonas")
            Me.columnPrimaDPersonas = MyBase.Columns("PrimaDPersonas")
            Me.columnSumaGM = MyBase.Columns("SumaGM")
            Me.columnPrimaGM = MyBase.Columns("PrimaGM")
            Me.columnSumaAP = MyBase.Columns("SumaAP")
            Me.columnPrimaBruta = MyBase.Columns("PrimaBruta")
            Me.columnDescuentos = MyBase.Columns("Descuentos")
            Me.columnPrimaCatastro = MyBase.Columns("PrimaCatastro")
            Me.columnPrimaRCExceso = MyBase.Columns("PrimaRCExceso")
            Me.columnPrima = MyBase.Columns("Prima")
            Me.columnOrden = MyBase.Columns("Orden")
            Me.columnIdCertificado = MyBase.Columns("IdCertificado")
            Me.columnGastos = MyBase.Columns("Gastos")
            Me.columnIva = MyBase.Columns("Iva")
            Me.columnTotal = MyBase.Columns("Total")
            Me.columnPrimaExenta = MyBase.Columns("PrimaExenta")
            Me.columnFechaIngreso = MyBase.Columns("FechaIngreso")
            Me.columnFechaExclusion = MyBase.Columns("FechaExclusion")
            Me.columnSumaDPersona = MyBase.Columns("SumaDPersona")
            Me.columnSumaGMUnaPersona = MyBase.Columns("SumaGMUnaPersona")
            Me.columnSumaRCExceso = MyBase.Columns("SumaRCExceso")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdPoliza = New Global.System.Data.DataColumn("IdPoliza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdPoliza)
            Me.columnProducto = New Global.System.Data.DataColumn("Producto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProducto)
            Me.columnMarca = New Global.System.Data.DataColumn("Marca", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarca)
            Me.columnModelo = New Global.System.Data.DataColumn("Modelo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModelo)
            Me.columnClase = New Global.System.Data.DataColumn("Clase", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClase)
            Me.columnAnio = New Global.System.Data.DataColumn("Anio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnio)
            Me.columnPlaca = New Global.System.Data.DataColumn("Placa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlaca)
            Me.columnSumaDPropios = New Global.System.Data.DataColumn("SumaDPropios", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumaDPropios)
            Me.columnPrimaDPropios = New Global.System.Data.DataColumn("PrimaDPropios", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrimaDPropios)
            Me.columnDeducible = New Global.System.Data.DataColumn("Deducible", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeducible)
            Me.columnSumaDBienes = New Global.System.Data.DataColumn("SumaDBienes", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumaDBienes)
            Me.columnPrimaDBienes = New Global.System.Data.DataColumn("PrimaDBienes", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrimaDBienes)
            Me.columnSumaDPersonas = New Global.System.Data.DataColumn("SumaDPersonas", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumaDPersonas)
            Me.columnPrimaDPersonas = New Global.System.Data.DataColumn("PrimaDPersonas", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrimaDPersonas)
            Me.columnSumaGM = New Global.System.Data.DataColumn("SumaGM", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumaGM)
            Me.columnPrimaGM = New Global.System.Data.DataColumn("PrimaGM", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrimaGM)
            Me.columnSumaAP = New Global.System.Data.DataColumn("SumaAP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumaAP)
            Me.columnPrimaBruta = New Global.System.Data.DataColumn("PrimaBruta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrimaBruta)
            Me.columnDescuentos = New Global.System.Data.DataColumn("Descuentos", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescuentos)
            Me.columnPrimaCatastro = New Global.System.Data.DataColumn("PrimaCatastro", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrimaCatastro)
            Me.columnPrimaRCExceso = New Global.System.Data.DataColumn("PrimaRCExceso", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrimaRCExceso)
            Me.columnPrima = New Global.System.Data.DataColumn("Prima", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrima)
            Me.columnOrden = New Global.System.Data.DataColumn("Orden", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrden)
            Me.columnIdCertificado = New Global.System.Data.DataColumn("IdCertificado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCertificado)
            Me.columnGastos = New Global.System.Data.DataColumn("Gastos", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGastos)
            Me.columnIva = New Global.System.Data.DataColumn("Iva", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIva)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.columnPrimaExenta = New Global.System.Data.DataColumn("PrimaExenta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrimaExenta)
            Me.columnFechaIngreso = New Global.System.Data.DataColumn("FechaIngreso", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaIngreso)
            Me.columnFechaExclusion = New Global.System.Data.DataColumn("FechaExclusion", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaExclusion)
            Me.columnSumaDPersona = New Global.System.Data.DataColumn("SumaDPersona", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumaDPersona)
            Me.columnSumaGMUnaPersona = New Global.System.Data.DataColumn("SumaGMUnaPersona", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumaGMUnaPersona)
            Me.columnSumaRCExceso = New Global.System.Data.DataColumn("SumaRCExceso", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumaRCExceso)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDatosAutosRow() As DatosAutosRow
            Return CType(Me.NewRow,DatosAutosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DatosAutosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DatosAutosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DatosAutosRowChangedEvent) Is Nothing) Then
                RaiseEvent DatosAutosRowChanged(Me, New DatosAutosRowChangeEvent(CType(e.Row,DatosAutosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DatosAutosRowChangingEvent) Is Nothing) Then
                RaiseEvent DatosAutosRowChanging(Me, New DatosAutosRowChangeEvent(CType(e.Row,DatosAutosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DatosAutosRowDeletedEvent) Is Nothing) Then
                RaiseEvent DatosAutosRowDeleted(Me, New DatosAutosRowChangeEvent(CType(e.Row,DatosAutosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DatosAutosRowDeletingEvent) Is Nothing) Then
                RaiseEvent DatosAutosRowDeleting(Me, New DatosAutosRowChangeEvent(CType(e.Row,DatosAutosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDatosAutosRow(ByVal row As DatosAutosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPolizas = New dsPolizas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DatosAutosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BeneficiariosDataTable
        Inherits Global.System.Data.TypedTableBase(Of BeneficiariosRow)
        
        Private columnIdPoliza As Global.System.Data.DataColumn
        
        Private columnProducto As Global.System.Data.DataColumn
        
        Private columnIdCertificado As Global.System.Data.DataColumn
        
        Private columnIdBeneficiario As Global.System.Data.DataColumn
        
        Private columnNombreBeneficiario As Global.System.Data.DataColumn
        
        Private columnParentesco As Global.System.Data.DataColumn
        
        Private columnFechaNacimiento As Global.System.Data.DataColumn
        
        Private columnPorcentaje As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Beneficiarios"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdPolizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdPoliza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCertificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCertificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdBeneficiarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdBeneficiario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreBeneficiarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreBeneficiario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParentescoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParentesco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaNacimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaNacimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentaje
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BeneficiariosRow
            Get
                Return CType(Me.Rows(index),BeneficiariosRow)
            End Get
        End Property
        
        Public Event BeneficiariosRowChanging As BeneficiariosRowChangeEventHandler
        
        Public Event BeneficiariosRowChanged As BeneficiariosRowChangeEventHandler
        
        Public Event BeneficiariosRowDeleting As BeneficiariosRowChangeEventHandler
        
        Public Event BeneficiariosRowDeleted As BeneficiariosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBeneficiariosRow(ByVal row As BeneficiariosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBeneficiariosRow(ByVal IdPoliza As String, ByVal Producto As String, ByVal IdCertificado As String, ByVal IdBeneficiario As Integer, ByVal NombreBeneficiario As String, ByVal Parentesco As String, ByVal FechaNacimiento As Date, ByVal Porcentaje As Double) As BeneficiariosRow
            Dim rowBeneficiariosRow As BeneficiariosRow = CType(Me.NewRow,BeneficiariosRow)
            Dim columnValuesArray() As Object = New Object() {IdPoliza, Producto, IdCertificado, IdBeneficiario, NombreBeneficiario, Parentesco, FechaNacimiento, Porcentaje}
            rowBeneficiariosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBeneficiariosRow)
            Return rowBeneficiariosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BeneficiariosDataTable = CType(MyBase.Clone,BeneficiariosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BeneficiariosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdPoliza = MyBase.Columns("IdPoliza")
            Me.columnProducto = MyBase.Columns("Producto")
            Me.columnIdCertificado = MyBase.Columns("IdCertificado")
            Me.columnIdBeneficiario = MyBase.Columns("IdBeneficiario")
            Me.columnNombreBeneficiario = MyBase.Columns("NombreBeneficiario")
            Me.columnParentesco = MyBase.Columns("Parentesco")
            Me.columnFechaNacimiento = MyBase.Columns("FechaNacimiento")
            Me.columnPorcentaje = MyBase.Columns("Porcentaje")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdPoliza = New Global.System.Data.DataColumn("IdPoliza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdPoliza)
            Me.columnProducto = New Global.System.Data.DataColumn("Producto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProducto)
            Me.columnIdCertificado = New Global.System.Data.DataColumn("IdCertificado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCertificado)
            Me.columnIdBeneficiario = New Global.System.Data.DataColumn("IdBeneficiario", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdBeneficiario)
            Me.columnNombreBeneficiario = New Global.System.Data.DataColumn("NombreBeneficiario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreBeneficiario)
            Me.columnParentesco = New Global.System.Data.DataColumn("Parentesco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParentesco)
            Me.columnFechaNacimiento = New Global.System.Data.DataColumn("FechaNacimiento", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaNacimiento)
            Me.columnPorcentaje = New Global.System.Data.DataColumn("Porcentaje", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentaje)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBeneficiariosRow() As BeneficiariosRow
            Return CType(Me.NewRow,BeneficiariosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BeneficiariosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BeneficiariosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BeneficiariosRowChangedEvent) Is Nothing) Then
                RaiseEvent BeneficiariosRowChanged(Me, New BeneficiariosRowChangeEvent(CType(e.Row,BeneficiariosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BeneficiariosRowChangingEvent) Is Nothing) Then
                RaiseEvent BeneficiariosRowChanging(Me, New BeneficiariosRowChangeEvent(CType(e.Row,BeneficiariosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BeneficiariosRowDeletedEvent) Is Nothing) Then
                RaiseEvent BeneficiariosRowDeleted(Me, New BeneficiariosRowChangeEvent(CType(e.Row,BeneficiariosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BeneficiariosRowDeletingEvent) Is Nothing) Then
                RaiseEvent BeneficiariosRowDeleting(Me, New BeneficiariosRowChangeEvent(CType(e.Row,BeneficiariosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBeneficiariosRow(ByVal row As BeneficiariosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPolizas = New dsPolizas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BeneficiariosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CesionesDataTable
        Inherits Global.System.Data.TypedTableBase(Of CesionesRow)
        
        Private columnIdPoliza As Global.System.Data.DataColumn
        
        Private columnProducto As Global.System.Data.DataColumn
        
        Private columnIdCertificado As Global.System.Data.DataColumn
        
        Private columnIdCesion As Global.System.Data.DataColumn
        
        Private columnBeneficiario As Global.System.Data.DataColumn
        
        Private columnFechaVigente As Global.System.Data.DataColumn
        
        Private columnFechaCancela As Global.System.Data.DataColumn
        
        Private columnSumaCedida As Global.System.Data.DataColumn
        
        Private columnObservaciones As Global.System.Data.DataColumn
        
        Private columnPropietario As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Cesiones"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdPolizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdPoliza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCertificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCertificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCesionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCesion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BeneficiarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBeneficiario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaVigenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaVigente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaCancelaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaCancela
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumaCedidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumaCedida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PropietarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPropietario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CesionesRow
            Get
                Return CType(Me.Rows(index),CesionesRow)
            End Get
        End Property
        
        Public Event CesionesRowChanging As CesionesRowChangeEventHandler
        
        Public Event CesionesRowChanged As CesionesRowChangeEventHandler
        
        Public Event CesionesRowDeleting As CesionesRowChangeEventHandler
        
        Public Event CesionesRowDeleted As CesionesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCesionesRow(ByVal row As CesionesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCesionesRow(ByVal IdPoliza As String, ByVal Producto As String, ByVal IdCertificado As String, ByVal IdCesion As Integer, ByVal Beneficiario As String, ByVal FechaVigente As Date, ByVal FechaCancela As Date, ByVal SumaCedida As Double, ByVal Observaciones As String, ByVal Propietario As String) As CesionesRow
            Dim rowCesionesRow As CesionesRow = CType(Me.NewRow,CesionesRow)
            Dim columnValuesArray() As Object = New Object() {IdPoliza, Producto, IdCertificado, IdCesion, Beneficiario, FechaVigente, FechaCancela, SumaCedida, Observaciones, Propietario}
            rowCesionesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCesionesRow)
            Return rowCesionesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CesionesDataTable = CType(MyBase.Clone,CesionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CesionesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdPoliza = MyBase.Columns("IdPoliza")
            Me.columnProducto = MyBase.Columns("Producto")
            Me.columnIdCertificado = MyBase.Columns("IdCertificado")
            Me.columnIdCesion = MyBase.Columns("IdCesion")
            Me.columnBeneficiario = MyBase.Columns("Beneficiario")
            Me.columnFechaVigente = MyBase.Columns("FechaVigente")
            Me.columnFechaCancela = MyBase.Columns("FechaCancela")
            Me.columnSumaCedida = MyBase.Columns("SumaCedida")
            Me.columnObservaciones = MyBase.Columns("Observaciones")
            Me.columnPropietario = MyBase.Columns("Propietario")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdPoliza = New Global.System.Data.DataColumn("IdPoliza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdPoliza)
            Me.columnProducto = New Global.System.Data.DataColumn("Producto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProducto)
            Me.columnIdCertificado = New Global.System.Data.DataColumn("IdCertificado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCertificado)
            Me.columnIdCesion = New Global.System.Data.DataColumn("IdCesion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCesion)
            Me.columnBeneficiario = New Global.System.Data.DataColumn("Beneficiario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBeneficiario)
            Me.columnFechaVigente = New Global.System.Data.DataColumn("FechaVigente", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaVigente)
            Me.columnFechaCancela = New Global.System.Data.DataColumn("FechaCancela", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaCancela)
            Me.columnSumaCedida = New Global.System.Data.DataColumn("SumaCedida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumaCedida)
            Me.columnObservaciones = New Global.System.Data.DataColumn("Observaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservaciones)
            Me.columnPropietario = New Global.System.Data.DataColumn("Propietario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPropietario)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCesionesRow() As CesionesRow
            Return CType(Me.NewRow,CesionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CesionesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CesionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CesionesRowChangedEvent) Is Nothing) Then
                RaiseEvent CesionesRowChanged(Me, New CesionesRowChangeEvent(CType(e.Row,CesionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CesionesRowChangingEvent) Is Nothing) Then
                RaiseEvent CesionesRowChanging(Me, New CesionesRowChangeEvent(CType(e.Row,CesionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CesionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent CesionesRowDeleted(Me, New CesionesRowChangeEvent(CType(e.Row,CesionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CesionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent CesionesRowDeleting(Me, New CesionesRowChangeEvent(CType(e.Row,CesionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCesionesRow(ByVal row As CesionesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPolizas = New dsPolizas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CesionesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ImagenesRow
        Inherits Global.System.Data.DataRow
        
        Private tableImagenes As ImagenesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableImagenes = CType(Me.Table,ImagenesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Logo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableImagenes.LogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Logo' in table 'Imagenes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImagenes.LogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sello() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableImagenes.SelloColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sello' in table 'Imagenes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImagenes.SelloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Logo2() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableImagenes.Logo2Column),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Logo2' in table 'Imagenes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImagenes.Logo2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogoNull() As Boolean
            Return Me.IsNull(Me.tableImagenes.LogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogoNull()
            Me(Me.tableImagenes.LogoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSelloNull() As Boolean
            Return Me.IsNull(Me.tableImagenes.SelloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSelloNull()
            Me(Me.tableImagenes.SelloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogo2Null() As Boolean
            Return Me.IsNull(Me.tableImagenes.Logo2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogo2Null()
            Me(Me.tableImagenes.Logo2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PolizasRow
        Inherits Global.System.Data.DataRow
        
        Private tablePolizas As PolizasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePolizas = CType(Me.Table,PolizasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdPoliza() As String
            Get
                Try 
                    Return CType(Me(Me.tablePolizas.IdPolizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdPoliza' in table 'Polizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePolizas.IdPolizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Producto() As String
            Get
                Try 
                    Return CType(Me(Me.tablePolizas.ProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Producto' in table 'Polizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePolizas.ProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ramo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePolizas.RamoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ramo' in table 'Polizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePolizas.RamoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Aseguradora() As String
            Get
                Try 
                    Return CType(Me(Me.tablePolizas.AseguradoraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Aseguradora' in table 'Polizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePolizas.AseguradoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tablePolizas.IdClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCliente' in table 'Polizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePolizas.IdClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cliente() As String
            Get
                Try 
                    Return CType(Me(Me.tablePolizas.ClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cliente' in table 'Polizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePolizas.ClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VigenciaDesde() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePolizas.VigenciaDesdeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VigenciaDesde' in table 'Polizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePolizas.VigenciaDesdeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VigenciaHasta() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePolizas.VigenciaHastaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VigenciaHasta' in table 'Polizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePolizas.VigenciaHastaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumaAsegurada() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePolizas.SumaAseguradaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumaAsegurada' in table 'Polizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePolizas.SumaAseguradaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrimaNeta() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePolizas.PrimaNetaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrimaNeta' in table 'Polizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePolizas.PrimaNetaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gastos() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePolizas.GastosColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gastos' in table 'Polizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePolizas.GastosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Iva() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePolizas.IvaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Iva' in table 'Polizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePolizas.IvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePolizas.TotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total' in table 'Polizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePolizas.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ejecutivo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePolizas.EjecutivoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ejecutivo' in table 'Polizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePolizas.EjecutivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaCancela() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePolizas.FechaCancelaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaCancela' in table 'Polizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePolizas.FechaCancelaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MotivoCancela() As String
            Get
                Try 
                    Return CType(Me(Me.tablePolizas.MotivoCancelaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MotivoCancela' in table 'Polizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePolizas.MotivoCancelaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumVigencia() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePolizas.NumVigenciaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumVigencia' in table 'Polizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePolizas.NumVigenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Atencion() As String
            Get
                Try 
                    Return CType(Me(Me.tablePolizas.AtencionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Atencion' in table 'Polizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePolizas.AtencionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CargoAtencion() As String
            Get
                Try 
                    Return CType(Me(Me.tablePolizas.CargoAtencionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CargoAtencion' in table 'Polizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePolizas.CargoAtencionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cesionario() As String
            Get
                Try 
                    Return CType(Me(Me.tablePolizas.CesionarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cesionario' in table 'Polizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePolizas.CesionarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdOferta() As String
            Get
                Try 
                    Return CType(Me(Me.tablePolizas.IdOfertaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdOferta' in table 'Polizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePolizas.IdOfertaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vendedor() As String
            Get
                Try 
                    Return CType(Me(Me.tablePolizas.VendedorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vendedor' in table 'Polizas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePolizas.VendedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdPolizaNull() As Boolean
            Return Me.IsNull(Me.tablePolizas.IdPolizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdPolizaNull()
            Me(Me.tablePolizas.IdPolizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductoNull() As Boolean
            Return Me.IsNull(Me.tablePolizas.ProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductoNull()
            Me(Me.tablePolizas.ProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRamoNull() As Boolean
            Return Me.IsNull(Me.tablePolizas.RamoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRamoNull()
            Me(Me.tablePolizas.RamoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAseguradoraNull() As Boolean
            Return Me.IsNull(Me.tablePolizas.AseguradoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAseguradoraNull()
            Me(Me.tablePolizas.AseguradoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdClienteNull() As Boolean
            Return Me.IsNull(Me.tablePolizas.IdClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdClienteNull()
            Me(Me.tablePolizas.IdClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClienteNull() As Boolean
            Return Me.IsNull(Me.tablePolizas.ClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClienteNull()
            Me(Me.tablePolizas.ClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVigenciaDesdeNull() As Boolean
            Return Me.IsNull(Me.tablePolizas.VigenciaDesdeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVigenciaDesdeNull()
            Me(Me.tablePolizas.VigenciaDesdeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVigenciaHastaNull() As Boolean
            Return Me.IsNull(Me.tablePolizas.VigenciaHastaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVigenciaHastaNull()
            Me(Me.tablePolizas.VigenciaHastaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumaAseguradaNull() As Boolean
            Return Me.IsNull(Me.tablePolizas.SumaAseguradaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumaAseguradaNull()
            Me(Me.tablePolizas.SumaAseguradaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrimaNetaNull() As Boolean
            Return Me.IsNull(Me.tablePolizas.PrimaNetaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrimaNetaNull()
            Me(Me.tablePolizas.PrimaNetaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGastosNull() As Boolean
            Return Me.IsNull(Me.tablePolizas.GastosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGastosNull()
            Me(Me.tablePolizas.GastosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIvaNull() As Boolean
            Return Me.IsNull(Me.tablePolizas.IvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIvaNull()
            Me(Me.tablePolizas.IvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tablePolizas.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tablePolizas.TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEjecutivoNull() As Boolean
            Return Me.IsNull(Me.tablePolizas.EjecutivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEjecutivoNull()
            Me(Me.tablePolizas.EjecutivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaCancelaNull() As Boolean
            Return Me.IsNull(Me.tablePolizas.FechaCancelaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaCancelaNull()
            Me(Me.tablePolizas.FechaCancelaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMotivoCancelaNull() As Boolean
            Return Me.IsNull(Me.tablePolizas.MotivoCancelaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMotivoCancelaNull()
            Me(Me.tablePolizas.MotivoCancelaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumVigenciaNull() As Boolean
            Return Me.IsNull(Me.tablePolizas.NumVigenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumVigenciaNull()
            Me(Me.tablePolizas.NumVigenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAtencionNull() As Boolean
            Return Me.IsNull(Me.tablePolizas.AtencionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAtencionNull()
            Me(Me.tablePolizas.AtencionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCargoAtencionNull() As Boolean
            Return Me.IsNull(Me.tablePolizas.CargoAtencionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCargoAtencionNull()
            Me(Me.tablePolizas.CargoAtencionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCesionarioNull() As Boolean
            Return Me.IsNull(Me.tablePolizas.CesionarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCesionarioNull()
            Me(Me.tablePolizas.CesionarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdOfertaNull() As Boolean
            Return Me.IsNull(Me.tablePolizas.IdOfertaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdOfertaNull()
            Me(Me.tablePolizas.IdOfertaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendedorNull() As Boolean
            Return Me.IsNull(Me.tablePolizas.VendedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendedorNull()
            Me(Me.tablePolizas.VendedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCondicionesRows() As CondicionesRow()
            If (Me.Table.ChildRelations("Polizas_Condiciones") Is Nothing) Then
                Return New CondicionesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Polizas_Condiciones")),CondicionesRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCertificadosRows() As CertificadosRow()
            If (Me.Table.ChildRelations("Polizas_Certificados") Is Nothing) Then
                Return New CertificadosRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Polizas_Certificados")),CertificadosRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetDatosAutosRows() As DatosAutosRow()
            If (Me.Table.ChildRelations("Polizas_DatosAutos") Is Nothing) Then
                Return New DatosAutosRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Polizas_DatosAutos")),DatosAutosRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CondicionesRow
        Inherits Global.System.Data.DataRow
        
        Private tableCondiciones As CondicionesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCondiciones = CType(Me.Table,CondicionesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdPoliza() As String
            Get
                Try 
                    Return CType(Me(Me.tableCondiciones.IdPolizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdPoliza' in table 'Condiciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCondiciones.IdPolizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Producto() As String
            Get
                Try 
                    Return CType(Me(Me.tableCondiciones.ProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Producto' in table 'Condiciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCondiciones.ProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Condicion() As String
            Get
                Try 
                    Return CType(Me(Me.tableCondiciones.CondicionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Condicion' in table 'Condiciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCondiciones.CondicionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdClausula() As String
            Get
                Try 
                    Return CType(Me(Me.tableCondiciones.IdClausulaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdClausula' in table 'Condiciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCondiciones.IdClausulaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Categoria() As String
            Get
                Try 
                    Return CType(Me(Me.tableCondiciones.CategoriaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Categoria' in table 'Condiciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCondiciones.CategoriaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumaAsegurada() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCondiciones.SumaAseguradaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumaAsegurada' in table 'Condiciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCondiciones.SumaAseguradaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Deducible() As String
            Get
                Try 
                    Return CType(Me(Me.tableCondiciones.DeducibleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Deducible' in table 'Condiciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCondiciones.DeducibleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Participacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableCondiciones.ParticipacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Participacion' in table 'Condiciones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCondiciones.ParticipacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PolizasRowParent() As PolizasRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Polizas_Condiciones")),PolizasRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Polizas_Condiciones"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdPolizaNull() As Boolean
            Return Me.IsNull(Me.tableCondiciones.IdPolizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdPolizaNull()
            Me(Me.tableCondiciones.IdPolizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductoNull() As Boolean
            Return Me.IsNull(Me.tableCondiciones.ProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductoNull()
            Me(Me.tableCondiciones.ProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCondicionNull() As Boolean
            Return Me.IsNull(Me.tableCondiciones.CondicionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCondicionNull()
            Me(Me.tableCondiciones.CondicionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdClausulaNull() As Boolean
            Return Me.IsNull(Me.tableCondiciones.IdClausulaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdClausulaNull()
            Me(Me.tableCondiciones.IdClausulaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCategoriaNull() As Boolean
            Return Me.IsNull(Me.tableCondiciones.CategoriaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCategoriaNull()
            Me(Me.tableCondiciones.CategoriaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumaAseguradaNull() As Boolean
            Return Me.IsNull(Me.tableCondiciones.SumaAseguradaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumaAseguradaNull()
            Me(Me.tableCondiciones.SumaAseguradaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeducibleNull() As Boolean
            Return Me.IsNull(Me.tableCondiciones.DeducibleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeducibleNull()
            Me(Me.tableCondiciones.DeducibleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParticipacionNull() As Boolean
            Return Me.IsNull(Me.tableCondiciones.ParticipacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParticipacionNull()
            Me(Me.tableCondiciones.ParticipacionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CertificadosRow
        Inherits Global.System.Data.DataRow
        
        Private tableCertificados As CertificadosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCertificados = CType(Me.Table,CertificadosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdPoliza() As String
            Get
                Try 
                    Return CType(Me(Me.tableCertificados.IdPolizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdPoliza' in table 'Certificados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCertificados.IdPolizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Producto() As String
            Get
                Try 
                    Return CType(Me(Me.tableCertificados.ProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Producto' in table 'Certificados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCertificados.ProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCertificado() As String
            Get
                Try 
                    Return CType(Me(Me.tableCertificados.IdCertificadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCertificado' in table 'Certificados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCertificados.IdCertificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableCertificados.ClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cliente' in table 'Certificados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCertificados.ClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumaAsegurada() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCertificados.SumaAseguradaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumaAsegurada' in table 'Certificados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCertificados.SumaAseguradaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrimaNeta() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCertificados.PrimaNetaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrimaNeta' in table 'Certificados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCertificados.PrimaNetaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GastosEmi() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCertificados.GastosEmiColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GastosEmi' in table 'Certificados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCertificados.GastosEmiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GastosFin() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCertificados.GastosFinColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GastosFin' in table 'Certificados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCertificados.GastosFinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GastosBomb() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCertificados.GastosBombColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GastosBomb' in table 'Certificados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCertificados.GastosBombColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GastosOtros() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCertificados.GastosOtrosColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GastosOtros' in table 'Certificados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCertificados.GastosOtrosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Impuestos() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCertificados.ImpuestosColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Impuestos' in table 'Certificados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCertificados.ImpuestosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCertificados.TotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total' in table 'Certificados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCertificados.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VigenciaDesde() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCertificados.VigenciaDesdeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VigenciaDesde' in table 'Certificados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCertificados.VigenciaDesdeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VigenciaHasta() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCertificados.VigenciaHastaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VigenciaHasta' in table 'Certificados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCertificados.VigenciaHastaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaIngreso() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCertificados.FechaIngresoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaIngreso' in table 'Certificados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCertificados.FechaIngresoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaExclusion() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCertificados.FechaExclusionColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaExclusion' in table 'Certificados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCertificados.FechaExclusionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Participacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableCertificados.ParticipacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Participacion' in table 'Certificados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCertificados.ParticipacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Deducible() As String
            Get
                Try 
                    Return CType(Me(Me.tableCertificados.DeducibleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Deducible' in table 'Certificados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCertificados.DeducibleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TasaPrincipal() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCertificados.TasaPrincipalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TasaPrincipal' in table 'Certificados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCertificados.TasaPrincipalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCertificadoAseguradora() As String
            Get
                Try 
                    Return CType(Me(Me.tableCertificados.IdCertificadoAseguradoraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCertificadoAseguradora' in table 'Certificados' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableCertificados.IdCertificadoAseguradoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PolizasRowParent() As PolizasRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Polizas_Certificados")),PolizasRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Polizas_Certificados"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdPolizaNull() As Boolean
            Return Me.IsNull(Me.tableCertificados.IdPolizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdPolizaNull()
            Me(Me.tableCertificados.IdPolizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductoNull() As Boolean
            Return Me.IsNull(Me.tableCertificados.ProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductoNull()
            Me(Me.tableCertificados.ProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdCertificadoNull() As Boolean
            Return Me.IsNull(Me.tableCertificados.IdCertificadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdCertificadoNull()
            Me(Me.tableCertificados.IdCertificadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClienteNull() As Boolean
            Return Me.IsNull(Me.tableCertificados.ClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClienteNull()
            Me(Me.tableCertificados.ClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumaAseguradaNull() As Boolean
            Return Me.IsNull(Me.tableCertificados.SumaAseguradaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumaAseguradaNull()
            Me(Me.tableCertificados.SumaAseguradaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrimaNetaNull() As Boolean
            Return Me.IsNull(Me.tableCertificados.PrimaNetaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrimaNetaNull()
            Me(Me.tableCertificados.PrimaNetaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGastosEmiNull() As Boolean
            Return Me.IsNull(Me.tableCertificados.GastosEmiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGastosEmiNull()
            Me(Me.tableCertificados.GastosEmiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGastosFinNull() As Boolean
            Return Me.IsNull(Me.tableCertificados.GastosFinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGastosFinNull()
            Me(Me.tableCertificados.GastosFinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGastosBombNull() As Boolean
            Return Me.IsNull(Me.tableCertificados.GastosBombColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGastosBombNull()
            Me(Me.tableCertificados.GastosBombColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGastosOtrosNull() As Boolean
            Return Me.IsNull(Me.tableCertificados.GastosOtrosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGastosOtrosNull()
            Me(Me.tableCertificados.GastosOtrosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpuestosNull() As Boolean
            Return Me.IsNull(Me.tableCertificados.ImpuestosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpuestosNull()
            Me(Me.tableCertificados.ImpuestosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableCertificados.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tableCertificados.TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVigenciaDesdeNull() As Boolean
            Return Me.IsNull(Me.tableCertificados.VigenciaDesdeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVigenciaDesdeNull()
            Me(Me.tableCertificados.VigenciaDesdeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVigenciaHastaNull() As Boolean
            Return Me.IsNull(Me.tableCertificados.VigenciaHastaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVigenciaHastaNull()
            Me(Me.tableCertificados.VigenciaHastaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaIngresoNull() As Boolean
            Return Me.IsNull(Me.tableCertificados.FechaIngresoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaIngresoNull()
            Me(Me.tableCertificados.FechaIngresoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaExclusionNull() As Boolean
            Return Me.IsNull(Me.tableCertificados.FechaExclusionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaExclusionNull()
            Me(Me.tableCertificados.FechaExclusionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParticipacionNull() As Boolean
            Return Me.IsNull(Me.tableCertificados.ParticipacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParticipacionNull()
            Me(Me.tableCertificados.ParticipacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeducibleNull() As Boolean
            Return Me.IsNull(Me.tableCertificados.DeducibleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeducibleNull()
            Me(Me.tableCertificados.DeducibleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTasaPrincipalNull() As Boolean
            Return Me.IsNull(Me.tableCertificados.TasaPrincipalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTasaPrincipalNull()
            Me(Me.tableCertificados.TasaPrincipalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdCertificadoAseguradoraNull() As Boolean
            Return Me.IsNull(Me.tableCertificados.IdCertificadoAseguradoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdCertificadoAseguradoraNull()
            Me(Me.tableCertificados.IdCertificadoAseguradoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCoberturasRows() As CoberturasRow()
            If (Me.Table.ChildRelations("Certificados_Coberturas") Is Nothing) Then
                Return New CoberturasRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Certificados_Coberturas")),CoberturasRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetBienesRows() As BienesRow()
            If (Me.Table.ChildRelations("Certificados_Bienes") Is Nothing) Then
                Return New BienesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Certificados_Bienes")),BienesRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetBeneficiariosRows() As BeneficiariosRow()
            If (Me.Table.ChildRelations("Certificados_Beneficiarios") Is Nothing) Then
                Return New BeneficiariosRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Certificados_Beneficiarios")),BeneficiariosRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCesionesRows() As CesionesRow()
            If (Me.Table.ChildRelations("Certificados_Cesiones") Is Nothing) Then
                Return New CesionesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Certificados_Cesiones")),CesionesRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CoberturasRow
        Inherits Global.System.Data.DataRow
        
        Private tableCoberturas As CoberturasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCoberturas = CType(Me.Table,CoberturasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdPoliza() As String
            Get
                Try 
                    Return CType(Me(Me.tableCoberturas.IdPolizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdPoliza' in table 'Coberturas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCoberturas.IdPolizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Producto() As String
            Get
                Try 
                    Return CType(Me(Me.tableCoberturas.ProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Producto' in table 'Coberturas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCoberturas.ProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCertificado() As String
            Get
                Try 
                    Return CType(Me(Me.tableCoberturas.IdCertificadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCertificado' in table 'Coberturas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCoberturas.IdCertificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cobertura() As String
            Get
                Try 
                    Return CType(Me(Me.tableCoberturas.CoberturaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cobertura' in table 'Coberturas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCoberturas.CoberturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumaAsegurada() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCoberturas.SumaAseguradaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumaAsegurada' in table 'Coberturas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCoberturas.SumaAseguradaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Deducible() As String
            Get
                Try 
                    Return CType(Me(Me.tableCoberturas.DeducibleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Deducible' in table 'Coberturas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCoberturas.DeducibleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tasa() As String
            Get
                Try 
                    Return CType(Me(Me.tableCoberturas.TasaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tasa' in table 'Coberturas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCoberturas.TasaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCobertura() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCoberturas.IdCoberturaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCobertura' in table 'Coberturas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCoberturas.IdCoberturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Participacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableCoberturas.ParticipacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Participacion' in table 'Coberturas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCoberturas.ParticipacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prima() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCoberturas.PrimaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Prima' in table 'Coberturas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCoberturas.PrimaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorceSuma() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCoberturas.PorceSumaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorceSuma' in table 'Coberturas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCoberturas.PorceSumaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorceSumaCert() As String
            Get
                Try 
                    Return CType(Me(Me.tableCoberturas.PorceSumaCertColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorceSumaCert' in table 'Coberturas' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCoberturas.PorceSumaCertColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CertificadosRowParent() As CertificadosRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Certificados_Coberturas")),CertificadosRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Certificados_Coberturas"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdPolizaNull() As Boolean
            Return Me.IsNull(Me.tableCoberturas.IdPolizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdPolizaNull()
            Me(Me.tableCoberturas.IdPolizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductoNull() As Boolean
            Return Me.IsNull(Me.tableCoberturas.ProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductoNull()
            Me(Me.tableCoberturas.ProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdCertificadoNull() As Boolean
            Return Me.IsNull(Me.tableCoberturas.IdCertificadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdCertificadoNull()
            Me(Me.tableCoberturas.IdCertificadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoberturaNull() As Boolean
            Return Me.IsNull(Me.tableCoberturas.CoberturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoberturaNull()
            Me(Me.tableCoberturas.CoberturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumaAseguradaNull() As Boolean
            Return Me.IsNull(Me.tableCoberturas.SumaAseguradaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumaAseguradaNull()
            Me(Me.tableCoberturas.SumaAseguradaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeducibleNull() As Boolean
            Return Me.IsNull(Me.tableCoberturas.DeducibleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeducibleNull()
            Me(Me.tableCoberturas.DeducibleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTasaNull() As Boolean
            Return Me.IsNull(Me.tableCoberturas.TasaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTasaNull()
            Me(Me.tableCoberturas.TasaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdCoberturaNull() As Boolean
            Return Me.IsNull(Me.tableCoberturas.IdCoberturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdCoberturaNull()
            Me(Me.tableCoberturas.IdCoberturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParticipacionNull() As Boolean
            Return Me.IsNull(Me.tableCoberturas.ParticipacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParticipacionNull()
            Me(Me.tableCoberturas.ParticipacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrimaNull() As Boolean
            Return Me.IsNull(Me.tableCoberturas.PrimaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrimaNull()
            Me(Me.tableCoberturas.PrimaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorceSumaNull() As Boolean
            Return Me.IsNull(Me.tableCoberturas.PorceSumaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorceSumaNull()
            Me(Me.tableCoberturas.PorceSumaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorceSumaCertNull() As Boolean
            Return Me.IsNull(Me.tableCoberturas.PorceSumaCertColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorceSumaCertNull()
            Me(Me.tableCoberturas.PorceSumaCertColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BienesRow
        Inherits Global.System.Data.DataRow
        
        Private tableBienes As BienesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBienes = CType(Me.Table,BienesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdPoliza() As String
            Get
                Try 
                    Return CType(Me(Me.tableBienes.IdPolizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdPoliza' in table 'Bienes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBienes.IdPolizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Producto() As String
            Get
                Try 
                    Return CType(Me(Me.tableBienes.ProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Producto' in table 'Bienes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBienes.ProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCertificado() As String
            Get
                Try 
                    Return CType(Me(Me.tableBienes.IdCertificadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCertificado' in table 'Bienes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBienes.IdCertificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdBien() As String
            Get
                Try 
                    Return CType(Me(Me.tableBienes.IdBienColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdBien' in table 'Bienes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBienes.IdBienColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreBien() As String
            Get
                Try 
                    Return CType(Me(Me.tableBienes.NombreBienColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NombreBien' in table 'Bienes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBienes.NombreBienColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionBien() As String
            Get
                Try 
                    Return CType(Me(Me.tableBienes.DescripcionBienColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DescripcionBien' in table 'Bienes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBienes.DescripcionBienColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumaAsegurada() As String
            Get
                Try 
                    Return CType(Me(Me.tableBienes.SumaAseguradaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumaAsegurada' in table 'Bienes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBienes.SumaAseguradaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ValorPrima() As Double
            Get
                Try 
                    Return CType(Me(Me.tableBienes.ValorPrimaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValorPrima' in table 'Bienes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBienes.ValorPrimaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ValorSumaAsegurada() As Double
            Get
                Try 
                    Return CType(Me(Me.tableBienes.ValorSumaAseguradaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValorSumaAsegurada' in table 'Bienes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBienes.ValorSumaAseguradaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CertificadosRowParent() As CertificadosRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Certificados_Bienes")),CertificadosRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Certificados_Bienes"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdPolizaNull() As Boolean
            Return Me.IsNull(Me.tableBienes.IdPolizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdPolizaNull()
            Me(Me.tableBienes.IdPolizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductoNull() As Boolean
            Return Me.IsNull(Me.tableBienes.ProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductoNull()
            Me(Me.tableBienes.ProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdCertificadoNull() As Boolean
            Return Me.IsNull(Me.tableBienes.IdCertificadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdCertificadoNull()
            Me(Me.tableBienes.IdCertificadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdBienNull() As Boolean
            Return Me.IsNull(Me.tableBienes.IdBienColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdBienNull()
            Me(Me.tableBienes.IdBienColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreBienNull() As Boolean
            Return Me.IsNull(Me.tableBienes.NombreBienColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreBienNull()
            Me(Me.tableBienes.NombreBienColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionBienNull() As Boolean
            Return Me.IsNull(Me.tableBienes.DescripcionBienColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionBienNull()
            Me(Me.tableBienes.DescripcionBienColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumaAseguradaNull() As Boolean
            Return Me.IsNull(Me.tableBienes.SumaAseguradaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumaAseguradaNull()
            Me(Me.tableBienes.SumaAseguradaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValorPrimaNull() As Boolean
            Return Me.IsNull(Me.tableBienes.ValorPrimaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValorPrimaNull()
            Me(Me.tableBienes.ValorPrimaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValorSumaAseguradaNull() As Boolean
            Return Me.IsNull(Me.tableBienes.ValorSumaAseguradaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValorSumaAseguradaNull()
            Me(Me.tableBienes.ValorSumaAseguradaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DatosAutosRow
        Inherits Global.System.Data.DataRow
        
        Private tableDatosAutos As DatosAutosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDatosAutos = CType(Me.Table,DatosAutosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdPoliza() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.IdPolizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdPoliza' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.IdPolizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Producto() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.ProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Producto' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.ProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marca() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.MarcaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Marca' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.MarcaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modelo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.ModeloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Modelo' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.ModeloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clase() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.ClaseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Clase' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.ClaseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Anio() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.AnioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Anio' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.AnioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Placa() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.PlacaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Placa' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.PlacaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumaDPropios() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.SumaDPropiosColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumaDPropios' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.SumaDPropiosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrimaDPropios() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.PrimaDPropiosColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrimaDPropios' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.PrimaDPropiosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Deducible() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.DeducibleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Deducible' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.DeducibleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumaDBienes() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.SumaDBienesColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumaDBienes' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.SumaDBienesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrimaDBienes() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.PrimaDBienesColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrimaDBienes' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.PrimaDBienesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumaDPersonas() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.SumaDPersonasColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumaDPersonas' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.SumaDPersonasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrimaDPersonas() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.PrimaDPersonasColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrimaDPersonas' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.PrimaDPersonasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumaGM() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.SumaGMColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumaGM' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.SumaGMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrimaGM() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.PrimaGMColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrimaGM' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.PrimaGMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumaAP() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.SumaAPColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumaAP' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.SumaAPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrimaBruta() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.PrimaBrutaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrimaBruta' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.PrimaBrutaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descuentos() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.DescuentosColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descuentos' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.DescuentosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrimaCatastro() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.PrimaCatastroColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrimaCatastro' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.PrimaCatastroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrimaRCExceso() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.PrimaRCExcesoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrimaRCExceso' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.PrimaRCExcesoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prima() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.PrimaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Prima' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.PrimaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Orden() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.OrdenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Orden' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.OrdenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCertificado() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.IdCertificadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCertificado' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.IdCertificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gastos() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.GastosColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gastos' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.GastosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Iva() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.IvaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Iva' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.IvaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.TotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrimaExenta() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.PrimaExentaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrimaExenta' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.PrimaExentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaIngreso() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.FechaIngresoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaIngreso' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.FechaIngresoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaExclusion() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.FechaExclusionColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaExclusion' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.FechaExclusionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumaDPersona() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.SumaDPersonaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumaDPersona' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.SumaDPersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumaGMUnaPersona() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.SumaGMUnaPersonaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumaGMUnaPersona' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.SumaGMUnaPersonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumaRCExceso() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDatosAutos.SumaRCExcesoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumaRCExceso' in table 'DatosAutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosAutos.SumaRCExcesoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PolizasRowParent() As PolizasRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Polizas_DatosAutos")),PolizasRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Polizas_DatosAutos"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdPolizaNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.IdPolizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdPolizaNull()
            Me(Me.tableDatosAutos.IdPolizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductoNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.ProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductoNull()
            Me(Me.tableDatosAutos.ProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarcaNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.MarcaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarcaNull()
            Me(Me.tableDatosAutos.MarcaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeloNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.ModeloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeloNull()
            Me(Me.tableDatosAutos.ModeloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaseNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.ClaseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaseNull()
            Me(Me.tableDatosAutos.ClaseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnioNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.AnioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnioNull()
            Me(Me.tableDatosAutos.AnioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlacaNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.PlacaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlacaNull()
            Me(Me.tableDatosAutos.PlacaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumaDPropiosNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.SumaDPropiosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumaDPropiosNull()
            Me(Me.tableDatosAutos.SumaDPropiosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrimaDPropiosNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.PrimaDPropiosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrimaDPropiosNull()
            Me(Me.tableDatosAutos.PrimaDPropiosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeducibleNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.DeducibleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeducibleNull()
            Me(Me.tableDatosAutos.DeducibleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumaDBienesNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.SumaDBienesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumaDBienesNull()
            Me(Me.tableDatosAutos.SumaDBienesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrimaDBienesNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.PrimaDBienesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrimaDBienesNull()
            Me(Me.tableDatosAutos.PrimaDBienesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumaDPersonasNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.SumaDPersonasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumaDPersonasNull()
            Me(Me.tableDatosAutos.SumaDPersonasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrimaDPersonasNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.PrimaDPersonasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrimaDPersonasNull()
            Me(Me.tableDatosAutos.PrimaDPersonasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumaGMNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.SumaGMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumaGMNull()
            Me(Me.tableDatosAutos.SumaGMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrimaGMNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.PrimaGMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrimaGMNull()
            Me(Me.tableDatosAutos.PrimaGMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumaAPNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.SumaAPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumaAPNull()
            Me(Me.tableDatosAutos.SumaAPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrimaBrutaNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.PrimaBrutaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrimaBrutaNull()
            Me(Me.tableDatosAutos.PrimaBrutaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescuentosNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.DescuentosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescuentosNull()
            Me(Me.tableDatosAutos.DescuentosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrimaCatastroNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.PrimaCatastroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrimaCatastroNull()
            Me(Me.tableDatosAutos.PrimaCatastroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrimaRCExcesoNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.PrimaRCExcesoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrimaRCExcesoNull()
            Me(Me.tableDatosAutos.PrimaRCExcesoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrimaNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.PrimaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrimaNull()
            Me(Me.tableDatosAutos.PrimaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrdenNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.OrdenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrdenNull()
            Me(Me.tableDatosAutos.OrdenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdCertificadoNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.IdCertificadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdCertificadoNull()
            Me(Me.tableDatosAutos.IdCertificadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGastosNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.GastosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGastosNull()
            Me(Me.tableDatosAutos.GastosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIvaNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.IvaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIvaNull()
            Me(Me.tableDatosAutos.IvaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tableDatosAutos.TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrimaExentaNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.PrimaExentaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrimaExentaNull()
            Me(Me.tableDatosAutos.PrimaExentaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaIngresoNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.FechaIngresoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaIngresoNull()
            Me(Me.tableDatosAutos.FechaIngresoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaExclusionNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.FechaExclusionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaExclusionNull()
            Me(Me.tableDatosAutos.FechaExclusionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumaDPersonaNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.SumaDPersonaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumaDPersonaNull()
            Me(Me.tableDatosAutos.SumaDPersonaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumaGMUnaPersonaNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.SumaGMUnaPersonaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumaGMUnaPersonaNull()
            Me(Me.tableDatosAutos.SumaGMUnaPersonaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumaRCExcesoNull() As Boolean
            Return Me.IsNull(Me.tableDatosAutos.SumaRCExcesoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumaRCExcesoNull()
            Me(Me.tableDatosAutos.SumaRCExcesoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BeneficiariosRow
        Inherits Global.System.Data.DataRow
        
        Private tableBeneficiarios As BeneficiariosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBeneficiarios = CType(Me.Table,BeneficiariosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdPoliza() As String
            Get
                Try 
                    Return CType(Me(Me.tableBeneficiarios.IdPolizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdPoliza' in table 'Beneficiarios' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBeneficiarios.IdPolizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Producto() As String
            Get
                Try 
                    Return CType(Me(Me.tableBeneficiarios.ProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Producto' in table 'Beneficiarios' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBeneficiarios.ProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCertificado() As String
            Get
                Try 
                    Return CType(Me(Me.tableBeneficiarios.IdCertificadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCertificado' in table 'Beneficiarios' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBeneficiarios.IdCertificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdBeneficiario() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBeneficiarios.IdBeneficiarioColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdBeneficiario' in table 'Beneficiarios' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBeneficiarios.IdBeneficiarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreBeneficiario() As String
            Get
                Try 
                    Return CType(Me(Me.tableBeneficiarios.NombreBeneficiarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NombreBeneficiario' in table 'Beneficiarios' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBeneficiarios.NombreBeneficiarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Parentesco() As String
            Get
                Try 
                    Return CType(Me(Me.tableBeneficiarios.ParentescoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Parentesco' in table 'Beneficiarios' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBeneficiarios.ParentescoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaNacimiento() As Date
            Get
                Try 
                    Return CType(Me(Me.tableBeneficiarios.FechaNacimientoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaNacimiento' in table 'Beneficiarios' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBeneficiarios.FechaNacimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Porcentaje() As Double
            Get
                Try 
                    Return CType(Me(Me.tableBeneficiarios.PorcentajeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Porcentaje' in table 'Beneficiarios' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBeneficiarios.PorcentajeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CertificadosRowParent() As CertificadosRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Certificados_Beneficiarios")),CertificadosRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Certificados_Beneficiarios"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdPolizaNull() As Boolean
            Return Me.IsNull(Me.tableBeneficiarios.IdPolizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdPolizaNull()
            Me(Me.tableBeneficiarios.IdPolizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductoNull() As Boolean
            Return Me.IsNull(Me.tableBeneficiarios.ProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductoNull()
            Me(Me.tableBeneficiarios.ProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdCertificadoNull() As Boolean
            Return Me.IsNull(Me.tableBeneficiarios.IdCertificadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdCertificadoNull()
            Me(Me.tableBeneficiarios.IdCertificadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdBeneficiarioNull() As Boolean
            Return Me.IsNull(Me.tableBeneficiarios.IdBeneficiarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdBeneficiarioNull()
            Me(Me.tableBeneficiarios.IdBeneficiarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreBeneficiarioNull() As Boolean
            Return Me.IsNull(Me.tableBeneficiarios.NombreBeneficiarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreBeneficiarioNull()
            Me(Me.tableBeneficiarios.NombreBeneficiarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParentescoNull() As Boolean
            Return Me.IsNull(Me.tableBeneficiarios.ParentescoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParentescoNull()
            Me(Me.tableBeneficiarios.ParentescoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNacimientoNull() As Boolean
            Return Me.IsNull(Me.tableBeneficiarios.FechaNacimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNacimientoNull()
            Me(Me.tableBeneficiarios.FechaNacimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeNull() As Boolean
            Return Me.IsNull(Me.tableBeneficiarios.PorcentajeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeNull()
            Me(Me.tableBeneficiarios.PorcentajeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CesionesRow
        Inherits Global.System.Data.DataRow
        
        Private tableCesiones As CesionesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCesiones = CType(Me.Table,CesionesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdPoliza() As String
            Get
                Try 
                    Return CType(Me(Me.tableCesiones.IdPolizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdPoliza' in table 'Cesiones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCesiones.IdPolizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Producto() As String
            Get
                Try 
                    Return CType(Me(Me.tableCesiones.ProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Producto' in table 'Cesiones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCesiones.ProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCertificado() As String
            Get
                Try 
                    Return CType(Me(Me.tableCesiones.IdCertificadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCertificado' in table 'Cesiones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCesiones.IdCertificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCesion() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCesiones.IdCesionColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCesion' in table 'Cesiones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCesiones.IdCesionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Beneficiario() As String
            Get
                Try 
                    Return CType(Me(Me.tableCesiones.BeneficiarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Beneficiario' in table 'Cesiones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCesiones.BeneficiarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaVigente() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCesiones.FechaVigenteColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaVigente' in table 'Cesiones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCesiones.FechaVigenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaCancela() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCesiones.FechaCancelaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaCancela' in table 'Cesiones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCesiones.FechaCancelaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumaCedida() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCesiones.SumaCedidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumaCedida' in table 'Cesiones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCesiones.SumaCedidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observaciones() As String
            Get
                Try 
                    Return CType(Me(Me.tableCesiones.ObservacionesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observaciones' in table 'Cesiones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCesiones.ObservacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Propietario() As String
            Get
                Try 
                    Return CType(Me(Me.tableCesiones.PropietarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Propietario' in table 'Cesiones' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCesiones.PropietarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CertificadosRowParent() As CertificadosRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Certificados_Cesiones")),CertificadosRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Certificados_Cesiones"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdPolizaNull() As Boolean
            Return Me.IsNull(Me.tableCesiones.IdPolizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdPolizaNull()
            Me(Me.tableCesiones.IdPolizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductoNull() As Boolean
            Return Me.IsNull(Me.tableCesiones.ProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductoNull()
            Me(Me.tableCesiones.ProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdCertificadoNull() As Boolean
            Return Me.IsNull(Me.tableCesiones.IdCertificadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdCertificadoNull()
            Me(Me.tableCesiones.IdCertificadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdCesionNull() As Boolean
            Return Me.IsNull(Me.tableCesiones.IdCesionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdCesionNull()
            Me(Me.tableCesiones.IdCesionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBeneficiarioNull() As Boolean
            Return Me.IsNull(Me.tableCesiones.BeneficiarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBeneficiarioNull()
            Me(Me.tableCesiones.BeneficiarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaVigenteNull() As Boolean
            Return Me.IsNull(Me.tableCesiones.FechaVigenteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaVigenteNull()
            Me(Me.tableCesiones.FechaVigenteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaCancelaNull() As Boolean
            Return Me.IsNull(Me.tableCesiones.FechaCancelaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaCancelaNull()
            Me(Me.tableCesiones.FechaCancelaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumaCedidaNull() As Boolean
            Return Me.IsNull(Me.tableCesiones.SumaCedidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumaCedidaNull()
            Me(Me.tableCesiones.SumaCedidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionesNull() As Boolean
            Return Me.IsNull(Me.tableCesiones.ObservacionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionesNull()
            Me(Me.tableCesiones.ObservacionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPropietarioNull() As Boolean
            Return Me.IsNull(Me.tableCesiones.PropietarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPropietarioNull()
            Me(Me.tableCesiones.PropietarioColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ImagenesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ImagenesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ImagenesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ImagenesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PolizasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PolizasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PolizasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PolizasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CondicionesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CondicionesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CondicionesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CondicionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CertificadosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CertificadosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CertificadosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CertificadosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CoberturasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CoberturasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CoberturasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CoberturasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BienesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BienesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BienesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BienesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DatosAutosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DatosAutosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DatosAutosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DatosAutosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BeneficiariosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BeneficiariosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BeneficiariosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BeneficiariosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CesionesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CesionesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CesionesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CesionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
