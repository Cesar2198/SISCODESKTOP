<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnImprimirDocMarcados.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADr0AAA69AUf7kK0AAATMSURBVFhHvZfdT9tlFMf5I7z10gsTL7zwwgtvjBeLMbqo
        yxQSlmwygwwiQzY2ioDbFBibCyU4mjFhc+KQ8bJRRKGQdS0vXTfaUqClUEZHOyilQFuoUEu//s6RX1cq
        9oV0PskJ/aUvn89zzvM85yEt2ZEhkeNA7h3sPP4/o7JxCDlVA7gpn4BpxgXZHT0q6rtevMTZOhUaOseh
        MzuxsrIBp9MLu30Vs7PLOHT6BWWBZidtGcOIcQGrnj/h9W4yfGl5PSxgs7lR2aRJrcC1TjMUDx1Y9Qaw
        vR3C5lYQfn/gPwX6h2eRVd6ROglZ+yQ861sMT0SAIvu73tRmQW1YTFiA1kG7YgrFV+6lToJqn4wAvU6X
        pFCgpdcEvWU5YQGKmuZHqS1Dk3wqKYEx0yI+ONmO9BIDPikaReZXw7goM+xfirahY2k9YYE/Jnwo7vMj
        s20Lb31jx3uVdmRdGMfBLCWKK0f2J9Lab40roLT4UK0N4owaONEPvF/rwpuSp3gtfxav5D2BpG0NuRIN
        sgr6k5c436DhLRktYHesYXjOjxumbYaXjQC5PQEckrl59m+cseHVPCte/syClzLNkE8G9i+hejy/S0Dv
        3EKHLYRGC1BjCKFkYAvHb3vwUZ0LB6oXWOD1U3M8+5M3hR2yFMJfQfDB9uHRfWaBBGa8QTxYDqHLAdya
        CfHMC7s3GJ7e4ObUv1PxjAXKunxhMIV/M8RxvXka6VndiUnI2qwoujoDudGF8U1geA1QLD2H04I70ebD
        sVtrnHqSqLvvZ7AIpFj3IxxOdwhvH5THF8ipNuPcdRuml4KwCjMY3QDPXoSfUwV49iRA0WoIwOV9DqLw
        ru+ONeF92lUZn/fFFjj7g0VovSsY1AFDemDmaQgG3z+zp5qTANWdJGhxETgaFB2UFaXKgZbWifgCX1SZ
        oBj0MVw7HuIgCcoACcgM29A6QnuC3J7dYXsWDIPVGhfK7JfwaV6cI5sOjwGVE0qh6DozwkH1o5JEQyKD
        PkMhglvbzQym50c6N2pMTTicfTe+AM1aObzCQXDj9DZnIRoUHXuBHxtWILumRVFRN5fiWK4yvoAIJQHK
        Br02PwnyD0QC6ZmC5Ah8r9saAfag6YYO+V//zj3i49N3oRn1JCZAQBFKX1Io7fyafliEUkxYNtA7MM9g
        AorgX24bUVI5gOPne7lLjpkWQAca3aTfPRKnBEdL9ZwBAtLMKPRCoyGQKCGC5T1zDBQ/0yFc5y7UDKHg
        +wdo7p7gI5v7hvCX+sakeRHl9WoUXIwhUSwdx6lLk+G6EzASStkgMGVGBNNz7Y9a/vHO+7PcL3Y1rh0B
        sXOSXM63MU7E/AtalhDrLgYBxRmTEMk0Crenyz/p0KeZ536xZ+eMEqDoUkzz2thB/nsUCj28oMLIoMiF
        R3ASo8VGF1iVfoFbdszLS5QA3TXoCldeG+efmvIrQzhSqOE0i1uQBKg8tDukzUYWiHt/FAQorv46yrsh
        LjhykERGwRBL0GlHs6dFSumn/S2RPuS6xxKg9zNLf4u9+GKN0upBpOequRx0SFXXW3k/i+d6XfMg6PYU
        eXnxePzCZxd4K+4bHD0OZyv5UrFXQ2loG8Hln3UMN0wtge4RX1b1pAaczCiUqlEsVSQJTkv7G0Ob8BAB
        Dsn1AAAAAElFTkSuQmCC
</value>
  </data>
  <data name="$this.ListaCampos" xml:space="preserve">
    <value>i.IdImpresion, i.IdFlujoDoc, (select d.iddocumento + ' - ' + d.nombredocumento from DocumentosCorrespondencia as d where d.iddocumento = i.codimpresion) as Documento, i.FechaEnDocumento, i.FechaImpresion, i.Descripcion, isnull(i.idorigen, (select f.NombreCliente from FlujosDocumentos as f where f.idflujodoc =i.idflujodoc ) ) as Origen , isnull(i.nombredestinatario,(select f.NombreCliente from FlujosDocumentos as f where f.idflujodoc =i.idflujodoc )) as Destinatario, s.idsiniestro, s.fechaocurrido, s.descripcionsiniestro,  (select top 1 t.descripcionbien from PolizasBienes as t where t.nombrebien = 'PLACA' and t.idpoliza = s.idpoliza and t.idproducto = s.idproducto and t.idcertificado = s.idcertificado) as Placa ,  cast(0 as bit) as Incluir</value>
  </data>
  <data name="$this.Tabla" xml:space="preserve">
    <value>FlujosDocumentosImpresiones as i inner join EnviosSiniestrosDetalle as e on e.idenvio = i.claves inner join Siniestros as s on s.idpoliza = e.idpoliza and s.idproducto = e.idproducto and s.idcertificado = e.idcertificado and s.idsiniestro = e.idsiniestro</value>
  </data>
</root>