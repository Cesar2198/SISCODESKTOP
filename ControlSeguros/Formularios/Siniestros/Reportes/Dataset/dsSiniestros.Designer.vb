'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8762
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsSiniestros"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsSiniestros
    Inherits Global.System.Data.DataSet
    
    Private tableSiniestros As SiniestrosDataTable
    
    Private tableImagenes As ImagenesDataTable
    
    Private tableAsegurados As AseguradosDataTable
    
    Private tableDetalle As DetalleDataTable
    
    Private tableGastos As GastosDataTable
    
    Private tablePagos As PagosDataTable
    
    Private tableBienesAsegurados As BienesAseguradosDataTable
    
    Private tableRequisitos As RequisitosDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Siniestros")) Is Nothing) Then
                MyBase.Tables.Add(New SiniestrosDataTable(ds.Tables("Siniestros")))
            End If
            If (Not (ds.Tables("Imagenes")) Is Nothing) Then
                MyBase.Tables.Add(New ImagenesDataTable(ds.Tables("Imagenes")))
            End If
            If (Not (ds.Tables("Asegurados")) Is Nothing) Then
                MyBase.Tables.Add(New AseguradosDataTable(ds.Tables("Asegurados")))
            End If
            If (Not (ds.Tables("Detalle")) Is Nothing) Then
                MyBase.Tables.Add(New DetalleDataTable(ds.Tables("Detalle")))
            End If
            If (Not (ds.Tables("Gastos")) Is Nothing) Then
                MyBase.Tables.Add(New GastosDataTable(ds.Tables("Gastos")))
            End If
            If (Not (ds.Tables("Pagos")) Is Nothing) Then
                MyBase.Tables.Add(New PagosDataTable(ds.Tables("Pagos")))
            End If
            If (Not (ds.Tables("BienesAsegurados")) Is Nothing) Then
                MyBase.Tables.Add(New BienesAseguradosDataTable(ds.Tables("BienesAsegurados")))
            End If
            If (Not (ds.Tables("Requisitos")) Is Nothing) Then
                MyBase.Tables.Add(New RequisitosDataTable(ds.Tables("Requisitos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Siniestros() As SiniestrosDataTable
        Get
            Return Me.tableSiniestros
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Imagenes() As ImagenesDataTable
        Get
            Return Me.tableImagenes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Asegurados() As AseguradosDataTable
        Get
            Return Me.tableAsegurados
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Detalle() As DetalleDataTable
        Get
            Return Me.tableDetalle
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Gastos() As GastosDataTable
        Get
            Return Me.tableGastos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pagos() As PagosDataTable
        Get
            Return Me.tablePagos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BienesAsegurados() As BienesAseguradosDataTable
        Get
            Return Me.tableBienesAsegurados
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Requisitos() As RequisitosDataTable
        Get
            Return Me.tableRequisitos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsSiniestros = CType(MyBase.Clone,dsSiniestros)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Siniestros")) Is Nothing) Then
                MyBase.Tables.Add(New SiniestrosDataTable(ds.Tables("Siniestros")))
            End If
            If (Not (ds.Tables("Imagenes")) Is Nothing) Then
                MyBase.Tables.Add(New ImagenesDataTable(ds.Tables("Imagenes")))
            End If
            If (Not (ds.Tables("Asegurados")) Is Nothing) Then
                MyBase.Tables.Add(New AseguradosDataTable(ds.Tables("Asegurados")))
            End If
            If (Not (ds.Tables("Detalle")) Is Nothing) Then
                MyBase.Tables.Add(New DetalleDataTable(ds.Tables("Detalle")))
            End If
            If (Not (ds.Tables("Gastos")) Is Nothing) Then
                MyBase.Tables.Add(New GastosDataTable(ds.Tables("Gastos")))
            End If
            If (Not (ds.Tables("Pagos")) Is Nothing) Then
                MyBase.Tables.Add(New PagosDataTable(ds.Tables("Pagos")))
            End If
            If (Not (ds.Tables("BienesAsegurados")) Is Nothing) Then
                MyBase.Tables.Add(New BienesAseguradosDataTable(ds.Tables("BienesAsegurados")))
            End If
            If (Not (ds.Tables("Requisitos")) Is Nothing) Then
                MyBase.Tables.Add(New RequisitosDataTable(ds.Tables("Requisitos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSiniestros = CType(MyBase.Tables("Siniestros"),SiniestrosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSiniestros) Is Nothing) Then
                Me.tableSiniestros.InitVars
            End If
        End If
        Me.tableImagenes = CType(MyBase.Tables("Imagenes"),ImagenesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableImagenes) Is Nothing) Then
                Me.tableImagenes.InitVars
            End If
        End If
        Me.tableAsegurados = CType(MyBase.Tables("Asegurados"),AseguradosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAsegurados) Is Nothing) Then
                Me.tableAsegurados.InitVars
            End If
        End If
        Me.tableDetalle = CType(MyBase.Tables("Detalle"),DetalleDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDetalle) Is Nothing) Then
                Me.tableDetalle.InitVars
            End If
        End If
        Me.tableGastos = CType(MyBase.Tables("Gastos"),GastosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGastos) Is Nothing) Then
                Me.tableGastos.InitVars
            End If
        End If
        Me.tablePagos = CType(MyBase.Tables("Pagos"),PagosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePagos) Is Nothing) Then
                Me.tablePagos.InitVars
            End If
        End If
        Me.tableBienesAsegurados = CType(MyBase.Tables("BienesAsegurados"),BienesAseguradosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBienesAsegurados) Is Nothing) Then
                Me.tableBienesAsegurados.InitVars
            End If
        End If
        Me.tableRequisitos = CType(MyBase.Tables("Requisitos"),RequisitosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRequisitos) Is Nothing) Then
                Me.tableRequisitos.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsSiniestros"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsSiniestros.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSiniestros = New SiniestrosDataTable
        MyBase.Tables.Add(Me.tableSiniestros)
        Me.tableImagenes = New ImagenesDataTable
        MyBase.Tables.Add(Me.tableImagenes)
        Me.tableAsegurados = New AseguradosDataTable
        MyBase.Tables.Add(Me.tableAsegurados)
        Me.tableDetalle = New DetalleDataTable
        MyBase.Tables.Add(Me.tableDetalle)
        Me.tableGastos = New GastosDataTable
        MyBase.Tables.Add(Me.tableGastos)
        Me.tablePagos = New PagosDataTable
        MyBase.Tables.Add(Me.tablePagos)
        Me.tableBienesAsegurados = New BienesAseguradosDataTable
        MyBase.Tables.Add(Me.tableBienesAsegurados)
        Me.tableRequisitos = New RequisitosDataTable
        MyBase.Tables.Add(Me.tableRequisitos)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSiniestros() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeImagenes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAsegurados() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDetalle() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGastos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePagos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBienesAsegurados() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRequisitos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsSiniestros = New dsSiniestros
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub SiniestrosRowChangeEventHandler(ByVal sender As Object, ByVal e As SiniestrosRowChangeEvent)
    
    Public Delegate Sub ImagenesRowChangeEventHandler(ByVal sender As Object, ByVal e As ImagenesRowChangeEvent)
    
    Public Delegate Sub AseguradosRowChangeEventHandler(ByVal sender As Object, ByVal e As AseguradosRowChangeEvent)
    
    Public Delegate Sub DetalleRowChangeEventHandler(ByVal sender As Object, ByVal e As DetalleRowChangeEvent)
    
    Public Delegate Sub GastosRowChangeEventHandler(ByVal sender As Object, ByVal e As GastosRowChangeEvent)
    
    Public Delegate Sub PagosRowChangeEventHandler(ByVal sender As Object, ByVal e As PagosRowChangeEvent)
    
    Public Delegate Sub BienesAseguradosRowChangeEventHandler(ByVal sender As Object, ByVal e As BienesAseguradosRowChangeEvent)
    
    Public Delegate Sub RequisitosRowChangeEventHandler(ByVal sender As Object, ByVal e As RequisitosRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SiniestrosDataTable
        Inherits Global.System.Data.TypedTableBase(Of SiniestrosRow)
        
        Private columnIdPoliza As Global.System.Data.DataColumn
        
        Private columnIdProducto As Global.System.Data.DataColumn
        
        Private columnIdCertificado As Global.System.Data.DataColumn
        
        Private columnIdSiniestro As Global.System.Data.DataColumn
        
        Private columnFechaOcurrido As Global.System.Data.DataColumn
        
        Private columnFechaPresentado As Global.System.Data.DataColumn
        
        Private columnEstadoSiniestro As Global.System.Data.DataColumn
        
        Private columnNombrePresentaReclamo As Global.System.Data.DataColumn
        
        Private columnLugarSiniestros As Global.System.Data.DataColumn
        
        Private columnDescripcionSiniestro As Global.System.Data.DataColumn
        
        Private columnDescripcionReserva As Global.System.Data.DataColumn
        
        Private columnTotalPresentado As Global.System.Data.DataColumn
        
        Private columnTotalNoCubierto As Global.System.Data.DataColumn
        
        Private columnTotalCubierto As Global.System.Data.DataColumn
        
        Private columnTotalDeducible As Global.System.Data.DataColumn
        
        Private columnTotalCoaseguro As Global.System.Data.DataColumn
        
        Private columnTotalDeudores As Global.System.Data.DataColumn
        
        Private columnTotalPendiente As Global.System.Data.DataColumn
        
        Private columnTotalReembolso As Global.System.Data.DataColumn
        
        Private columnAseguradora As Global.System.Data.DataColumn
        
        Private columnProducto As Global.System.Data.DataColumn
        
        Private columnIdSiniestroAseguradora As Global.System.Data.DataColumn
        
        Private columnIdEnvio As Global.System.Data.DataColumn
        
        Private columnContratante As Global.System.Data.DataColumn
        
        Private columnAsegurado As Global.System.Data.DataColumn
        
        Private columnVigenciaDesde As Global.System.Data.DataColumn
        
        Private columnVigenciaHasta As Global.System.Data.DataColumn
        
        Private columnTipoProducto As Global.System.Data.DataColumn
        
        Private columnDescripcionLiquidacion As Global.System.Data.DataColumn
        
        Private columnUltimaGestion As Global.System.Data.DataColumn
        
        Private columnEjecutivoCta As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Siniestros"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdPolizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdPoliza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCertificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCertificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdSiniestroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdSiniestro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaOcurridoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaOcurrido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaPresentadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaPresentado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoSiniestroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstadoSiniestro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombrePresentaReclamoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombrePresentaReclamo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LugarSiniestrosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLugarSiniestros
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionSiniestroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionSiniestro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionReservaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionReserva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalPresentadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalPresentado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalNoCubiertoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalNoCubierto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalCubiertoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalCubierto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalDeducibleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalDeducible
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalCoaseguroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalCoaseguro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalDeudoresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalDeudores
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalPendienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalPendiente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalReembolsoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalReembolso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AseguradoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAseguradora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdSiniestroAseguradoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdSiniestroAseguradora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContratanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContratante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AseguradoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAsegurado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VigenciaDesdeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVigenciaDesde
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VigenciaHastaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVigenciaHasta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionLiquidacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcionLiquidacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UltimaGestionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUltimaGestion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EjecutivoCtaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEjecutivoCta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SiniestrosRow
            Get
                Return CType(Me.Rows(index),SiniestrosRow)
            End Get
        End Property
        
        Public Event SiniestrosRowChanging As SiniestrosRowChangeEventHandler
        
        Public Event SiniestrosRowChanged As SiniestrosRowChangeEventHandler
        
        Public Event SiniestrosRowDeleting As SiniestrosRowChangeEventHandler
        
        Public Event SiniestrosRowDeleted As SiniestrosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSiniestrosRow(ByVal row As SiniestrosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSiniestrosRow( _
                    ByVal IdPoliza As String,  _
                    ByVal IdProducto As String,  _
                    ByVal IdCertificado As String,  _
                    ByVal IdSiniestro As String,  _
                    ByVal FechaOcurrido As Date,  _
                    ByVal FechaPresentado As Date,  _
                    ByVal EstadoSiniestro As String,  _
                    ByVal NombrePresentaReclamo As String,  _
                    ByVal LugarSiniestros As String,  _
                    ByVal DescripcionSiniestro As String,  _
                    ByVal DescripcionReserva As String,  _
                    ByVal TotalPresentado As Decimal,  _
                    ByVal TotalNoCubierto As Decimal,  _
                    ByVal TotalCubierto As Decimal,  _
                    ByVal TotalDeducible As Decimal,  _
                    ByVal TotalCoaseguro As Decimal,  _
                    ByVal TotalDeudores As Decimal,  _
                    ByVal TotalPendiente As Decimal,  _
                    ByVal TotalReembolso As Decimal,  _
                    ByVal Aseguradora As String,  _
                    ByVal Producto As String,  _
                    ByVal IdSiniestroAseguradora As String,  _
                    ByVal IdEnvio As String,  _
                    ByVal Contratante As String,  _
                    ByVal Asegurado As String,  _
                    ByVal VigenciaDesde As Date,  _
                    ByVal VigenciaHasta As Date,  _
                    ByVal TipoProducto As String,  _
                    ByVal DescripcionLiquidacion As String,  _
                    ByVal UltimaGestion As String,  _
                    ByVal EjecutivoCta As String) As SiniestrosRow
            Dim rowSiniestrosRow As SiniestrosRow = CType(Me.NewRow,SiniestrosRow)
            Dim columnValuesArray() As Object = New Object() {IdPoliza, IdProducto, IdCertificado, IdSiniestro, FechaOcurrido, FechaPresentado, EstadoSiniestro, NombrePresentaReclamo, LugarSiniestros, DescripcionSiniestro, DescripcionReserva, TotalPresentado, TotalNoCubierto, TotalCubierto, TotalDeducible, TotalCoaseguro, TotalDeudores, TotalPendiente, TotalReembolso, Aseguradora, Producto, IdSiniestroAseguradora, IdEnvio, Contratante, Asegurado, VigenciaDesde, VigenciaHasta, TipoProducto, DescripcionLiquidacion, UltimaGestion, EjecutivoCta}
            rowSiniestrosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSiniestrosRow)
            Return rowSiniestrosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SiniestrosDataTable = CType(MyBase.Clone,SiniestrosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SiniestrosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdPoliza = MyBase.Columns("IdPoliza")
            Me.columnIdProducto = MyBase.Columns("IdProducto")
            Me.columnIdCertificado = MyBase.Columns("IdCertificado")
            Me.columnIdSiniestro = MyBase.Columns("IdSiniestro")
            Me.columnFechaOcurrido = MyBase.Columns("FechaOcurrido")
            Me.columnFechaPresentado = MyBase.Columns("FechaPresentado")
            Me.columnEstadoSiniestro = MyBase.Columns("EstadoSiniestro")
            Me.columnNombrePresentaReclamo = MyBase.Columns("NombrePresentaReclamo")
            Me.columnLugarSiniestros = MyBase.Columns("LugarSiniestros")
            Me.columnDescripcionSiniestro = MyBase.Columns("DescripcionSiniestro")
            Me.columnDescripcionReserva = MyBase.Columns("DescripcionReserva")
            Me.columnTotalPresentado = MyBase.Columns("TotalPresentado")
            Me.columnTotalNoCubierto = MyBase.Columns("TotalNoCubierto")
            Me.columnTotalCubierto = MyBase.Columns("TotalCubierto")
            Me.columnTotalDeducible = MyBase.Columns("TotalDeducible")
            Me.columnTotalCoaseguro = MyBase.Columns("TotalCoaseguro")
            Me.columnTotalDeudores = MyBase.Columns("TotalDeudores")
            Me.columnTotalPendiente = MyBase.Columns("TotalPendiente")
            Me.columnTotalReembolso = MyBase.Columns("TotalReembolso")
            Me.columnAseguradora = MyBase.Columns("Aseguradora")
            Me.columnProducto = MyBase.Columns("Producto")
            Me.columnIdSiniestroAseguradora = MyBase.Columns("IdSiniestroAseguradora")
            Me.columnIdEnvio = MyBase.Columns("IdEnvio")
            Me.columnContratante = MyBase.Columns("Contratante")
            Me.columnAsegurado = MyBase.Columns("Asegurado")
            Me.columnVigenciaDesde = MyBase.Columns("VigenciaDesde")
            Me.columnVigenciaHasta = MyBase.Columns("VigenciaHasta")
            Me.columnTipoProducto = MyBase.Columns("TipoProducto")
            Me.columnDescripcionLiquidacion = MyBase.Columns("DescripcionLiquidacion")
            Me.columnUltimaGestion = MyBase.Columns("UltimaGestion")
            Me.columnEjecutivoCta = MyBase.Columns("EjecutivoCta")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdPoliza = New Global.System.Data.DataColumn("IdPoliza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdPoliza)
            Me.columnIdProducto = New Global.System.Data.DataColumn("IdProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdProducto)
            Me.columnIdCertificado = New Global.System.Data.DataColumn("IdCertificado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCertificado)
            Me.columnIdSiniestro = New Global.System.Data.DataColumn("IdSiniestro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdSiniestro)
            Me.columnFechaOcurrido = New Global.System.Data.DataColumn("FechaOcurrido", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaOcurrido)
            Me.columnFechaPresentado = New Global.System.Data.DataColumn("FechaPresentado", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaPresentado)
            Me.columnEstadoSiniestro = New Global.System.Data.DataColumn("EstadoSiniestro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoSiniestro)
            Me.columnNombrePresentaReclamo = New Global.System.Data.DataColumn("NombrePresentaReclamo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombrePresentaReclamo)
            Me.columnLugarSiniestros = New Global.System.Data.DataColumn("LugarSiniestros", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLugarSiniestros)
            Me.columnDescripcionSiniestro = New Global.System.Data.DataColumn("DescripcionSiniestro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionSiniestro)
            Me.columnDescripcionReserva = New Global.System.Data.DataColumn("DescripcionReserva", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionReserva)
            Me.columnTotalPresentado = New Global.System.Data.DataColumn("TotalPresentado", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalPresentado)
            Me.columnTotalNoCubierto = New Global.System.Data.DataColumn("TotalNoCubierto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalNoCubierto)
            Me.columnTotalCubierto = New Global.System.Data.DataColumn("TotalCubierto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalCubierto)
            Me.columnTotalDeducible = New Global.System.Data.DataColumn("TotalDeducible", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalDeducible)
            Me.columnTotalCoaseguro = New Global.System.Data.DataColumn("TotalCoaseguro", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalCoaseguro)
            Me.columnTotalDeudores = New Global.System.Data.DataColumn("TotalDeudores", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalDeudores)
            Me.columnTotalPendiente = New Global.System.Data.DataColumn("TotalPendiente", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalPendiente)
            Me.columnTotalReembolso = New Global.System.Data.DataColumn("TotalReembolso", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalReembolso)
            Me.columnAseguradora = New Global.System.Data.DataColumn("Aseguradora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAseguradora)
            Me.columnProducto = New Global.System.Data.DataColumn("Producto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProducto)
            Me.columnIdSiniestroAseguradora = New Global.System.Data.DataColumn("IdSiniestroAseguradora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdSiniestroAseguradora)
            Me.columnIdEnvio = New Global.System.Data.DataColumn("IdEnvio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdEnvio)
            Me.columnContratante = New Global.System.Data.DataColumn("Contratante", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContratante)
            Me.columnAsegurado = New Global.System.Data.DataColumn("Asegurado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAsegurado)
            Me.columnVigenciaDesde = New Global.System.Data.DataColumn("VigenciaDesde", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVigenciaDesde)
            Me.columnVigenciaHasta = New Global.System.Data.DataColumn("VigenciaHasta", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVigenciaHasta)
            Me.columnTipoProducto = New Global.System.Data.DataColumn("TipoProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoProducto)
            Me.columnDescripcionLiquidacion = New Global.System.Data.DataColumn("DescripcionLiquidacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcionLiquidacion)
            Me.columnUltimaGestion = New Global.System.Data.DataColumn("UltimaGestion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUltimaGestion)
            Me.columnEjecutivoCta = New Global.System.Data.DataColumn("EjecutivoCta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEjecutivoCta)
            Me.columnIdPoliza.AllowDBNull = false
            Me.columnIdPoliza.MaxLength = 25
            Me.columnIdProducto.AllowDBNull = false
            Me.columnIdProducto.MaxLength = 25
            Me.columnIdCertificado.AllowDBNull = false
            Me.columnIdCertificado.MaxLength = 25
            Me.columnIdSiniestro.AllowDBNull = false
            Me.columnIdSiniestro.MaxLength = 25
            Me.columnEstadoSiniestro.MaxLength = 25
            Me.columnNombrePresentaReclamo.MaxLength = 150
            Me.columnLugarSiniestros.MaxLength = 2147483647
            Me.columnDescripcionSiniestro.MaxLength = 2147483647
            Me.columnDescripcionReserva.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSiniestrosRow() As SiniestrosRow
            Return CType(Me.NewRow,SiniestrosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SiniestrosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SiniestrosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SiniestrosRowChangedEvent) Is Nothing) Then
                RaiseEvent SiniestrosRowChanged(Me, New SiniestrosRowChangeEvent(CType(e.Row,SiniestrosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SiniestrosRowChangingEvent) Is Nothing) Then
                RaiseEvent SiniestrosRowChanging(Me, New SiniestrosRowChangeEvent(CType(e.Row,SiniestrosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SiniestrosRowDeletedEvent) Is Nothing) Then
                RaiseEvent SiniestrosRowDeleted(Me, New SiniestrosRowChangeEvent(CType(e.Row,SiniestrosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SiniestrosRowDeletingEvent) Is Nothing) Then
                RaiseEvent SiniestrosRowDeleting(Me, New SiniestrosRowChangeEvent(CType(e.Row,SiniestrosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSiniestrosRow(ByVal row As SiniestrosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSiniestros = New dsSiniestros
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SiniestrosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ImagenesDataTable
        Inherits Global.System.Data.TypedTableBase(Of ImagenesRow)
        
        Private columnLogo As Global.System.Data.DataColumn
        
        Private columnSello As Global.System.Data.DataColumn
        
        Private columnLogo2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Imagenes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SelloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSello
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Logo2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogo2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImagenesRow
            Get
                Return CType(Me.Rows(index),ImagenesRow)
            End Get
        End Property
        
        Public Event ImagenesRowChanging As ImagenesRowChangeEventHandler
        
        Public Event ImagenesRowChanged As ImagenesRowChangeEventHandler
        
        Public Event ImagenesRowDeleting As ImagenesRowChangeEventHandler
        
        Public Event ImagenesRowDeleted As ImagenesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddImagenesRow(ByVal row As ImagenesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddImagenesRow(ByVal Logo() As Byte, ByVal Sello() As Byte, ByVal Logo2() As Byte) As ImagenesRow
            Dim rowImagenesRow As ImagenesRow = CType(Me.NewRow,ImagenesRow)
            Dim columnValuesArray() As Object = New Object() {Logo, Sello, Logo2}
            rowImagenesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowImagenesRow)
            Return rowImagenesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ImagenesDataTable = CType(MyBase.Clone,ImagenesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ImagenesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLogo = MyBase.Columns("Logo")
            Me.columnSello = MyBase.Columns("Sello")
            Me.columnLogo2 = MyBase.Columns("Logo2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLogo = New Global.System.Data.DataColumn("Logo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogo)
            Me.columnSello = New Global.System.Data.DataColumn("Sello", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSello)
            Me.columnLogo2 = New Global.System.Data.DataColumn("Logo2", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogo2)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewImagenesRow() As ImagenesRow
            Return CType(Me.NewRow,ImagenesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ImagenesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ImagenesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImagenesRowChangedEvent) Is Nothing) Then
                RaiseEvent ImagenesRowChanged(Me, New ImagenesRowChangeEvent(CType(e.Row,ImagenesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImagenesRowChangingEvent) Is Nothing) Then
                RaiseEvent ImagenesRowChanging(Me, New ImagenesRowChangeEvent(CType(e.Row,ImagenesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImagenesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImagenesRowDeleted(Me, New ImagenesRowChangeEvent(CType(e.Row,ImagenesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImagenesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImagenesRowDeleting(Me, New ImagenesRowChangeEvent(CType(e.Row,ImagenesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveImagenesRow(ByVal row As ImagenesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSiniestros = New dsSiniestros
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ImagenesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AseguradosDataTable
        Inherits Global.System.Data.TypedTableBase(Of AseguradosRow)
        
        Private columnIdPoliza As Global.System.Data.DataColumn
        
        Private columnIdCertificado As Global.System.Data.DataColumn
        
        Private columnIdBien As Global.System.Data.DataColumn
        
        Private columnAsegurado As Global.System.Data.DataColumn
        
        Private columnFechaNacimiento As Global.System.Data.DataColumn
        
        Private columnEdad As Global.System.Data.DataColumn
        
        Private columnParentesco As Global.System.Data.DataColumn
        
        Private columnDeducible As Global.System.Data.DataColumn
        
        Private columnLimiteCoaseguro As Global.System.Data.DataColumn
        
        Private columnMaxVitalicio As Global.System.Data.DataColumn
        
        Private columnPorceReembolso As Global.System.Data.DataColumn
        
        Private columnPlan As Global.System.Data.DataColumn
        
        Private columnSumaAsegurada As Global.System.Data.DataColumn
        
        Private columnContratante As Global.System.Data.DataColumn
        
        Private columnValorReclamos As Global.System.Data.DataColumn
        
        Private columnPrimaNeta As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Asegurados"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdPolizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdPoliza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCertificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCertificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdBienColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdBien
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AseguradoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAsegurado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaNacimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaNacimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EdadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParentescoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParentesco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeducibleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeducible
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LimiteCoaseguroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLimiteCoaseguro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaxVitalicioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaxVitalicio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorceReembolsoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorceReembolso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumaAseguradaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumaAsegurada
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContratanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContratante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValorReclamosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValorReclamos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrimaNetaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrimaNeta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AseguradosRow
            Get
                Return CType(Me.Rows(index),AseguradosRow)
            End Get
        End Property
        
        Public Event AseguradosRowChanging As AseguradosRowChangeEventHandler
        
        Public Event AseguradosRowChanged As AseguradosRowChangeEventHandler
        
        Public Event AseguradosRowDeleting As AseguradosRowChangeEventHandler
        
        Public Event AseguradosRowDeleted As AseguradosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAseguradosRow(ByVal row As AseguradosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAseguradosRow( _
                    ByVal IdPoliza As String,  _
                    ByVal IdCertificado As String,  _
                    ByVal IdBien As String,  _
                    ByVal Asegurado As String,  _
                    ByVal FechaNacimiento As String,  _
                    ByVal Edad As Integer,  _
                    ByVal Parentesco As String,  _
                    ByVal Deducible As String,  _
                    ByVal LimiteCoaseguro As String,  _
                    ByVal MaxVitalicio As String,  _
                    ByVal PorceReembolso As String,  _
                    ByVal Plan As String,  _
                    ByVal SumaAsegurada As Double,  _
                    ByVal Contratante As String,  _
                    ByVal ValorReclamos As Double,  _
                    ByVal PrimaNeta As Double) As AseguradosRow
            Dim rowAseguradosRow As AseguradosRow = CType(Me.NewRow,AseguradosRow)
            Dim columnValuesArray() As Object = New Object() {IdPoliza, IdCertificado, IdBien, Asegurado, FechaNacimiento, Edad, Parentesco, Deducible, LimiteCoaseguro, MaxVitalicio, PorceReembolso, Plan, SumaAsegurada, Contratante, ValorReclamos, PrimaNeta}
            rowAseguradosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAseguradosRow)
            Return rowAseguradosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AseguradosDataTable = CType(MyBase.Clone,AseguradosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AseguradosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdPoliza = MyBase.Columns("IdPoliza")
            Me.columnIdCertificado = MyBase.Columns("IdCertificado")
            Me.columnIdBien = MyBase.Columns("IdBien")
            Me.columnAsegurado = MyBase.Columns("Asegurado")
            Me.columnFechaNacimiento = MyBase.Columns("FechaNacimiento")
            Me.columnEdad = MyBase.Columns("Edad")
            Me.columnParentesco = MyBase.Columns("Parentesco")
            Me.columnDeducible = MyBase.Columns("Deducible")
            Me.columnLimiteCoaseguro = MyBase.Columns("LimiteCoaseguro")
            Me.columnMaxVitalicio = MyBase.Columns("MaxVitalicio")
            Me.columnPorceReembolso = MyBase.Columns("PorceReembolso")
            Me.columnPlan = MyBase.Columns("Plan")
            Me.columnSumaAsegurada = MyBase.Columns("SumaAsegurada")
            Me.columnContratante = MyBase.Columns("Contratante")
            Me.columnValorReclamos = MyBase.Columns("ValorReclamos")
            Me.columnPrimaNeta = MyBase.Columns("PrimaNeta")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdPoliza = New Global.System.Data.DataColumn("IdPoliza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdPoliza)
            Me.columnIdCertificado = New Global.System.Data.DataColumn("IdCertificado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCertificado)
            Me.columnIdBien = New Global.System.Data.DataColumn("IdBien", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdBien)
            Me.columnAsegurado = New Global.System.Data.DataColumn("Asegurado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAsegurado)
            Me.columnFechaNacimiento = New Global.System.Data.DataColumn("FechaNacimiento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaNacimiento)
            Me.columnEdad = New Global.System.Data.DataColumn("Edad", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdad)
            Me.columnParentesco = New Global.System.Data.DataColumn("Parentesco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParentesco)
            Me.columnDeducible = New Global.System.Data.DataColumn("Deducible", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeducible)
            Me.columnLimiteCoaseguro = New Global.System.Data.DataColumn("LimiteCoaseguro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLimiteCoaseguro)
            Me.columnMaxVitalicio = New Global.System.Data.DataColumn("MaxVitalicio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaxVitalicio)
            Me.columnPorceReembolso = New Global.System.Data.DataColumn("PorceReembolso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorceReembolso)
            Me.columnPlan = New Global.System.Data.DataColumn("Plan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlan)
            Me.columnSumaAsegurada = New Global.System.Data.DataColumn("SumaAsegurada", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumaAsegurada)
            Me.columnContratante = New Global.System.Data.DataColumn("Contratante", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContratante)
            Me.columnValorReclamos = New Global.System.Data.DataColumn("ValorReclamos", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValorReclamos)
            Me.columnPrimaNeta = New Global.System.Data.DataColumn("PrimaNeta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrimaNeta)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAseguradosRow() As AseguradosRow
            Return CType(Me.NewRow,AseguradosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AseguradosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AseguradosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AseguradosRowChangedEvent) Is Nothing) Then
                RaiseEvent AseguradosRowChanged(Me, New AseguradosRowChangeEvent(CType(e.Row,AseguradosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AseguradosRowChangingEvent) Is Nothing) Then
                RaiseEvent AseguradosRowChanging(Me, New AseguradosRowChangeEvent(CType(e.Row,AseguradosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AseguradosRowDeletedEvent) Is Nothing) Then
                RaiseEvent AseguradosRowDeleted(Me, New AseguradosRowChangeEvent(CType(e.Row,AseguradosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AseguradosRowDeletingEvent) Is Nothing) Then
                RaiseEvent AseguradosRowDeleting(Me, New AseguradosRowChangeEvent(CType(e.Row,AseguradosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAseguradosRow(ByVal row As AseguradosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSiniestros = New dsSiniestros
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AseguradosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DetalleDataTable
        Inherits Global.System.Data.TypedTableBase(Of DetalleRow)
        
        Private columnIdPoliza As Global.System.Data.DataColumn
        
        Private columnIdProducto As Global.System.Data.DataColumn
        
        Private columnIdCertificado As Global.System.Data.DataColumn
        
        Private columnIdSiniestro As Global.System.Data.DataColumn
        
        Private columnOrden As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnDetalle As Global.System.Data.DataColumn
        
        Private columnCategoria As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Detalle"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdPolizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdPoliza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCertificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCertificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdSiniestroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdSiniestro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrdenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrden
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DetalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDetalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CategoriaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCategoria
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DetalleRow
            Get
                Return CType(Me.Rows(index),DetalleRow)
            End Get
        End Property
        
        Public Event DetalleRowChanging As DetalleRowChangeEventHandler
        
        Public Event DetalleRowChanged As DetalleRowChangeEventHandler
        
        Public Event DetalleRowDeleting As DetalleRowChangeEventHandler
        
        Public Event DetalleRowDeleted As DetalleRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDetalleRow(ByVal row As DetalleRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDetalleRow(ByVal IdPoliza As String, ByVal IdProducto As String, ByVal IdCertificado As String, ByVal IdSiniestro As String, ByVal Orden As Integer, ByVal Descripcion As String, ByVal Detalle As String, ByVal Categoria As String) As DetalleRow
            Dim rowDetalleRow As DetalleRow = CType(Me.NewRow,DetalleRow)
            Dim columnValuesArray() As Object = New Object() {IdPoliza, IdProducto, IdCertificado, IdSiniestro, Orden, Descripcion, Detalle, Categoria}
            rowDetalleRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDetalleRow)
            Return rowDetalleRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DetalleDataTable = CType(MyBase.Clone,DetalleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DetalleDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdPoliza = MyBase.Columns("IdPoliza")
            Me.columnIdProducto = MyBase.Columns("IdProducto")
            Me.columnIdCertificado = MyBase.Columns("IdCertificado")
            Me.columnIdSiniestro = MyBase.Columns("IdSiniestro")
            Me.columnOrden = MyBase.Columns("Orden")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnDetalle = MyBase.Columns("Detalle")
            Me.columnCategoria = MyBase.Columns("Categoria")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdPoliza = New Global.System.Data.DataColumn("IdPoliza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdPoliza)
            Me.columnIdProducto = New Global.System.Data.DataColumn("IdProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdProducto)
            Me.columnIdCertificado = New Global.System.Data.DataColumn("IdCertificado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCertificado)
            Me.columnIdSiniestro = New Global.System.Data.DataColumn("IdSiniestro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdSiniestro)
            Me.columnOrden = New Global.System.Data.DataColumn("Orden", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrden)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnDetalle = New Global.System.Data.DataColumn("Detalle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDetalle)
            Me.columnCategoria = New Global.System.Data.DataColumn("Categoria", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCategoria)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDetalleRow() As DetalleRow
            Return CType(Me.NewRow,DetalleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DetalleRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DetalleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DetalleRowChangedEvent) Is Nothing) Then
                RaiseEvent DetalleRowChanged(Me, New DetalleRowChangeEvent(CType(e.Row,DetalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DetalleRowChangingEvent) Is Nothing) Then
                RaiseEvent DetalleRowChanging(Me, New DetalleRowChangeEvent(CType(e.Row,DetalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DetalleRowDeletedEvent) Is Nothing) Then
                RaiseEvent DetalleRowDeleted(Me, New DetalleRowChangeEvent(CType(e.Row,DetalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DetalleRowDeletingEvent) Is Nothing) Then
                RaiseEvent DetalleRowDeleting(Me, New DetalleRowChangeEvent(CType(e.Row,DetalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDetalleRow(ByVal row As DetalleRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSiniestros = New dsSiniestros
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DetalleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GastosDataTable
        Inherits Global.System.Data.TypedTableBase(Of GastosRow)
        
        Private columnIdPoliza As Global.System.Data.DataColumn
        
        Private columnIdProducto As Global.System.Data.DataColumn
        
        Private columnIdCertificado As Global.System.Data.DataColumn
        
        Private columnIdSiniestro As Global.System.Data.DataColumn
        
        Private columnOrden As Global.System.Data.DataColumn
        
        Private columnGasto As Global.System.Data.DataColumn
        
        Private columnPresentado As Global.System.Data.DataColumn
        
        Private columnNoCubierto As Global.System.Data.DataColumn
        
        Private columnCubierto As Global.System.Data.DataColumn
        
        Private columnObservaciones As Global.System.Data.DataColumn
        
        Private columnFechaPresentado As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Gastos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdPolizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdPoliza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCertificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCertificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdSiniestroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdSiniestro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrdenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrden
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GastoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGasto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PresentadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPresentado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoCubiertoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoCubierto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CubiertoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCubierto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaPresentadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaPresentado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GastosRow
            Get
                Return CType(Me.Rows(index),GastosRow)
            End Get
        End Property
        
        Public Event GastosRowChanging As GastosRowChangeEventHandler
        
        Public Event GastosRowChanged As GastosRowChangeEventHandler
        
        Public Event GastosRowDeleting As GastosRowChangeEventHandler
        
        Public Event GastosRowDeleted As GastosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddGastosRow(ByVal row As GastosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddGastosRow(ByVal IdPoliza As String, ByVal IdProducto As String, ByVal IdCertificado As String, ByVal IdSiniestro As String, ByVal Orden As Integer, ByVal Gasto As String, ByVal Presentado As Double, ByVal NoCubierto As Double, ByVal Cubierto As Double, ByVal Observaciones As String, ByVal FechaPresentado As Date) As GastosRow
            Dim rowGastosRow As GastosRow = CType(Me.NewRow,GastosRow)
            Dim columnValuesArray() As Object = New Object() {IdPoliza, IdProducto, IdCertificado, IdSiniestro, Orden, Gasto, Presentado, NoCubierto, Cubierto, Observaciones, FechaPresentado}
            rowGastosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowGastosRow)
            Return rowGastosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As GastosDataTable = CType(MyBase.Clone,GastosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New GastosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdPoliza = MyBase.Columns("IdPoliza")
            Me.columnIdProducto = MyBase.Columns("IdProducto")
            Me.columnIdCertificado = MyBase.Columns("IdCertificado")
            Me.columnIdSiniestro = MyBase.Columns("IdSiniestro")
            Me.columnOrden = MyBase.Columns("Orden")
            Me.columnGasto = MyBase.Columns("Gasto")
            Me.columnPresentado = MyBase.Columns("Presentado")
            Me.columnNoCubierto = MyBase.Columns("NoCubierto")
            Me.columnCubierto = MyBase.Columns("Cubierto")
            Me.columnObservaciones = MyBase.Columns("Observaciones")
            Me.columnFechaPresentado = MyBase.Columns("FechaPresentado")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdPoliza = New Global.System.Data.DataColumn("IdPoliza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdPoliza)
            Me.columnIdProducto = New Global.System.Data.DataColumn("IdProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdProducto)
            Me.columnIdCertificado = New Global.System.Data.DataColumn("IdCertificado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCertificado)
            Me.columnIdSiniestro = New Global.System.Data.DataColumn("IdSiniestro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdSiniestro)
            Me.columnOrden = New Global.System.Data.DataColumn("Orden", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrden)
            Me.columnGasto = New Global.System.Data.DataColumn("Gasto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGasto)
            Me.columnPresentado = New Global.System.Data.DataColumn("Presentado", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPresentado)
            Me.columnNoCubierto = New Global.System.Data.DataColumn("NoCubierto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoCubierto)
            Me.columnCubierto = New Global.System.Data.DataColumn("Cubierto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCubierto)
            Me.columnObservaciones = New Global.System.Data.DataColumn("Observaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservaciones)
            Me.columnFechaPresentado = New Global.System.Data.DataColumn("FechaPresentado", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaPresentado)
            Me.columnGasto.Caption = "Descripcion"
            Me.columnPresentado.Caption = "Detalle"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewGastosRow() As GastosRow
            Return CType(Me.NewRow,GastosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New GastosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(GastosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GastosRowChangedEvent) Is Nothing) Then
                RaiseEvent GastosRowChanged(Me, New GastosRowChangeEvent(CType(e.Row,GastosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GastosRowChangingEvent) Is Nothing) Then
                RaiseEvent GastosRowChanging(Me, New GastosRowChangeEvent(CType(e.Row,GastosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GastosRowDeletedEvent) Is Nothing) Then
                RaiseEvent GastosRowDeleted(Me, New GastosRowChangeEvent(CType(e.Row,GastosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GastosRowDeletingEvent) Is Nothing) Then
                RaiseEvent GastosRowDeleting(Me, New GastosRowChangeEvent(CType(e.Row,GastosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveGastosRow(ByVal row As GastosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSiniestros = New dsSiniestros
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GastosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PagosDataTable
        Inherits Global.System.Data.TypedTableBase(Of PagosRow)
        
        Private columnIdPoliza As Global.System.Data.DataColumn
        
        Private columnIdProducto As Global.System.Data.DataColumn
        
        Private columnIdCertificado As Global.System.Data.DataColumn
        
        Private columnIdSiniestro As Global.System.Data.DataColumn
        
        Private columnOrden As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnNombreCheque As Global.System.Data.DataColumn
        
        Private columnNumeroCheque As Global.System.Data.DataColumn
        
        Private columnValorReembolso As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pagos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdPolizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdPoliza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCertificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCertificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdSiniestroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdSiniestro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrdenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrden
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreChequeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCheque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumeroChequeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroCheque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValorReembolsoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValorReembolso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PagosRow
            Get
                Return CType(Me.Rows(index),PagosRow)
            End Get
        End Property
        
        Public Event PagosRowChanging As PagosRowChangeEventHandler
        
        Public Event PagosRowChanged As PagosRowChangeEventHandler
        
        Public Event PagosRowDeleting As PagosRowChangeEventHandler
        
        Public Event PagosRowDeleted As PagosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPagosRow(ByVal row As PagosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPagosRow(ByVal IdPoliza As String, ByVal IdProducto As String, ByVal IdCertificado As String, ByVal IdSiniestro As String, ByVal Orden As Integer, ByVal Fecha As Date, ByVal NombreCheque As String, ByVal NumeroCheque As String, ByVal ValorReembolso As Double) As PagosRow
            Dim rowPagosRow As PagosRow = CType(Me.NewRow,PagosRow)
            Dim columnValuesArray() As Object = New Object() {IdPoliza, IdProducto, IdCertificado, IdSiniestro, Orden, Fecha, NombreCheque, NumeroCheque, ValorReembolso}
            rowPagosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPagosRow)
            Return rowPagosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PagosDataTable = CType(MyBase.Clone,PagosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PagosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdPoliza = MyBase.Columns("IdPoliza")
            Me.columnIdProducto = MyBase.Columns("IdProducto")
            Me.columnIdCertificado = MyBase.Columns("IdCertificado")
            Me.columnIdSiniestro = MyBase.Columns("IdSiniestro")
            Me.columnOrden = MyBase.Columns("Orden")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnNombreCheque = MyBase.Columns("NombreCheque")
            Me.columnNumeroCheque = MyBase.Columns("NumeroCheque")
            Me.columnValorReembolso = MyBase.Columns("ValorReembolso")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdPoliza = New Global.System.Data.DataColumn("IdPoliza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdPoliza)
            Me.columnIdProducto = New Global.System.Data.DataColumn("IdProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdProducto)
            Me.columnIdCertificado = New Global.System.Data.DataColumn("IdCertificado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCertificado)
            Me.columnIdSiniestro = New Global.System.Data.DataColumn("IdSiniestro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdSiniestro)
            Me.columnOrden = New Global.System.Data.DataColumn("Orden", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrden)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnNombreCheque = New Global.System.Data.DataColumn("NombreCheque", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCheque)
            Me.columnNumeroCheque = New Global.System.Data.DataColumn("NumeroCheque", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroCheque)
            Me.columnValorReembolso = New Global.System.Data.DataColumn("ValorReembolso", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValorReembolso)
            Me.columnFecha.Caption = "Descripcion"
            Me.columnNombreCheque.Caption = "Detalle"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPagosRow() As PagosRow
            Return CType(Me.NewRow,PagosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PagosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PagosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PagosRowChangedEvent) Is Nothing) Then
                RaiseEvent PagosRowChanged(Me, New PagosRowChangeEvent(CType(e.Row,PagosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PagosRowChangingEvent) Is Nothing) Then
                RaiseEvent PagosRowChanging(Me, New PagosRowChangeEvent(CType(e.Row,PagosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PagosRowDeletedEvent) Is Nothing) Then
                RaiseEvent PagosRowDeleted(Me, New PagosRowChangeEvent(CType(e.Row,PagosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PagosRowDeletingEvent) Is Nothing) Then
                RaiseEvent PagosRowDeleting(Me, New PagosRowChangeEvent(CType(e.Row,PagosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePagosRow(ByVal row As PagosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSiniestros = New dsSiniestros
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PagosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BienesAseguradosDataTable
        Inherits Global.System.Data.TypedTableBase(Of BienesAseguradosRow)
        
        Private columnIdPoliza As Global.System.Data.DataColumn
        
        Private columnIdProducto As Global.System.Data.DataColumn
        
        Private columnIdCertificado As Global.System.Data.DataColumn
        
        Private columnIdSiniestro As Global.System.Data.DataColumn
        
        Private columnOrden As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnDetalle As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BienesAsegurados"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdPolizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdPoliza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCertificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCertificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdSiniestroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdSiniestro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrdenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrden
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DetalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDetalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BienesAseguradosRow
            Get
                Return CType(Me.Rows(index),BienesAseguradosRow)
            End Get
        End Property
        
        Public Event BienesAseguradosRowChanging As BienesAseguradosRowChangeEventHandler
        
        Public Event BienesAseguradosRowChanged As BienesAseguradosRowChangeEventHandler
        
        Public Event BienesAseguradosRowDeleting As BienesAseguradosRowChangeEventHandler
        
        Public Event BienesAseguradosRowDeleted As BienesAseguradosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBienesAseguradosRow(ByVal row As BienesAseguradosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBienesAseguradosRow(ByVal IdPoliza As String, ByVal IdProducto As String, ByVal IdCertificado As String, ByVal IdSiniestro As String, ByVal Orden As Integer, ByVal Descripcion As String, ByVal Detalle As String) As BienesAseguradosRow
            Dim rowBienesAseguradosRow As BienesAseguradosRow = CType(Me.NewRow,BienesAseguradosRow)
            Dim columnValuesArray() As Object = New Object() {IdPoliza, IdProducto, IdCertificado, IdSiniestro, Orden, Descripcion, Detalle}
            rowBienesAseguradosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBienesAseguradosRow)
            Return rowBienesAseguradosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BienesAseguradosDataTable = CType(MyBase.Clone,BienesAseguradosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BienesAseguradosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdPoliza = MyBase.Columns("IdPoliza")
            Me.columnIdProducto = MyBase.Columns("IdProducto")
            Me.columnIdCertificado = MyBase.Columns("IdCertificado")
            Me.columnIdSiniestro = MyBase.Columns("IdSiniestro")
            Me.columnOrden = MyBase.Columns("Orden")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnDetalle = MyBase.Columns("Detalle")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdPoliza = New Global.System.Data.DataColumn("IdPoliza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdPoliza)
            Me.columnIdProducto = New Global.System.Data.DataColumn("IdProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdProducto)
            Me.columnIdCertificado = New Global.System.Data.DataColumn("IdCertificado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCertificado)
            Me.columnIdSiniestro = New Global.System.Data.DataColumn("IdSiniestro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdSiniestro)
            Me.columnOrden = New Global.System.Data.DataColumn("Orden", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrden)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnDetalle = New Global.System.Data.DataColumn("Detalle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDetalle)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBienesAseguradosRow() As BienesAseguradosRow
            Return CType(Me.NewRow,BienesAseguradosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BienesAseguradosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BienesAseguradosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BienesAseguradosRowChangedEvent) Is Nothing) Then
                RaiseEvent BienesAseguradosRowChanged(Me, New BienesAseguradosRowChangeEvent(CType(e.Row,BienesAseguradosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BienesAseguradosRowChangingEvent) Is Nothing) Then
                RaiseEvent BienesAseguradosRowChanging(Me, New BienesAseguradosRowChangeEvent(CType(e.Row,BienesAseguradosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BienesAseguradosRowDeletedEvent) Is Nothing) Then
                RaiseEvent BienesAseguradosRowDeleted(Me, New BienesAseguradosRowChangeEvent(CType(e.Row,BienesAseguradosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BienesAseguradosRowDeletingEvent) Is Nothing) Then
                RaiseEvent BienesAseguradosRowDeleting(Me, New BienesAseguradosRowChangeEvent(CType(e.Row,BienesAseguradosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBienesAseguradosRow(ByVal row As BienesAseguradosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSiniestros = New dsSiniestros
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BienesAseguradosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RequisitosDataTable
        Inherits Global.System.Data.TypedTableBase(Of RequisitosRow)
        
        Private columnIdPoliza As Global.System.Data.DataColumn
        
        Private columnIdProducto As Global.System.Data.DataColumn
        
        Private columnIdCertificado As Global.System.Data.DataColumn
        
        Private columnIdSiniestro As Global.System.Data.DataColumn
        
        Private columnIdRequisito As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnFechaPresentado As Global.System.Data.DataColumn
        
        Private columnComentarios As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnReferencia As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Requisitos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdPolizaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdPoliza
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdCertificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdCertificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdSiniestroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdSiniestro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdRequisitoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdRequisito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaPresentadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaPresentado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ComentariosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComentarios
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RequisitosRow
            Get
                Return CType(Me.Rows(index),RequisitosRow)
            End Get
        End Property
        
        Public Event RequisitosRowChanging As RequisitosRowChangeEventHandler
        
        Public Event RequisitosRowChanged As RequisitosRowChangeEventHandler
        
        Public Event RequisitosRowDeleting As RequisitosRowChangeEventHandler
        
        Public Event RequisitosRowDeleted As RequisitosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRequisitosRow(ByVal row As RequisitosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRequisitosRow(ByVal IdPoliza As String, ByVal IdProducto As String, ByVal IdCertificado As String, ByVal IdSiniestro As String, ByVal IdRequisito As Integer, ByVal Descripcion As String, ByVal FechaPresentado As Date, ByVal Comentarios As String, ByVal Estado As String, ByVal Referencia As String) As RequisitosRow
            Dim rowRequisitosRow As RequisitosRow = CType(Me.NewRow,RequisitosRow)
            Dim columnValuesArray() As Object = New Object() {IdPoliza, IdProducto, IdCertificado, IdSiniestro, IdRequisito, Descripcion, FechaPresentado, Comentarios, Estado, Referencia}
            rowRequisitosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRequisitosRow)
            Return rowRequisitosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RequisitosDataTable = CType(MyBase.Clone,RequisitosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RequisitosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdPoliza = MyBase.Columns("IdPoliza")
            Me.columnIdProducto = MyBase.Columns("IdProducto")
            Me.columnIdCertificado = MyBase.Columns("IdCertificado")
            Me.columnIdSiniestro = MyBase.Columns("IdSiniestro")
            Me.columnIdRequisito = MyBase.Columns("IdRequisito")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnFechaPresentado = MyBase.Columns("FechaPresentado")
            Me.columnComentarios = MyBase.Columns("Comentarios")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnReferencia = MyBase.Columns("Referencia")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdPoliza = New Global.System.Data.DataColumn("IdPoliza", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdPoliza)
            Me.columnIdProducto = New Global.System.Data.DataColumn("IdProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdProducto)
            Me.columnIdCertificado = New Global.System.Data.DataColumn("IdCertificado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdCertificado)
            Me.columnIdSiniestro = New Global.System.Data.DataColumn("IdSiniestro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdSiniestro)
            Me.columnIdRequisito = New Global.System.Data.DataColumn("IdRequisito", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdRequisito)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnFechaPresentado = New Global.System.Data.DataColumn("FechaPresentado", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaPresentado)
            Me.columnComentarios = New Global.System.Data.DataColumn("Comentarios", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComentarios)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnReferencia = New Global.System.Data.DataColumn("Referencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferencia)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRequisitosRow() As RequisitosRow
            Return CType(Me.NewRow,RequisitosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RequisitosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RequisitosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RequisitosRowChangedEvent) Is Nothing) Then
                RaiseEvent RequisitosRowChanged(Me, New RequisitosRowChangeEvent(CType(e.Row,RequisitosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RequisitosRowChangingEvent) Is Nothing) Then
                RaiseEvent RequisitosRowChanging(Me, New RequisitosRowChangeEvent(CType(e.Row,RequisitosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RequisitosRowDeletedEvent) Is Nothing) Then
                RaiseEvent RequisitosRowDeleted(Me, New RequisitosRowChangeEvent(CType(e.Row,RequisitosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RequisitosRowDeletingEvent) Is Nothing) Then
                RaiseEvent RequisitosRowDeleting(Me, New RequisitosRowChangeEvent(CType(e.Row,RequisitosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRequisitosRow(ByVal row As RequisitosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSiniestros = New dsSiniestros
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RequisitosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SiniestrosRow
        Inherits Global.System.Data.DataRow
        
        Private tableSiniestros As SiniestrosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSiniestros = CType(Me.Table,SiniestrosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdPoliza() As String
            Get
                Return CType(Me(Me.tableSiniestros.IdPolizaColumn),String)
            End Get
            Set
                Me(Me.tableSiniestros.IdPolizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdProducto() As String
            Get
                Return CType(Me(Me.tableSiniestros.IdProductoColumn),String)
            End Get
            Set
                Me(Me.tableSiniestros.IdProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCertificado() As String
            Get
                Return CType(Me(Me.tableSiniestros.IdCertificadoColumn),String)
            End Get
            Set
                Me(Me.tableSiniestros.IdCertificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdSiniestro() As String
            Get
                Return CType(Me(Me.tableSiniestros.IdSiniestroColumn),String)
            End Get
            Set
                Me(Me.tableSiniestros.IdSiniestroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaOcurrido() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.FechaOcurridoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaOcurrido' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.FechaOcurridoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaPresentado() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.FechaPresentadoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaPresentado' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.FechaPresentadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoSiniestro() As String
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.EstadoSiniestroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EstadoSiniestro' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.EstadoSiniestroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombrePresentaReclamo() As String
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.NombrePresentaReclamoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NombrePresentaReclamo' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.NombrePresentaReclamoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LugarSiniestros() As String
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.LugarSiniestrosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LugarSiniestros' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.LugarSiniestrosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionSiniestro() As String
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.DescripcionSiniestroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DescripcionSiniestro' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.DescripcionSiniestroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionReserva() As String
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.DescripcionReservaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DescripcionReserva' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.DescripcionReservaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalPresentado() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.TotalPresentadoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalPresentado' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.TotalPresentadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalNoCubierto() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.TotalNoCubiertoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalNoCubierto' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.TotalNoCubiertoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalCubierto() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.TotalCubiertoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalCubierto' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.TotalCubiertoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalDeducible() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.TotalDeducibleColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalDeducible' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.TotalDeducibleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalCoaseguro() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.TotalCoaseguroColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalCoaseguro' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.TotalCoaseguroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalDeudores() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.TotalDeudoresColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalDeudores' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.TotalDeudoresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalPendiente() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.TotalPendienteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalPendiente' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.TotalPendienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalReembolso() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.TotalReembolsoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalReembolso' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.TotalReembolsoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Aseguradora() As String
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.AseguradoraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Aseguradora' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.AseguradoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Producto() As String
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.ProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Producto' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.ProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdSiniestroAseguradora() As String
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.IdSiniestroAseguradoraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdSiniestroAseguradora' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.IdSiniestroAseguradoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdEnvio() As String
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.IdEnvioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdEnvio' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.IdEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Contratante() As String
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.ContratanteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contratante' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.ContratanteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Asegurado() As String
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.AseguradoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Asegurado' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.AseguradoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VigenciaDesde() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.VigenciaDesdeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VigenciaDesde' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.VigenciaDesdeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VigenciaHasta() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.VigenciaHastaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VigenciaHasta' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.VigenciaHastaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoProducto() As String
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.TipoProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TipoProducto' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.TipoProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescripcionLiquidacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.DescripcionLiquidacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DescripcionLiquidacion' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.DescripcionLiquidacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UltimaGestion() As String
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.UltimaGestionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UltimaGestion' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.UltimaGestionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EjecutivoCta() As String
            Get
                Try 
                    Return CType(Me(Me.tableSiniestros.EjecutivoCtaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EjecutivoCta' in table 'Siniestros' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSiniestros.EjecutivoCtaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaOcurridoNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.FechaOcurridoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaOcurridoNull()
            Me(Me.tableSiniestros.FechaOcurridoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaPresentadoNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.FechaPresentadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaPresentadoNull()
            Me(Me.tableSiniestros.FechaPresentadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoSiniestroNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.EstadoSiniestroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoSiniestroNull()
            Me(Me.tableSiniestros.EstadoSiniestroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombrePresentaReclamoNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.NombrePresentaReclamoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombrePresentaReclamoNull()
            Me(Me.tableSiniestros.NombrePresentaReclamoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLugarSiniestrosNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.LugarSiniestrosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLugarSiniestrosNull()
            Me(Me.tableSiniestros.LugarSiniestrosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionSiniestroNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.DescripcionSiniestroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionSiniestroNull()
            Me(Me.tableSiniestros.DescripcionSiniestroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionReservaNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.DescripcionReservaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionReservaNull()
            Me(Me.tableSiniestros.DescripcionReservaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalPresentadoNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.TotalPresentadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalPresentadoNull()
            Me(Me.tableSiniestros.TotalPresentadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNoCubiertoNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.TotalNoCubiertoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNoCubiertoNull()
            Me(Me.tableSiniestros.TotalNoCubiertoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalCubiertoNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.TotalCubiertoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalCubiertoNull()
            Me(Me.tableSiniestros.TotalCubiertoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalDeducibleNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.TotalDeducibleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalDeducibleNull()
            Me(Me.tableSiniestros.TotalDeducibleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalCoaseguroNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.TotalCoaseguroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalCoaseguroNull()
            Me(Me.tableSiniestros.TotalCoaseguroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalDeudoresNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.TotalDeudoresColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalDeudoresNull()
            Me(Me.tableSiniestros.TotalDeudoresColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalPendienteNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.TotalPendienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalPendienteNull()
            Me(Me.tableSiniestros.TotalPendienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalReembolsoNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.TotalReembolsoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalReembolsoNull()
            Me(Me.tableSiniestros.TotalReembolsoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAseguradoraNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.AseguradoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAseguradoraNull()
            Me(Me.tableSiniestros.AseguradoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductoNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.ProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductoNull()
            Me(Me.tableSiniestros.ProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdSiniestroAseguradoraNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.IdSiniestroAseguradoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdSiniestroAseguradoraNull()
            Me(Me.tableSiniestros.IdSiniestroAseguradoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdEnvioNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.IdEnvioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdEnvioNull()
            Me(Me.tableSiniestros.IdEnvioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContratanteNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.ContratanteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContratanteNull()
            Me(Me.tableSiniestros.ContratanteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAseguradoNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.AseguradoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAseguradoNull()
            Me(Me.tableSiniestros.AseguradoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVigenciaDesdeNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.VigenciaDesdeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVigenciaDesdeNull()
            Me(Me.tableSiniestros.VigenciaDesdeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVigenciaHastaNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.VigenciaHastaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVigenciaHastaNull()
            Me(Me.tableSiniestros.VigenciaHastaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoProductoNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.TipoProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoProductoNull()
            Me(Me.tableSiniestros.TipoProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionLiquidacionNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.DescripcionLiquidacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionLiquidacionNull()
            Me(Me.tableSiniestros.DescripcionLiquidacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUltimaGestionNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.UltimaGestionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUltimaGestionNull()
            Me(Me.tableSiniestros.UltimaGestionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEjecutivoCtaNull() As Boolean
            Return Me.IsNull(Me.tableSiniestros.EjecutivoCtaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEjecutivoCtaNull()
            Me(Me.tableSiniestros.EjecutivoCtaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ImagenesRow
        Inherits Global.System.Data.DataRow
        
        Private tableImagenes As ImagenesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableImagenes = CType(Me.Table,ImagenesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Logo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableImagenes.LogoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Logo' in table 'Imagenes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImagenes.LogoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sello() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableImagenes.SelloColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sello' in table 'Imagenes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImagenes.SelloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Logo2() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableImagenes.Logo2Column),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Logo2' in table 'Imagenes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImagenes.Logo2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogoNull() As Boolean
            Return Me.IsNull(Me.tableImagenes.LogoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogoNull()
            Me(Me.tableImagenes.LogoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSelloNull() As Boolean
            Return Me.IsNull(Me.tableImagenes.SelloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSelloNull()
            Me(Me.tableImagenes.SelloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogo2Null() As Boolean
            Return Me.IsNull(Me.tableImagenes.Logo2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogo2Null()
            Me(Me.tableImagenes.Logo2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AseguradosRow
        Inherits Global.System.Data.DataRow
        
        Private tableAsegurados As AseguradosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAsegurados = CType(Me.Table,AseguradosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdPoliza() As String
            Get
                Try 
                    Return CType(Me(Me.tableAsegurados.IdPolizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdPoliza' in table 'Asegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAsegurados.IdPolizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCertificado() As String
            Get
                Try 
                    Return CType(Me(Me.tableAsegurados.IdCertificadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCertificado' in table 'Asegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAsegurados.IdCertificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdBien() As String
            Get
                Try 
                    Return CType(Me(Me.tableAsegurados.IdBienColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdBien' in table 'Asegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAsegurados.IdBienColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Asegurado() As String
            Get
                Try 
                    Return CType(Me(Me.tableAsegurados.AseguradoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Asegurado' in table 'Asegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAsegurados.AseguradoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaNacimiento() As String
            Get
                Try 
                    Return CType(Me(Me.tableAsegurados.FechaNacimientoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaNacimiento' in table 'Asegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAsegurados.FechaNacimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edad() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAsegurados.EdadColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Edad' in table 'Asegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAsegurados.EdadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Parentesco() As String
            Get
                Try 
                    Return CType(Me(Me.tableAsegurados.ParentescoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Parentesco' in table 'Asegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAsegurados.ParentescoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Deducible() As String
            Get
                Try 
                    Return CType(Me(Me.tableAsegurados.DeducibleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Deducible' in table 'Asegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAsegurados.DeducibleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LimiteCoaseguro() As String
            Get
                Try 
                    Return CType(Me(Me.tableAsegurados.LimiteCoaseguroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LimiteCoaseguro' in table 'Asegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAsegurados.LimiteCoaseguroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaxVitalicio() As String
            Get
                Try 
                    Return CType(Me(Me.tableAsegurados.MaxVitalicioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaxVitalicio' in table 'Asegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAsegurados.MaxVitalicioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorceReembolso() As String
            Get
                Try 
                    Return CType(Me(Me.tableAsegurados.PorceReembolsoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PorceReembolso' in table 'Asegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAsegurados.PorceReembolsoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plan() As String
            Get
                Try 
                    Return CType(Me(Me.tableAsegurados.PlanColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Plan' in table 'Asegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAsegurados.PlanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumaAsegurada() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAsegurados.SumaAseguradaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumaAsegurada' in table 'Asegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAsegurados.SumaAseguradaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Contratante() As String
            Get
                Try 
                    Return CType(Me(Me.tableAsegurados.ContratanteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contratante' in table 'Asegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAsegurados.ContratanteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ValorReclamos() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAsegurados.ValorReclamosColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValorReclamos' in table 'Asegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAsegurados.ValorReclamosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrimaNeta() As Double
            Get
                Try 
                    Return CType(Me(Me.tableAsegurados.PrimaNetaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrimaNeta' in table 'Asegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAsegurados.PrimaNetaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdPolizaNull() As Boolean
            Return Me.IsNull(Me.tableAsegurados.IdPolizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdPolizaNull()
            Me(Me.tableAsegurados.IdPolizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdCertificadoNull() As Boolean
            Return Me.IsNull(Me.tableAsegurados.IdCertificadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdCertificadoNull()
            Me(Me.tableAsegurados.IdCertificadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdBienNull() As Boolean
            Return Me.IsNull(Me.tableAsegurados.IdBienColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdBienNull()
            Me(Me.tableAsegurados.IdBienColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAseguradoNull() As Boolean
            Return Me.IsNull(Me.tableAsegurados.AseguradoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAseguradoNull()
            Me(Me.tableAsegurados.AseguradoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNacimientoNull() As Boolean
            Return Me.IsNull(Me.tableAsegurados.FechaNacimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNacimientoNull()
            Me(Me.tableAsegurados.FechaNacimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEdadNull() As Boolean
            Return Me.IsNull(Me.tableAsegurados.EdadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEdadNull()
            Me(Me.tableAsegurados.EdadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParentescoNull() As Boolean
            Return Me.IsNull(Me.tableAsegurados.ParentescoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParentescoNull()
            Me(Me.tableAsegurados.ParentescoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeducibleNull() As Boolean
            Return Me.IsNull(Me.tableAsegurados.DeducibleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeducibleNull()
            Me(Me.tableAsegurados.DeducibleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLimiteCoaseguroNull() As Boolean
            Return Me.IsNull(Me.tableAsegurados.LimiteCoaseguroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLimiteCoaseguroNull()
            Me(Me.tableAsegurados.LimiteCoaseguroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaxVitalicioNull() As Boolean
            Return Me.IsNull(Me.tableAsegurados.MaxVitalicioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaxVitalicioNull()
            Me(Me.tableAsegurados.MaxVitalicioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorceReembolsoNull() As Boolean
            Return Me.IsNull(Me.tableAsegurados.PorceReembolsoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorceReembolsoNull()
            Me(Me.tableAsegurados.PorceReembolsoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlanNull() As Boolean
            Return Me.IsNull(Me.tableAsegurados.PlanColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlanNull()
            Me(Me.tableAsegurados.PlanColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumaAseguradaNull() As Boolean
            Return Me.IsNull(Me.tableAsegurados.SumaAseguradaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumaAseguradaNull()
            Me(Me.tableAsegurados.SumaAseguradaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContratanteNull() As Boolean
            Return Me.IsNull(Me.tableAsegurados.ContratanteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContratanteNull()
            Me(Me.tableAsegurados.ContratanteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValorReclamosNull() As Boolean
            Return Me.IsNull(Me.tableAsegurados.ValorReclamosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValorReclamosNull()
            Me(Me.tableAsegurados.ValorReclamosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrimaNetaNull() As Boolean
            Return Me.IsNull(Me.tableAsegurados.PrimaNetaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrimaNetaNull()
            Me(Me.tableAsegurados.PrimaNetaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DetalleRow
        Inherits Global.System.Data.DataRow
        
        Private tableDetalle As DetalleDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDetalle = CType(Me.Table,DetalleDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdPoliza() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalle.IdPolizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdPoliza' in table 'Detalle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalle.IdPolizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdProducto() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalle.IdProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdProducto' in table 'Detalle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalle.IdProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCertificado() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalle.IdCertificadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCertificado' in table 'Detalle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalle.IdCertificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdSiniestro() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalle.IdSiniestroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdSiniestro' in table 'Detalle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalle.IdSiniestroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Orden() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDetalle.OrdenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Orden' in table 'Detalle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalle.OrdenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalle.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'Detalle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalle.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Detalle() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalle.DetalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Detalle' in table 'Detalle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalle.DetalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Categoria() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalle.CategoriaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Categoria' in table 'Detalle' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalle.CategoriaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdPolizaNull() As Boolean
            Return Me.IsNull(Me.tableDetalle.IdPolizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdPolizaNull()
            Me(Me.tableDetalle.IdPolizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdProductoNull() As Boolean
            Return Me.IsNull(Me.tableDetalle.IdProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdProductoNull()
            Me(Me.tableDetalle.IdProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdCertificadoNull() As Boolean
            Return Me.IsNull(Me.tableDetalle.IdCertificadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdCertificadoNull()
            Me(Me.tableDetalle.IdCertificadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdSiniestroNull() As Boolean
            Return Me.IsNull(Me.tableDetalle.IdSiniestroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdSiniestroNull()
            Me(Me.tableDetalle.IdSiniestroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrdenNull() As Boolean
            Return Me.IsNull(Me.tableDetalle.OrdenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrdenNull()
            Me(Me.tableDetalle.OrdenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableDetalle.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableDetalle.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDetalleNull() As Boolean
            Return Me.IsNull(Me.tableDetalle.DetalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDetalleNull()
            Me(Me.tableDetalle.DetalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCategoriaNull() As Boolean
            Return Me.IsNull(Me.tableDetalle.CategoriaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCategoriaNull()
            Me(Me.tableDetalle.CategoriaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class GastosRow
        Inherits Global.System.Data.DataRow
        
        Private tableGastos As GastosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGastos = CType(Me.Table,GastosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdPoliza() As String
            Get
                Try 
                    Return CType(Me(Me.tableGastos.IdPolizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdPoliza' in table 'Gastos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastos.IdPolizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdProducto() As String
            Get
                Try 
                    Return CType(Me(Me.tableGastos.IdProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdProducto' in table 'Gastos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastos.IdProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCertificado() As String
            Get
                Try 
                    Return CType(Me(Me.tableGastos.IdCertificadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCertificado' in table 'Gastos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastos.IdCertificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdSiniestro() As String
            Get
                Try 
                    Return CType(Me(Me.tableGastos.IdSiniestroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdSiniestro' in table 'Gastos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastos.IdSiniestroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Orden() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGastos.OrdenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Orden' in table 'Gastos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastos.OrdenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gasto() As String
            Get
                Try 
                    Return CType(Me(Me.tableGastos.GastoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gasto' in table 'Gastos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastos.GastoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Presentado() As Double
            Get
                Try 
                    Return CType(Me(Me.tableGastos.PresentadoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Presentado' in table 'Gastos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastos.PresentadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoCubierto() As Double
            Get
                Try 
                    Return CType(Me(Me.tableGastos.NoCubiertoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NoCubierto' in table 'Gastos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastos.NoCubiertoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cubierto() As Double
            Get
                Try 
                    Return CType(Me(Me.tableGastos.CubiertoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cubierto' in table 'Gastos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastos.CubiertoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observaciones() As String
            Get
                Try 
                    Return CType(Me(Me.tableGastos.ObservacionesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observaciones' in table 'Gastos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastos.ObservacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaPresentado() As Date
            Get
                Try 
                    Return CType(Me(Me.tableGastos.FechaPresentadoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaPresentado' in table 'Gastos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastos.FechaPresentadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdPolizaNull() As Boolean
            Return Me.IsNull(Me.tableGastos.IdPolizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdPolizaNull()
            Me(Me.tableGastos.IdPolizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdProductoNull() As Boolean
            Return Me.IsNull(Me.tableGastos.IdProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdProductoNull()
            Me(Me.tableGastos.IdProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdCertificadoNull() As Boolean
            Return Me.IsNull(Me.tableGastos.IdCertificadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdCertificadoNull()
            Me(Me.tableGastos.IdCertificadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdSiniestroNull() As Boolean
            Return Me.IsNull(Me.tableGastos.IdSiniestroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdSiniestroNull()
            Me(Me.tableGastos.IdSiniestroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrdenNull() As Boolean
            Return Me.IsNull(Me.tableGastos.OrdenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrdenNull()
            Me(Me.tableGastos.OrdenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGastoNull() As Boolean
            Return Me.IsNull(Me.tableGastos.GastoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGastoNull()
            Me(Me.tableGastos.GastoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPresentadoNull() As Boolean
            Return Me.IsNull(Me.tableGastos.PresentadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPresentadoNull()
            Me(Me.tableGastos.PresentadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoCubiertoNull() As Boolean
            Return Me.IsNull(Me.tableGastos.NoCubiertoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoCubiertoNull()
            Me(Me.tableGastos.NoCubiertoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCubiertoNull() As Boolean
            Return Me.IsNull(Me.tableGastos.CubiertoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCubiertoNull()
            Me(Me.tableGastos.CubiertoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionesNull() As Boolean
            Return Me.IsNull(Me.tableGastos.ObservacionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionesNull()
            Me(Me.tableGastos.ObservacionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaPresentadoNull() As Boolean
            Return Me.IsNull(Me.tableGastos.FechaPresentadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaPresentadoNull()
            Me(Me.tableGastos.FechaPresentadoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PagosRow
        Inherits Global.System.Data.DataRow
        
        Private tablePagos As PagosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePagos = CType(Me.Table,PagosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdPoliza() As String
            Get
                Try 
                    Return CType(Me(Me.tablePagos.IdPolizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdPoliza' in table 'Pagos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePagos.IdPolizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdProducto() As String
            Get
                Try 
                    Return CType(Me(Me.tablePagos.IdProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdProducto' in table 'Pagos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePagos.IdProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCertificado() As String
            Get
                Try 
                    Return CType(Me(Me.tablePagos.IdCertificadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCertificado' in table 'Pagos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePagos.IdCertificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdSiniestro() As String
            Get
                Try 
                    Return CType(Me(Me.tablePagos.IdSiniestroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdSiniestro' in table 'Pagos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePagos.IdSiniestroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Orden() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePagos.OrdenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Orden' in table 'Pagos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePagos.OrdenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePagos.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'Pagos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePagos.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCheque() As String
            Get
                Try 
                    Return CType(Me(Me.tablePagos.NombreChequeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NombreCheque' in table 'Pagos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePagos.NombreChequeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumeroCheque() As String
            Get
                Try 
                    Return CType(Me(Me.tablePagos.NumeroChequeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumeroCheque' in table 'Pagos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePagos.NumeroChequeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ValorReembolso() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePagos.ValorReembolsoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValorReembolso' in table 'Pagos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePagos.ValorReembolsoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdPolizaNull() As Boolean
            Return Me.IsNull(Me.tablePagos.IdPolizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdPolizaNull()
            Me(Me.tablePagos.IdPolizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdProductoNull() As Boolean
            Return Me.IsNull(Me.tablePagos.IdProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdProductoNull()
            Me(Me.tablePagos.IdProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdCertificadoNull() As Boolean
            Return Me.IsNull(Me.tablePagos.IdCertificadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdCertificadoNull()
            Me(Me.tablePagos.IdCertificadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdSiniestroNull() As Boolean
            Return Me.IsNull(Me.tablePagos.IdSiniestroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdSiniestroNull()
            Me(Me.tablePagos.IdSiniestroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrdenNull() As Boolean
            Return Me.IsNull(Me.tablePagos.OrdenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrdenNull()
            Me(Me.tablePagos.OrdenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tablePagos.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tablePagos.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreChequeNull() As Boolean
            Return Me.IsNull(Me.tablePagos.NombreChequeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreChequeNull()
            Me(Me.tablePagos.NombreChequeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumeroChequeNull() As Boolean
            Return Me.IsNull(Me.tablePagos.NumeroChequeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumeroChequeNull()
            Me(Me.tablePagos.NumeroChequeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValorReembolsoNull() As Boolean
            Return Me.IsNull(Me.tablePagos.ValorReembolsoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValorReembolsoNull()
            Me(Me.tablePagos.ValorReembolsoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BienesAseguradosRow
        Inherits Global.System.Data.DataRow
        
        Private tableBienesAsegurados As BienesAseguradosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBienesAsegurados = CType(Me.Table,BienesAseguradosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdPoliza() As String
            Get
                Try 
                    Return CType(Me(Me.tableBienesAsegurados.IdPolizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdPoliza' in table 'BienesAsegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBienesAsegurados.IdPolizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdProducto() As String
            Get
                Try 
                    Return CType(Me(Me.tableBienesAsegurados.IdProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdProducto' in table 'BienesAsegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBienesAsegurados.IdProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCertificado() As String
            Get
                Try 
                    Return CType(Me(Me.tableBienesAsegurados.IdCertificadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCertificado' in table 'BienesAsegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBienesAsegurados.IdCertificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdSiniestro() As String
            Get
                Try 
                    Return CType(Me(Me.tableBienesAsegurados.IdSiniestroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdSiniestro' in table 'BienesAsegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBienesAsegurados.IdSiniestroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Orden() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBienesAsegurados.OrdenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Orden' in table 'BienesAsegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBienesAsegurados.OrdenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableBienesAsegurados.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'BienesAsegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBienesAsegurados.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Detalle() As String
            Get
                Try 
                    Return CType(Me(Me.tableBienesAsegurados.DetalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Detalle' in table 'BienesAsegurados' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBienesAsegurados.DetalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdPolizaNull() As Boolean
            Return Me.IsNull(Me.tableBienesAsegurados.IdPolizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdPolizaNull()
            Me(Me.tableBienesAsegurados.IdPolizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdProductoNull() As Boolean
            Return Me.IsNull(Me.tableBienesAsegurados.IdProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdProductoNull()
            Me(Me.tableBienesAsegurados.IdProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdCertificadoNull() As Boolean
            Return Me.IsNull(Me.tableBienesAsegurados.IdCertificadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdCertificadoNull()
            Me(Me.tableBienesAsegurados.IdCertificadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdSiniestroNull() As Boolean
            Return Me.IsNull(Me.tableBienesAsegurados.IdSiniestroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdSiniestroNull()
            Me(Me.tableBienesAsegurados.IdSiniestroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrdenNull() As Boolean
            Return Me.IsNull(Me.tableBienesAsegurados.OrdenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrdenNull()
            Me(Me.tableBienesAsegurados.OrdenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableBienesAsegurados.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableBienesAsegurados.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDetalleNull() As Boolean
            Return Me.IsNull(Me.tableBienesAsegurados.DetalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDetalleNull()
            Me(Me.tableBienesAsegurados.DetalleColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RequisitosRow
        Inherits Global.System.Data.DataRow
        
        Private tableRequisitos As RequisitosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRequisitos = CType(Me.Table,RequisitosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdPoliza() As String
            Get
                Try 
                    Return CType(Me(Me.tableRequisitos.IdPolizaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdPoliza' in table 'Requisitos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequisitos.IdPolizaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdProducto() As String
            Get
                Try 
                    Return CType(Me(Me.tableRequisitos.IdProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdProducto' in table 'Requisitos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequisitos.IdProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdCertificado() As String
            Get
                Try 
                    Return CType(Me(Me.tableRequisitos.IdCertificadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdCertificado' in table 'Requisitos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequisitos.IdCertificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdSiniestro() As String
            Get
                Try 
                    Return CType(Me(Me.tableRequisitos.IdSiniestroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdSiniestro' in table 'Requisitos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequisitos.IdSiniestroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdRequisito() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRequisitos.IdRequisitoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdRequisito' in table 'Requisitos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequisitos.IdRequisitoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableRequisitos.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Descripcion' in table 'Requisitos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequisitos.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaPresentado() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRequisitos.FechaPresentadoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FechaPresentado' in table 'Requisitos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequisitos.FechaPresentadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comentarios() As String
            Get
                Try 
                    Return CType(Me(Me.tableRequisitos.ComentariosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comentarios' in table 'Requisitos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequisitos.ComentariosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As String
            Get
                Try 
                    Return CType(Me(Me.tableRequisitos.EstadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Estado' in table 'Requisitos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequisitos.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Referencia() As String
            Get
                Try 
                    Return CType(Me(Me.tableRequisitos.ReferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Referencia' in table 'Requisitos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequisitos.ReferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdPolizaNull() As Boolean
            Return Me.IsNull(Me.tableRequisitos.IdPolizaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdPolizaNull()
            Me(Me.tableRequisitos.IdPolizaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdProductoNull() As Boolean
            Return Me.IsNull(Me.tableRequisitos.IdProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdProductoNull()
            Me(Me.tableRequisitos.IdProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdCertificadoNull() As Boolean
            Return Me.IsNull(Me.tableRequisitos.IdCertificadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdCertificadoNull()
            Me(Me.tableRequisitos.IdCertificadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdSiniestroNull() As Boolean
            Return Me.IsNull(Me.tableRequisitos.IdSiniestroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdSiniestroNull()
            Me(Me.tableRequisitos.IdSiniestroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdRequisitoNull() As Boolean
            Return Me.IsNull(Me.tableRequisitos.IdRequisitoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdRequisitoNull()
            Me(Me.tableRequisitos.IdRequisitoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableRequisitos.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableRequisitos.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaPresentadoNull() As Boolean
            Return Me.IsNull(Me.tableRequisitos.FechaPresentadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaPresentadoNull()
            Me(Me.tableRequisitos.FechaPresentadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsComentariosNull() As Boolean
            Return Me.IsNull(Me.tableRequisitos.ComentariosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetComentariosNull()
            Me(Me.tableRequisitos.ComentariosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tableRequisitos.EstadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoNull()
            Me(Me.tableRequisitos.EstadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReferenciaNull() As Boolean
            Return Me.IsNull(Me.tableRequisitos.ReferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReferenciaNull()
            Me(Me.tableRequisitos.ReferenciaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SiniestrosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SiniestrosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SiniestrosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SiniestrosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ImagenesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ImagenesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ImagenesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ImagenesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AseguradosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AseguradosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AseguradosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AseguradosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DetalleRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DetalleRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DetalleRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DetalleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GastosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GastosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GastosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GastosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PagosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PagosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PagosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PagosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BienesAseguradosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BienesAseguradosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BienesAseguradosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BienesAseguradosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RequisitosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RequisitosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RequisitosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RequisitosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
